// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_cache.proto

#ifndef PROTOBUF_db_5fcache_2eproto__INCLUDED
#define PROTOBUF_db_5fcache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DBCACHE {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_5fcache_2eproto();
void protobuf_AssignDesc_db_5fcache_2eproto();
void protobuf_ShutdownFile_db_5fcache_2eproto();

class PlayerBaseInfo;
class PlayerGameRecord;
class PlayerExtraInfo;
class PlayerCard;
class PlayerDie;
class PlayerTicket;
class PlayerInGameProp;
class Player;
class Sync_Player_Data;
class Prop;

// ===================================================================

class PlayerBaseInfo : public ::google::protobuf::Message {
 public:
  PlayerBaseInfo();
  virtual ~PlayerBaseInfo();

  PlayerBaseInfo(const PlayerBaseInfo& from);

  inline PlayerBaseInfo& operator=(const PlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBaseInfo& default_instance();

  void Swap(PlayerBaseInfo* other);

  // implements Message ----------------------------------------------

  PlayerBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBaseInfo& from);
  void MergeFrom(const PlayerBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required bytes nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required int32 head_icon = 3;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 3;
  inline ::google::protobuf::int32 head_icon() const;
  inline void set_head_icon(::google::protobuf::int32 value);

  // required int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required uint32 lvl = 5;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 5;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // required uint64 points = 6;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 6;
  inline ::google::protobuf::uint64 points() const;
  inline void set_points(::google::protobuf::uint64 value);

  // required uint64 experience = 9;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 9;
  inline ::google::protobuf::uint64 experience() const;
  inline void set_experience(::google::protobuf::uint64 value);

  // required uint64 goldCoin = 10;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 10;
  inline ::google::protobuf::uint64 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint64 value);

  // required uint64 marble = 11;
  inline bool has_marble() const;
  inline void clear_marble();
  static const int kMarbleFieldNumber = 11;
  inline ::google::protobuf::uint64 marble() const;
  inline void set_marble(::google::protobuf::uint64 value);

  // required uint32 energy = 12;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 12;
  inline ::google::protobuf::uint32 energy() const;
  inline void set_energy(::google::protobuf::uint32 value);

  // required int32 current_die_id = 13;
  inline bool has_current_die_id() const;
  inline void clear_current_die_id();
  static const int kCurrentDieIdFieldNumber = 13;
  inline ::google::protobuf::int32 current_die_id() const;
  inline void set_current_die_id(::google::protobuf::int32 value);

  // required int32 equipmentCardid = 14;
  inline bool has_equipmentcardid() const;
  inline void clear_equipmentcardid();
  static const int kEquipmentCardidFieldNumber = 14;
  inline ::google::protobuf::int32 equipmentcardid() const;
  inline void set_equipmentcardid(::google::protobuf::int32 value);

  // optional bytes under_write = 15;
  inline bool has_under_write() const;
  inline void clear_under_write();
  static const int kUnderWriteFieldNumber = 15;
  inline const ::std::string& under_write() const;
  inline void set_under_write(const ::std::string& value);
  inline void set_under_write(const char* value);
  inline void set_under_write(const void* value, size_t size);
  inline ::std::string* mutable_under_write();
  inline ::std::string* release_under_write();
  inline void set_allocated_under_write(::std::string* under_write);

  // optional string custom_head = 16;
  inline bool has_custom_head() const;
  inline void clear_custom_head();
  static const int kCustomHeadFieldNumber = 16;
  inline const ::std::string& custom_head() const;
  inline void set_custom_head(const ::std::string& value);
  inline void set_custom_head(const char* value);
  inline void set_custom_head(const char* value, size_t size);
  inline ::std::string* mutable_custom_head();
  inline ::std::string* release_custom_head();
  inline void set_allocated_custom_head(::std::string* custom_head);

  // optional uint32 present_points = 19;
  inline bool has_present_points() const;
  inline void clear_present_points();
  static const int kPresentPointsFieldNumber = 19;
  inline ::google::protobuf::uint32 present_points() const;
  inline void set_present_points(::google::protobuf::uint32 value);

  // required uint32 win_game_count = 7;
  inline bool has_win_game_count() const;
  inline void clear_win_game_count();
  static const int kWinGameCountFieldNumber = 7;
  inline ::google::protobuf::uint32 win_game_count() const;
  inline void set_win_game_count(::google::protobuf::uint32 value);

  // required uint32 play_game_count = 8;
  inline bool has_play_game_count() const;
  inline void clear_play_game_count();
  static const int kPlayGameCountFieldNumber = 8;
  inline ::google::protobuf::uint32 play_game_count() const;
  inline void set_play_game_count(::google::protobuf::uint32 value);

  // optional uint32 highest_points = 17;
  inline bool has_highest_points() const;
  inline void clear_highest_points();
  static const int kHighestPointsFieldNumber = 17;
  inline ::google::protobuf::uint32 highest_points() const;
  inline void set_highest_points(::google::protobuf::uint32 value);

  // optional uint32 game_highest_points = 18;
  inline bool has_game_highest_points() const;
  inline void clear_game_highest_points();
  static const int kGameHighestPointsFieldNumber = 18;
  inline ::google::protobuf::uint32 game_highest_points() const;
  inline void set_game_highest_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerBaseInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_marble();
  inline void clear_has_marble();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_current_die_id();
  inline void clear_has_current_die_id();
  inline void set_has_equipmentcardid();
  inline void clear_has_equipmentcardid();
  inline void set_has_under_write();
  inline void clear_has_under_write();
  inline void set_has_custom_head();
  inline void clear_has_custom_head();
  inline void set_has_present_points();
  inline void clear_has_present_points();
  inline void set_has_win_game_count();
  inline void clear_has_win_game_count();
  inline void set_has_play_game_count();
  inline void clear_has_play_game_count();
  inline void set_has_highest_points();
  inline void clear_has_highest_points();
  inline void set_has_game_highest_points();
  inline void clear_has_game_highest_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nick_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::int32 head_icon_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint64 points_;
  ::google::protobuf::uint64 experience_;
  ::google::protobuf::uint64 goldcoin_;
  ::google::protobuf::uint64 marble_;
  ::google::protobuf::uint32 energy_;
  ::google::protobuf::int32 current_die_id_;
  ::std::string* under_write_;
  ::google::protobuf::int32 equipmentcardid_;
  ::google::protobuf::uint32 present_points_;
  ::std::string* custom_head_;
  ::google::protobuf::uint32 win_game_count_;
  ::google::protobuf::uint32 play_game_count_;
  ::google::protobuf::uint32 highest_points_;
  ::google::protobuf::uint32 game_highest_points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerGameRecord : public ::google::protobuf::Message {
 public:
  PlayerGameRecord();
  virtual ~PlayerGameRecord();

  PlayerGameRecord(const PlayerGameRecord& from);

  inline PlayerGameRecord& operator=(const PlayerGameRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGameRecord& default_instance();

  void Swap(PlayerGameRecord* other);

  // implements Message ----------------------------------------------

  PlayerGameRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerGameRecord& from);
  void MergeFrom(const PlayerGameRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 record_type = 1;
  inline bool has_record_type() const;
  inline void clear_record_type();
  static const int kRecordTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 record_type() const;
  inline void set_record_type(::google::protobuf::uint32 value);

  // required uint32 win_game_count = 2;
  inline bool has_win_game_count() const;
  inline void clear_win_game_count();
  static const int kWinGameCountFieldNumber = 2;
  inline ::google::protobuf::uint32 win_game_count() const;
  inline void set_win_game_count(::google::protobuf::uint32 value);

  // required uint32 lose_game_count = 3;
  inline bool has_lose_game_count() const;
  inline void clear_lose_game_count();
  static const int kLoseGameCountFieldNumber = 3;
  inline ::google::protobuf::uint32 lose_game_count() const;
  inline void set_lose_game_count(::google::protobuf::uint32 value);

  // required uint32 play_game_count = 4;
  inline bool has_play_game_count() const;
  inline void clear_play_game_count();
  static const int kPlayGameCountFieldNumber = 4;
  inline ::google::protobuf::uint32 play_game_count() const;
  inline void set_play_game_count(::google::protobuf::uint32 value);

  // optional uint32 highest_points = 5;
  inline bool has_highest_points() const;
  inline void clear_highest_points();
  static const int kHighestPointsFieldNumber = 5;
  inline ::google::protobuf::uint32 highest_points() const;
  inline void set_highest_points(::google::protobuf::uint32 value);

  // optional uint32 game_highest_points = 6;
  inline bool has_game_highest_points() const;
  inline void clear_game_highest_points();
  static const int kGameHighestPointsFieldNumber = 6;
  inline ::google::protobuf::uint32 game_highest_points() const;
  inline void set_game_highest_points(::google::protobuf::uint32 value);

  // optional uint64 record_time = 7;
  inline bool has_record_time() const;
  inline void clear_record_time();
  static const int kRecordTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 record_time() const;
  inline void set_record_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerGameRecord)
 private:
  inline void set_has_record_type();
  inline void clear_has_record_type();
  inline void set_has_win_game_count();
  inline void clear_has_win_game_count();
  inline void set_has_lose_game_count();
  inline void clear_has_lose_game_count();
  inline void set_has_play_game_count();
  inline void clear_has_play_game_count();
  inline void set_has_highest_points();
  inline void clear_has_highest_points();
  inline void set_has_game_highest_points();
  inline void clear_has_game_highest_points();
  inline void set_has_record_time();
  inline void clear_has_record_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 record_type_;
  ::google::protobuf::uint32 win_game_count_;
  ::google::protobuf::uint32 lose_game_count_;
  ::google::protobuf::uint32 play_game_count_;
  ::google::protobuf::uint32 highest_points_;
  ::google::protobuf::uint32 game_highest_points_;
  ::google::protobuf::uint64 record_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerGameRecord* default_instance_;
};
// -------------------------------------------------------------------

class PlayerExtraInfo : public ::google::protobuf::Message {
 public:
  PlayerExtraInfo();
  virtual ~PlayerExtraInfo();

  PlayerExtraInfo(const PlayerExtraInfo& from);

  inline PlayerExtraInfo& operator=(const PlayerExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerExtraInfo& default_instance();

  void Swap(PlayerExtraInfo* other);

  // implements Message ----------------------------------------------

  PlayerExtraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerExtraInfo& from);
  void MergeFrom(const PlayerExtraInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_login_addr = 1;
  inline bool has_last_login_addr() const;
  inline void clear_last_login_addr();
  static const int kLastLoginAddrFieldNumber = 1;
  inline ::google::protobuf::uint32 last_login_addr() const;
  inline void set_last_login_addr(::google::protobuf::uint32 value);

  // optional uint64 last_login_time = 2;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint32 total_login_times = 3;
  inline bool has_total_login_times() const;
  inline void clear_total_login_times();
  static const int kTotalLoginTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 total_login_times() const;
  inline void set_total_login_times(::google::protobuf::uint32 value);

  // optional uint32 clover_change_time = 4;
  inline bool has_clover_change_time() const;
  inline void clear_clover_change_time();
  static const int kCloverChangeTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 clover_change_time() const;
  inline void set_clover_change_time(::google::protobuf::uint32 value);

  // optional uint64 last_daily_signin_time = 5;
  inline bool has_last_daily_signin_time() const;
  inline void clear_last_daily_signin_time();
  static const int kLastDailySigninTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 last_daily_signin_time() const;
  inline void set_last_daily_signin_time(::google::protobuf::uint64 value);

  // optional uint32 daily_signin_times = 6;
  inline bool has_daily_signin_times() const;
  inline void clear_daily_signin_times();
  static const int kDailySigninTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 daily_signin_times() const;
  inline void set_daily_signin_times(::google::protobuf::uint32 value);

  // optional uint32 max_card_id = 8;
  inline bool has_max_card_id() const;
  inline void clear_max_card_id();
  static const int kMaxCardIdFieldNumber = 8;
  inline ::google::protobuf::uint32 max_card_id() const;
  inline void set_max_card_id(::google::protobuf::uint32 value);

  // optional uint64 ban_date = 13;
  inline bool has_ban_date() const;
  inline void clear_ban_date();
  static const int kBanDateFieldNumber = 13;
  inline ::google::protobuf::uint64 ban_date() const;
  inline void set_ban_date(::google::protobuf::uint64 value);

  // optional uint64 auto_unban_date = 14;
  inline bool has_auto_unban_date() const;
  inline void clear_auto_unban_date();
  static const int kAutoUnbanDateFieldNumber = 14;
  inline ::google::protobuf::uint64 auto_unban_date() const;
  inline void set_auto_unban_date(::google::protobuf::uint64 value);

  // optional uint64 ban_reason = 15;
  inline bool has_ban_reason() const;
  inline void clear_ban_reason();
  static const int kBanReasonFieldNumber = 15;
  inline ::google::protobuf::uint64 ban_reason() const;
  inline void set_ban_reason(::google::protobuf::uint64 value);

  // optional uint64 register_time = 16;
  inline bool has_register_time() const;
  inline void clear_register_time();
  static const int kRegisterTimeFieldNumber = 16;
  inline ::google::protobuf::uint64 register_time() const;
  inline void set_register_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerExtraInfo)
 private:
  inline void set_has_last_login_addr();
  inline void clear_has_last_login_addr();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_total_login_times();
  inline void clear_has_total_login_times();
  inline void set_has_clover_change_time();
  inline void clear_has_clover_change_time();
  inline void set_has_last_daily_signin_time();
  inline void clear_has_last_daily_signin_time();
  inline void set_has_daily_signin_times();
  inline void clear_has_daily_signin_times();
  inline void set_has_max_card_id();
  inline void clear_has_max_card_id();
  inline void set_has_ban_date();
  inline void clear_has_ban_date();
  inline void set_has_auto_unban_date();
  inline void clear_has_auto_unban_date();
  inline void set_has_ban_reason();
  inline void clear_has_ban_reason();
  inline void set_has_register_time();
  inline void clear_has_register_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint32 last_login_addr_;
  ::google::protobuf::uint32 total_login_times_;
  ::google::protobuf::uint64 last_daily_signin_time_;
  ::google::protobuf::uint32 clover_change_time_;
  ::google::protobuf::uint32 daily_signin_times_;
  ::google::protobuf::uint64 ban_date_;
  ::google::protobuf::uint64 auto_unban_date_;
  ::google::protobuf::uint64 ban_reason_;
  ::google::protobuf::uint64 register_time_;
  ::google::protobuf::uint32 max_card_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerExtraInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerCard : public ::google::protobuf::Message {
 public:
  PlayerCard();
  virtual ~PlayerCard();

  PlayerCard(const PlayerCard& from);

  inline PlayerCard& operator=(const PlayerCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCard& default_instance();

  void Swap(PlayerCard* other);

  // implements Message ----------------------------------------------

  PlayerCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerCard& from);
  void MergeFrom(const PlayerCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::int32 uuid() const;
  inline void set_uuid(::google::protobuf::int32 value);

  // required int32 experience = 3;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 3;
  inline ::google::protobuf::int32 experience() const;
  inline void set_experience(::google::protobuf::int32 value);

  // required int32 getTime = 4;
  inline bool has_gettime() const;
  inline void clear_gettime();
  static const int kGetTimeFieldNumber = 4;
  inline ::google::protobuf::int32 gettime() const;
  inline void set_gettime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerCard)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_gettime();
  inline void clear_has_gettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uuid_;
  ::google::protobuf::int32 experience_;
  ::google::protobuf::int32 gettime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerCard* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDie : public ::google::protobuf::Message {
 public:
  PlayerDie();
  virtual ~PlayerDie();

  PlayerDie(const PlayerDie& from);

  inline PlayerDie& operator=(const PlayerDie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDie& default_instance();

  void Swap(PlayerDie* other);

  // implements Message ----------------------------------------------

  PlayerDie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDie& from);
  void MergeFrom(const PlayerDie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 die_id = 1;
  inline bool has_die_id() const;
  inline void clear_die_id();
  static const int kDieIdFieldNumber = 1;
  inline ::google::protobuf::int32 die_id() const;
  inline void set_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerDie)
 private:
  inline void set_has_die_id();
  inline void clear_has_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerDie* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTicket : public ::google::protobuf::Message {
 public:
  PlayerTicket();
  virtual ~PlayerTicket();

  PlayerTicket(const PlayerTicket& from);

  inline PlayerTicket& operator=(const PlayerTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTicket& default_instance();

  void Swap(PlayerTicket* other);

  // implements Message ----------------------------------------------

  PlayerTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTicket& from);
  void MergeFrom(const PlayerTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::uint32 amount() const;
  inline void set_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerTicket)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerTicket* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInGameProp : public ::google::protobuf::Message {
 public:
  PlayerInGameProp();
  virtual ~PlayerInGameProp();

  PlayerInGameProp(const PlayerInGameProp& from);

  inline PlayerInGameProp& operator=(const PlayerInGameProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInGameProp& default_instance();

  void Swap(PlayerInGameProp* other);

  // implements Message ----------------------------------------------

  PlayerInGameProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInGameProp& from);
  void MergeFrom(const PlayerInGameProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 subtype = 2;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 subtype() const;
  inline void set_subtype(::google::protobuf::uint32 value);

  // required uint32 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::uint32 amount() const;
  inline void set_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.PlayerInGameProp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 subtype_;
  ::google::protobuf::uint32 amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static PlayerInGameProp* default_instance_;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // optional .DBCACHE.PlayerBaseInfo base_info = 2;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::DBCACHE::PlayerBaseInfo& base_info() const;
  inline ::DBCACHE::PlayerBaseInfo* mutable_base_info();
  inline ::DBCACHE::PlayerBaseInfo* release_base_info();
  inline void set_allocated_base_info(::DBCACHE::PlayerBaseInfo* base_info);

  // optional .DBCACHE.PlayerExtraInfo extra_info = 3;
  inline bool has_extra_info() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 3;
  inline const ::DBCACHE::PlayerExtraInfo& extra_info() const;
  inline ::DBCACHE::PlayerExtraInfo* mutable_extra_info();
  inline ::DBCACHE::PlayerExtraInfo* release_extra_info();
  inline void set_allocated_extra_info(::DBCACHE::PlayerExtraInfo* extra_info);

  // repeated .DBCACHE.PlayerCard hero_card = 4;
  inline int hero_card_size() const;
  inline void clear_hero_card();
  static const int kHeroCardFieldNumber = 4;
  inline const ::DBCACHE::PlayerCard& hero_card(int index) const;
  inline ::DBCACHE::PlayerCard* mutable_hero_card(int index);
  inline ::DBCACHE::PlayerCard* add_hero_card();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >&
      hero_card() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >*
      mutable_hero_card();

  // repeated .DBCACHE.PlayerDie player_dies = 5;
  inline int player_dies_size() const;
  inline void clear_player_dies();
  static const int kPlayerDiesFieldNumber = 5;
  inline const ::DBCACHE::PlayerDie& player_dies(int index) const;
  inline ::DBCACHE::PlayerDie* mutable_player_dies(int index);
  inline ::DBCACHE::PlayerDie* add_player_dies();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >&
      player_dies() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >*
      mutable_player_dies();

  // repeated .DBCACHE.PlayerTicket player_tickets = 7;
  inline int player_tickets_size() const;
  inline void clear_player_tickets();
  static const int kPlayerTicketsFieldNumber = 7;
  inline const ::DBCACHE::PlayerTicket& player_tickets(int index) const;
  inline ::DBCACHE::PlayerTicket* mutable_player_tickets(int index);
  inline ::DBCACHE::PlayerTicket* add_player_tickets();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerTicket >&
      player_tickets() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerTicket >*
      mutable_player_tickets();

  // repeated .DBCACHE.PlayerInGameProp player_ingame_props = 8;
  inline int player_ingame_props_size() const;
  inline void clear_player_ingame_props();
  static const int kPlayerIngamePropsFieldNumber = 8;
  inline const ::DBCACHE::PlayerInGameProp& player_ingame_props(int index) const;
  inline ::DBCACHE::PlayerInGameProp* mutable_player_ingame_props(int index);
  inline ::DBCACHE::PlayerInGameProp* add_player_ingame_props();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >&
      player_ingame_props() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >*
      mutable_player_ingame_props();

  // repeated .DBCACHE.PlayerGameRecord game_record = 9;
  inline int game_record_size() const;
  inline void clear_game_record();
  static const int kGameRecordFieldNumber = 9;
  inline const ::DBCACHE::PlayerGameRecord& game_record(int index) const;
  inline ::DBCACHE::PlayerGameRecord* mutable_game_record(int index);
  inline ::DBCACHE::PlayerGameRecord* add_game_record();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >&
      game_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >*
      mutable_game_record();

  // optional int32 maxCardId = 6;
  inline bool has_maxcardid() const;
  inline void clear_maxcardid();
  static const int kMaxCardIdFieldNumber = 6;
  inline ::google::protobuf::int32 maxcardid() const;
  inline void set_maxcardid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.Player)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_extra_info();
  inline void clear_has_extra_info();
  inline void set_has_maxcardid();
  inline void clear_has_maxcardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBCACHE::PlayerBaseInfo* base_info_;
  ::DBCACHE::PlayerExtraInfo* extra_info_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard > hero_card_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie > player_dies_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 maxcardid_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerTicket > player_tickets_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp > player_ingame_props_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord > game_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Sync_Player_Data : public ::google::protobuf::Message {
 public:
  Sync_Player_Data();
  virtual ~Sync_Player_Data();

  Sync_Player_Data(const Sync_Player_Data& from);

  inline Sync_Player_Data& operator=(const Sync_Player_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sync_Player_Data& default_instance();

  void Swap(Sync_Player_Data* other);

  // implements Message ----------------------------------------------

  Sync_Player_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sync_Player_Data& from);
  void MergeFrom(const Sync_Player_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required uint64 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // optional .DBCACHE.Player player_data = 3;
  inline bool has_player_data() const;
  inline void clear_player_data();
  static const int kPlayerDataFieldNumber = 3;
  inline const ::DBCACHE::Player& player_data() const;
  inline ::DBCACHE::Player* mutable_player_data();
  inline ::DBCACHE::Player* release_player_data();
  inline void set_allocated_player_data(::DBCACHE::Player* player_data);

  // @@protoc_insertion_point(class_scope:DBCACHE.Sync_Player_Data)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_player_data();
  inline void clear_has_player_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 create_time_;
  ::DBCACHE::Player* player_data_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static Sync_Player_Data* default_instance_;
};
// -------------------------------------------------------------------

class Prop : public ::google::protobuf::Message {
 public:
  Prop();
  virtual ~Prop();

  Prop(const Prop& from);

  inline Prop& operator=(const Prop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Prop& default_instance();

  void Swap(Prop* other);

  // implements Message ----------------------------------------------

  Prop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Prop& from);
  void MergeFrom(const Prop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 prop_id = 1;
  inline bool has_prop_id() const;
  inline void clear_prop_id();
  static const int kPropIdFieldNumber = 1;
  inline ::google::protobuf::uint32 prop_id() const;
  inline void set_prop_id(::google::protobuf::uint32 value);

  // required uint32 prop_amount = 2;
  inline bool has_prop_amount() const;
  inline void clear_prop_amount();
  static const int kPropAmountFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_amount() const;
  inline void set_prop_amount(::google::protobuf::uint32 value);

  // optional uint64 prop_param = 3;
  inline bool has_prop_param() const;
  inline void clear_prop_param();
  static const int kPropParamFieldNumber = 3;
  inline ::google::protobuf::uint64 prop_param() const;
  inline void set_prop_param(::google::protobuf::uint64 value);

  // optional uint64 prop_param2 = 4;
  inline bool has_prop_param2() const;
  inline void clear_prop_param2();
  static const int kPropParam2FieldNumber = 4;
  inline ::google::protobuf::uint64 prop_param2() const;
  inline void set_prop_param2(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DBCACHE.Prop)
 private:
  inline void set_has_prop_id();
  inline void clear_has_prop_id();
  inline void set_has_prop_amount();
  inline void clear_has_prop_amount();
  inline void set_has_prop_param();
  inline void clear_has_prop_param();
  inline void set_has_prop_param2();
  inline void clear_has_prop_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::uint32 prop_amount_;
  ::google::protobuf::uint64 prop_param_;
  ::google::protobuf::uint64 prop_param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_db_5fcache_2eproto();
  friend void protobuf_AssignDesc_db_5fcache_2eproto();
  friend void protobuf_ShutdownFile_db_5fcache_2eproto();

  void InitAsDefaultInstance();
  static Prop* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerBaseInfo

// required uint32 role_id = 1;
inline bool PlayerBaseInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBaseInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBaseInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBaseInfo::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::role_id() const {
  return role_id_;
}
inline void PlayerBaseInfo::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required bytes nick_name = 2;
inline bool PlayerBaseInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBaseInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBaseInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBaseInfo::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& PlayerBaseInfo::nick_name() const {
  return *nick_name_;
}
inline void PlayerBaseInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void PlayerBaseInfo::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void PlayerBaseInfo::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBaseInfo::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* PlayerBaseInfo::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBaseInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 head_icon = 3;
inline bool PlayerBaseInfo::has_head_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerBaseInfo::set_has_head_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerBaseInfo::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerBaseInfo::clear_head_icon() {
  head_icon_ = 0;
  clear_has_head_icon();
}
inline ::google::protobuf::int32 PlayerBaseInfo::head_icon() const {
  return head_icon_;
}
inline void PlayerBaseInfo::set_head_icon(::google::protobuf::int32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// required int32 rank = 4;
inline bool PlayerBaseInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerBaseInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerBaseInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerBaseInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PlayerBaseInfo::rank() const {
  return rank_;
}
inline void PlayerBaseInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 lvl = 5;
inline bool PlayerBaseInfo::has_lvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerBaseInfo::set_has_lvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerBaseInfo::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerBaseInfo::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::lvl() const {
  return lvl_;
}
inline void PlayerBaseInfo::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// required uint64 points = 6;
inline bool PlayerBaseInfo::has_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerBaseInfo::set_has_points() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerBaseInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerBaseInfo::clear_points() {
  points_ = GOOGLE_ULONGLONG(0);
  clear_has_points();
}
inline ::google::protobuf::uint64 PlayerBaseInfo::points() const {
  return points_;
}
inline void PlayerBaseInfo::set_points(::google::protobuf::uint64 value) {
  set_has_points();
  points_ = value;
}

// required uint64 experience = 9;
inline bool PlayerBaseInfo::has_experience() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerBaseInfo::set_has_experience() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerBaseInfo::clear_has_experience() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerBaseInfo::clear_experience() {
  experience_ = GOOGLE_ULONGLONG(0);
  clear_has_experience();
}
inline ::google::protobuf::uint64 PlayerBaseInfo::experience() const {
  return experience_;
}
inline void PlayerBaseInfo::set_experience(::google::protobuf::uint64 value) {
  set_has_experience();
  experience_ = value;
}

// required uint64 goldCoin = 10;
inline bool PlayerBaseInfo::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerBaseInfo::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerBaseInfo::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerBaseInfo::clear_goldcoin() {
  goldcoin_ = GOOGLE_ULONGLONG(0);
  clear_has_goldcoin();
}
inline ::google::protobuf::uint64 PlayerBaseInfo::goldcoin() const {
  return goldcoin_;
}
inline void PlayerBaseInfo::set_goldcoin(::google::protobuf::uint64 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// required uint64 marble = 11;
inline bool PlayerBaseInfo::has_marble() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerBaseInfo::set_has_marble() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerBaseInfo::clear_has_marble() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerBaseInfo::clear_marble() {
  marble_ = GOOGLE_ULONGLONG(0);
  clear_has_marble();
}
inline ::google::protobuf::uint64 PlayerBaseInfo::marble() const {
  return marble_;
}
inline void PlayerBaseInfo::set_marble(::google::protobuf::uint64 value) {
  set_has_marble();
  marble_ = value;
}

// required uint32 energy = 12;
inline bool PlayerBaseInfo::has_energy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerBaseInfo::set_has_energy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerBaseInfo::clear_has_energy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerBaseInfo::clear_energy() {
  energy_ = 0u;
  clear_has_energy();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::energy() const {
  return energy_;
}
inline void PlayerBaseInfo::set_energy(::google::protobuf::uint32 value) {
  set_has_energy();
  energy_ = value;
}

// required int32 current_die_id = 13;
inline bool PlayerBaseInfo::has_current_die_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerBaseInfo::set_has_current_die_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerBaseInfo::clear_has_current_die_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerBaseInfo::clear_current_die_id() {
  current_die_id_ = 0;
  clear_has_current_die_id();
}
inline ::google::protobuf::int32 PlayerBaseInfo::current_die_id() const {
  return current_die_id_;
}
inline void PlayerBaseInfo::set_current_die_id(::google::protobuf::int32 value) {
  set_has_current_die_id();
  current_die_id_ = value;
}

// required int32 equipmentCardid = 14;
inline bool PlayerBaseInfo::has_equipmentcardid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerBaseInfo::set_has_equipmentcardid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerBaseInfo::clear_has_equipmentcardid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerBaseInfo::clear_equipmentcardid() {
  equipmentcardid_ = 0;
  clear_has_equipmentcardid();
}
inline ::google::protobuf::int32 PlayerBaseInfo::equipmentcardid() const {
  return equipmentcardid_;
}
inline void PlayerBaseInfo::set_equipmentcardid(::google::protobuf::int32 value) {
  set_has_equipmentcardid();
  equipmentcardid_ = value;
}

// optional bytes under_write = 15;
inline bool PlayerBaseInfo::has_under_write() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerBaseInfo::set_has_under_write() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerBaseInfo::clear_has_under_write() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerBaseInfo::clear_under_write() {
  if (under_write_ != &::google::protobuf::internal::kEmptyString) {
    under_write_->clear();
  }
  clear_has_under_write();
}
inline const ::std::string& PlayerBaseInfo::under_write() const {
  return *under_write_;
}
inline void PlayerBaseInfo::set_under_write(const ::std::string& value) {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  under_write_->assign(value);
}
inline void PlayerBaseInfo::set_under_write(const char* value) {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  under_write_->assign(value);
}
inline void PlayerBaseInfo::set_under_write(const void* value, size_t size) {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  under_write_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBaseInfo::mutable_under_write() {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  return under_write_;
}
inline ::std::string* PlayerBaseInfo::release_under_write() {
  clear_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = under_write_;
    under_write_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBaseInfo::set_allocated_under_write(::std::string* under_write) {
  if (under_write_ != &::google::protobuf::internal::kEmptyString) {
    delete under_write_;
  }
  if (under_write) {
    set_has_under_write();
    under_write_ = under_write;
  } else {
    clear_has_under_write();
    under_write_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string custom_head = 16;
inline bool PlayerBaseInfo::has_custom_head() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerBaseInfo::set_has_custom_head() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerBaseInfo::clear_has_custom_head() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerBaseInfo::clear_custom_head() {
  if (custom_head_ != &::google::protobuf::internal::kEmptyString) {
    custom_head_->clear();
  }
  clear_has_custom_head();
}
inline const ::std::string& PlayerBaseInfo::custom_head() const {
  return *custom_head_;
}
inline void PlayerBaseInfo::set_custom_head(const ::std::string& value) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(value);
}
inline void PlayerBaseInfo::set_custom_head(const char* value) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(value);
}
inline void PlayerBaseInfo::set_custom_head(const char* value, size_t size) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBaseInfo::mutable_custom_head() {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  return custom_head_;
}
inline ::std::string* PlayerBaseInfo::release_custom_head() {
  clear_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_head_;
    custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBaseInfo::set_allocated_custom_head(::std::string* custom_head) {
  if (custom_head_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_head_;
  }
  if (custom_head) {
    set_has_custom_head();
    custom_head_ = custom_head;
  } else {
    clear_has_custom_head();
    custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 present_points = 19;
inline bool PlayerBaseInfo::has_present_points() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerBaseInfo::set_has_present_points() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerBaseInfo::clear_has_present_points() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerBaseInfo::clear_present_points() {
  present_points_ = 0u;
  clear_has_present_points();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::present_points() const {
  return present_points_;
}
inline void PlayerBaseInfo::set_present_points(::google::protobuf::uint32 value) {
  set_has_present_points();
  present_points_ = value;
}

// required uint32 win_game_count = 7;
inline bool PlayerBaseInfo::has_win_game_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerBaseInfo::set_has_win_game_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerBaseInfo::clear_has_win_game_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerBaseInfo::clear_win_game_count() {
  win_game_count_ = 0u;
  clear_has_win_game_count();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::win_game_count() const {
  return win_game_count_;
}
inline void PlayerBaseInfo::set_win_game_count(::google::protobuf::uint32 value) {
  set_has_win_game_count();
  win_game_count_ = value;
}

// required uint32 play_game_count = 8;
inline bool PlayerBaseInfo::has_play_game_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerBaseInfo::set_has_play_game_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerBaseInfo::clear_has_play_game_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerBaseInfo::clear_play_game_count() {
  play_game_count_ = 0u;
  clear_has_play_game_count();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::play_game_count() const {
  return play_game_count_;
}
inline void PlayerBaseInfo::set_play_game_count(::google::protobuf::uint32 value) {
  set_has_play_game_count();
  play_game_count_ = value;
}

// optional uint32 highest_points = 17;
inline bool PlayerBaseInfo::has_highest_points() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerBaseInfo::set_has_highest_points() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerBaseInfo::clear_has_highest_points() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerBaseInfo::clear_highest_points() {
  highest_points_ = 0u;
  clear_has_highest_points();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::highest_points() const {
  return highest_points_;
}
inline void PlayerBaseInfo::set_highest_points(::google::protobuf::uint32 value) {
  set_has_highest_points();
  highest_points_ = value;
}

// optional uint32 game_highest_points = 18;
inline bool PlayerBaseInfo::has_game_highest_points() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerBaseInfo::set_has_game_highest_points() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerBaseInfo::clear_has_game_highest_points() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerBaseInfo::clear_game_highest_points() {
  game_highest_points_ = 0u;
  clear_has_game_highest_points();
}
inline ::google::protobuf::uint32 PlayerBaseInfo::game_highest_points() const {
  return game_highest_points_;
}
inline void PlayerBaseInfo::set_game_highest_points(::google::protobuf::uint32 value) {
  set_has_game_highest_points();
  game_highest_points_ = value;
}

// -------------------------------------------------------------------

// PlayerGameRecord

// required uint32 record_type = 1;
inline bool PlayerGameRecord::has_record_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGameRecord::set_has_record_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGameRecord::clear_has_record_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGameRecord::clear_record_type() {
  record_type_ = 0u;
  clear_has_record_type();
}
inline ::google::protobuf::uint32 PlayerGameRecord::record_type() const {
  return record_type_;
}
inline void PlayerGameRecord::set_record_type(::google::protobuf::uint32 value) {
  set_has_record_type();
  record_type_ = value;
}

// required uint32 win_game_count = 2;
inline bool PlayerGameRecord::has_win_game_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGameRecord::set_has_win_game_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGameRecord::clear_has_win_game_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGameRecord::clear_win_game_count() {
  win_game_count_ = 0u;
  clear_has_win_game_count();
}
inline ::google::protobuf::uint32 PlayerGameRecord::win_game_count() const {
  return win_game_count_;
}
inline void PlayerGameRecord::set_win_game_count(::google::protobuf::uint32 value) {
  set_has_win_game_count();
  win_game_count_ = value;
}

// required uint32 lose_game_count = 3;
inline bool PlayerGameRecord::has_lose_game_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGameRecord::set_has_lose_game_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGameRecord::clear_has_lose_game_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGameRecord::clear_lose_game_count() {
  lose_game_count_ = 0u;
  clear_has_lose_game_count();
}
inline ::google::protobuf::uint32 PlayerGameRecord::lose_game_count() const {
  return lose_game_count_;
}
inline void PlayerGameRecord::set_lose_game_count(::google::protobuf::uint32 value) {
  set_has_lose_game_count();
  lose_game_count_ = value;
}

// required uint32 play_game_count = 4;
inline bool PlayerGameRecord::has_play_game_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerGameRecord::set_has_play_game_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerGameRecord::clear_has_play_game_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerGameRecord::clear_play_game_count() {
  play_game_count_ = 0u;
  clear_has_play_game_count();
}
inline ::google::protobuf::uint32 PlayerGameRecord::play_game_count() const {
  return play_game_count_;
}
inline void PlayerGameRecord::set_play_game_count(::google::protobuf::uint32 value) {
  set_has_play_game_count();
  play_game_count_ = value;
}

// optional uint32 highest_points = 5;
inline bool PlayerGameRecord::has_highest_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerGameRecord::set_has_highest_points() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerGameRecord::clear_has_highest_points() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerGameRecord::clear_highest_points() {
  highest_points_ = 0u;
  clear_has_highest_points();
}
inline ::google::protobuf::uint32 PlayerGameRecord::highest_points() const {
  return highest_points_;
}
inline void PlayerGameRecord::set_highest_points(::google::protobuf::uint32 value) {
  set_has_highest_points();
  highest_points_ = value;
}

// optional uint32 game_highest_points = 6;
inline bool PlayerGameRecord::has_game_highest_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerGameRecord::set_has_game_highest_points() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerGameRecord::clear_has_game_highest_points() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerGameRecord::clear_game_highest_points() {
  game_highest_points_ = 0u;
  clear_has_game_highest_points();
}
inline ::google::protobuf::uint32 PlayerGameRecord::game_highest_points() const {
  return game_highest_points_;
}
inline void PlayerGameRecord::set_game_highest_points(::google::protobuf::uint32 value) {
  set_has_game_highest_points();
  game_highest_points_ = value;
}

// optional uint64 record_time = 7;
inline bool PlayerGameRecord::has_record_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerGameRecord::set_has_record_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerGameRecord::clear_has_record_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerGameRecord::clear_record_time() {
  record_time_ = GOOGLE_ULONGLONG(0);
  clear_has_record_time();
}
inline ::google::protobuf::uint64 PlayerGameRecord::record_time() const {
  return record_time_;
}
inline void PlayerGameRecord::set_record_time(::google::protobuf::uint64 value) {
  set_has_record_time();
  record_time_ = value;
}

// -------------------------------------------------------------------

// PlayerExtraInfo

// optional uint32 last_login_addr = 1;
inline bool PlayerExtraInfo::has_last_login_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerExtraInfo::set_has_last_login_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerExtraInfo::clear_has_last_login_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerExtraInfo::clear_last_login_addr() {
  last_login_addr_ = 0u;
  clear_has_last_login_addr();
}
inline ::google::protobuf::uint32 PlayerExtraInfo::last_login_addr() const {
  return last_login_addr_;
}
inline void PlayerExtraInfo::set_last_login_addr(::google::protobuf::uint32 value) {
  set_has_last_login_addr();
  last_login_addr_ = value;
}

// optional uint64 last_login_time = 2;
inline bool PlayerExtraInfo::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerExtraInfo::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerExtraInfo::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerExtraInfo::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 PlayerExtraInfo::last_login_time() const {
  return last_login_time_;
}
inline void PlayerExtraInfo::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint32 total_login_times = 3;
inline bool PlayerExtraInfo::has_total_login_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerExtraInfo::set_has_total_login_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerExtraInfo::clear_has_total_login_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerExtraInfo::clear_total_login_times() {
  total_login_times_ = 0u;
  clear_has_total_login_times();
}
inline ::google::protobuf::uint32 PlayerExtraInfo::total_login_times() const {
  return total_login_times_;
}
inline void PlayerExtraInfo::set_total_login_times(::google::protobuf::uint32 value) {
  set_has_total_login_times();
  total_login_times_ = value;
}

// optional uint32 clover_change_time = 4;
inline bool PlayerExtraInfo::has_clover_change_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerExtraInfo::set_has_clover_change_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerExtraInfo::clear_has_clover_change_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerExtraInfo::clear_clover_change_time() {
  clover_change_time_ = 0u;
  clear_has_clover_change_time();
}
inline ::google::protobuf::uint32 PlayerExtraInfo::clover_change_time() const {
  return clover_change_time_;
}
inline void PlayerExtraInfo::set_clover_change_time(::google::protobuf::uint32 value) {
  set_has_clover_change_time();
  clover_change_time_ = value;
}

// optional uint64 last_daily_signin_time = 5;
inline bool PlayerExtraInfo::has_last_daily_signin_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerExtraInfo::set_has_last_daily_signin_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerExtraInfo::clear_has_last_daily_signin_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerExtraInfo::clear_last_daily_signin_time() {
  last_daily_signin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_daily_signin_time();
}
inline ::google::protobuf::uint64 PlayerExtraInfo::last_daily_signin_time() const {
  return last_daily_signin_time_;
}
inline void PlayerExtraInfo::set_last_daily_signin_time(::google::protobuf::uint64 value) {
  set_has_last_daily_signin_time();
  last_daily_signin_time_ = value;
}

// optional uint32 daily_signin_times = 6;
inline bool PlayerExtraInfo::has_daily_signin_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerExtraInfo::set_has_daily_signin_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerExtraInfo::clear_has_daily_signin_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerExtraInfo::clear_daily_signin_times() {
  daily_signin_times_ = 0u;
  clear_has_daily_signin_times();
}
inline ::google::protobuf::uint32 PlayerExtraInfo::daily_signin_times() const {
  return daily_signin_times_;
}
inline void PlayerExtraInfo::set_daily_signin_times(::google::protobuf::uint32 value) {
  set_has_daily_signin_times();
  daily_signin_times_ = value;
}

// optional uint32 max_card_id = 8;
inline bool PlayerExtraInfo::has_max_card_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerExtraInfo::set_has_max_card_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerExtraInfo::clear_has_max_card_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerExtraInfo::clear_max_card_id() {
  max_card_id_ = 0u;
  clear_has_max_card_id();
}
inline ::google::protobuf::uint32 PlayerExtraInfo::max_card_id() const {
  return max_card_id_;
}
inline void PlayerExtraInfo::set_max_card_id(::google::protobuf::uint32 value) {
  set_has_max_card_id();
  max_card_id_ = value;
}

// optional uint64 ban_date = 13;
inline bool PlayerExtraInfo::has_ban_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerExtraInfo::set_has_ban_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerExtraInfo::clear_has_ban_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerExtraInfo::clear_ban_date() {
  ban_date_ = GOOGLE_ULONGLONG(0);
  clear_has_ban_date();
}
inline ::google::protobuf::uint64 PlayerExtraInfo::ban_date() const {
  return ban_date_;
}
inline void PlayerExtraInfo::set_ban_date(::google::protobuf::uint64 value) {
  set_has_ban_date();
  ban_date_ = value;
}

// optional uint64 auto_unban_date = 14;
inline bool PlayerExtraInfo::has_auto_unban_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerExtraInfo::set_has_auto_unban_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerExtraInfo::clear_has_auto_unban_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerExtraInfo::clear_auto_unban_date() {
  auto_unban_date_ = GOOGLE_ULONGLONG(0);
  clear_has_auto_unban_date();
}
inline ::google::protobuf::uint64 PlayerExtraInfo::auto_unban_date() const {
  return auto_unban_date_;
}
inline void PlayerExtraInfo::set_auto_unban_date(::google::protobuf::uint64 value) {
  set_has_auto_unban_date();
  auto_unban_date_ = value;
}

// optional uint64 ban_reason = 15;
inline bool PlayerExtraInfo::has_ban_reason() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerExtraInfo::set_has_ban_reason() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerExtraInfo::clear_has_ban_reason() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerExtraInfo::clear_ban_reason() {
  ban_reason_ = GOOGLE_ULONGLONG(0);
  clear_has_ban_reason();
}
inline ::google::protobuf::uint64 PlayerExtraInfo::ban_reason() const {
  return ban_reason_;
}
inline void PlayerExtraInfo::set_ban_reason(::google::protobuf::uint64 value) {
  set_has_ban_reason();
  ban_reason_ = value;
}

// optional uint64 register_time = 16;
inline bool PlayerExtraInfo::has_register_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerExtraInfo::set_has_register_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerExtraInfo::clear_has_register_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerExtraInfo::clear_register_time() {
  register_time_ = GOOGLE_ULONGLONG(0);
  clear_has_register_time();
}
inline ::google::protobuf::uint64 PlayerExtraInfo::register_time() const {
  return register_time_;
}
inline void PlayerExtraInfo::set_register_time(::google::protobuf::uint64 value) {
  set_has_register_time();
  register_time_ = value;
}

// -------------------------------------------------------------------

// PlayerCard

// required int32 id = 1;
inline bool PlayerCard::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerCard::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerCard::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerCard::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayerCard::id() const {
  return id_;
}
inline void PlayerCard::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 uuid = 2;
inline bool PlayerCard::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerCard::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerCard::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerCard::clear_uuid() {
  uuid_ = 0;
  clear_has_uuid();
}
inline ::google::protobuf::int32 PlayerCard::uuid() const {
  return uuid_;
}
inline void PlayerCard::set_uuid(::google::protobuf::int32 value) {
  set_has_uuid();
  uuid_ = value;
}

// required int32 experience = 3;
inline bool PlayerCard::has_experience() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerCard::set_has_experience() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerCard::clear_has_experience() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerCard::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
inline ::google::protobuf::int32 PlayerCard::experience() const {
  return experience_;
}
inline void PlayerCard::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
}

// required int32 getTime = 4;
inline bool PlayerCard::has_gettime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerCard::set_has_gettime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerCard::clear_has_gettime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerCard::clear_gettime() {
  gettime_ = 0;
  clear_has_gettime();
}
inline ::google::protobuf::int32 PlayerCard::gettime() const {
  return gettime_;
}
inline void PlayerCard::set_gettime(::google::protobuf::int32 value) {
  set_has_gettime();
  gettime_ = value;
}

// -------------------------------------------------------------------

// PlayerDie

// required int32 die_id = 1;
inline bool PlayerDie::has_die_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDie::set_has_die_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDie::clear_has_die_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDie::clear_die_id() {
  die_id_ = 0;
  clear_has_die_id();
}
inline ::google::protobuf::int32 PlayerDie::die_id() const {
  return die_id_;
}
inline void PlayerDie::set_die_id(::google::protobuf::int32 value) {
  set_has_die_id();
  die_id_ = value;
}

// -------------------------------------------------------------------

// PlayerTicket

// required uint32 type = 1;
inline bool PlayerTicket::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerTicket::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerTicket::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerTicket::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PlayerTicket::type() const {
  return type_;
}
inline void PlayerTicket::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 amount = 2;
inline bool PlayerTicket::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerTicket::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerTicket::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerTicket::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 PlayerTicket::amount() const {
  return amount_;
}
inline void PlayerTicket::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// PlayerInGameProp

// required uint32 type = 1;
inline bool PlayerInGameProp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInGameProp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInGameProp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInGameProp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PlayerInGameProp::type() const {
  return type_;
}
inline void PlayerInGameProp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 subtype = 2;
inline bool PlayerInGameProp::has_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInGameProp::set_has_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInGameProp::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInGameProp::clear_subtype() {
  subtype_ = 0u;
  clear_has_subtype();
}
inline ::google::protobuf::uint32 PlayerInGameProp::subtype() const {
  return subtype_;
}
inline void PlayerInGameProp::set_subtype(::google::protobuf::uint32 value) {
  set_has_subtype();
  subtype_ = value;
}

// required uint32 amount = 3;
inline bool PlayerInGameProp::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInGameProp::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInGameProp::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInGameProp::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 PlayerInGameProp::amount() const {
  return amount_;
}
inline void PlayerInGameProp::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// Player

// required int32 role_id = 1;
inline bool Player::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 Player::role_id() const {
  return role_id_;
}
inline void Player::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .DBCACHE.PlayerBaseInfo base_info = 2;
inline bool Player::has_base_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_base_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_base_info() {
  if (base_info_ != NULL) base_info_->::DBCACHE::PlayerBaseInfo::Clear();
  clear_has_base_info();
}
inline const ::DBCACHE::PlayerBaseInfo& Player::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::DBCACHE::PlayerBaseInfo* Player::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::DBCACHE::PlayerBaseInfo;
  return base_info_;
}
inline ::DBCACHE::PlayerBaseInfo* Player::release_base_info() {
  clear_has_base_info();
  ::DBCACHE::PlayerBaseInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void Player::set_allocated_base_info(::DBCACHE::PlayerBaseInfo* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// optional .DBCACHE.PlayerExtraInfo extra_info = 3;
inline bool Player::has_extra_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_extra_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_extra_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_extra_info() {
  if (extra_info_ != NULL) extra_info_->::DBCACHE::PlayerExtraInfo::Clear();
  clear_has_extra_info();
}
inline const ::DBCACHE::PlayerExtraInfo& Player::extra_info() const {
  return extra_info_ != NULL ? *extra_info_ : *default_instance_->extra_info_;
}
inline ::DBCACHE::PlayerExtraInfo* Player::mutable_extra_info() {
  set_has_extra_info();
  if (extra_info_ == NULL) extra_info_ = new ::DBCACHE::PlayerExtraInfo;
  return extra_info_;
}
inline ::DBCACHE::PlayerExtraInfo* Player::release_extra_info() {
  clear_has_extra_info();
  ::DBCACHE::PlayerExtraInfo* temp = extra_info_;
  extra_info_ = NULL;
  return temp;
}
inline void Player::set_allocated_extra_info(::DBCACHE::PlayerExtraInfo* extra_info) {
  delete extra_info_;
  extra_info_ = extra_info;
  if (extra_info) {
    set_has_extra_info();
  } else {
    clear_has_extra_info();
  }
}

// repeated .DBCACHE.PlayerCard hero_card = 4;
inline int Player::hero_card_size() const {
  return hero_card_.size();
}
inline void Player::clear_hero_card() {
  hero_card_.Clear();
}
inline const ::DBCACHE::PlayerCard& Player::hero_card(int index) const {
  return hero_card_.Get(index);
}
inline ::DBCACHE::PlayerCard* Player::mutable_hero_card(int index) {
  return hero_card_.Mutable(index);
}
inline ::DBCACHE::PlayerCard* Player::add_hero_card() {
  return hero_card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >&
Player::hero_card() const {
  return hero_card_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >*
Player::mutable_hero_card() {
  return &hero_card_;
}

// repeated .DBCACHE.PlayerDie player_dies = 5;
inline int Player::player_dies_size() const {
  return player_dies_.size();
}
inline void Player::clear_player_dies() {
  player_dies_.Clear();
}
inline const ::DBCACHE::PlayerDie& Player::player_dies(int index) const {
  return player_dies_.Get(index);
}
inline ::DBCACHE::PlayerDie* Player::mutable_player_dies(int index) {
  return player_dies_.Mutable(index);
}
inline ::DBCACHE::PlayerDie* Player::add_player_dies() {
  return player_dies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >&
Player::player_dies() const {
  return player_dies_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >*
Player::mutable_player_dies() {
  return &player_dies_;
}

// repeated .DBCACHE.PlayerTicket player_tickets = 7;
inline int Player::player_tickets_size() const {
  return player_tickets_.size();
}
inline void Player::clear_player_tickets() {
  player_tickets_.Clear();
}
inline const ::DBCACHE::PlayerTicket& Player::player_tickets(int index) const {
  return player_tickets_.Get(index);
}
inline ::DBCACHE::PlayerTicket* Player::mutable_player_tickets(int index) {
  return player_tickets_.Mutable(index);
}
inline ::DBCACHE::PlayerTicket* Player::add_player_tickets() {
  return player_tickets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerTicket >&
Player::player_tickets() const {
  return player_tickets_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerTicket >*
Player::mutable_player_tickets() {
  return &player_tickets_;
}

// repeated .DBCACHE.PlayerInGameProp player_ingame_props = 8;
inline int Player::player_ingame_props_size() const {
  return player_ingame_props_.size();
}
inline void Player::clear_player_ingame_props() {
  player_ingame_props_.Clear();
}
inline const ::DBCACHE::PlayerInGameProp& Player::player_ingame_props(int index) const {
  return player_ingame_props_.Get(index);
}
inline ::DBCACHE::PlayerInGameProp* Player::mutable_player_ingame_props(int index) {
  return player_ingame_props_.Mutable(index);
}
inline ::DBCACHE::PlayerInGameProp* Player::add_player_ingame_props() {
  return player_ingame_props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >&
Player::player_ingame_props() const {
  return player_ingame_props_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >*
Player::mutable_player_ingame_props() {
  return &player_ingame_props_;
}

// repeated .DBCACHE.PlayerGameRecord game_record = 9;
inline int Player::game_record_size() const {
  return game_record_.size();
}
inline void Player::clear_game_record() {
  game_record_.Clear();
}
inline const ::DBCACHE::PlayerGameRecord& Player::game_record(int index) const {
  return game_record_.Get(index);
}
inline ::DBCACHE::PlayerGameRecord* Player::mutable_game_record(int index) {
  return game_record_.Mutable(index);
}
inline ::DBCACHE::PlayerGameRecord* Player::add_game_record() {
  return game_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >&
Player::game_record() const {
  return game_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >*
Player::mutable_game_record() {
  return &game_record_;
}

// optional int32 maxCardId = 6;
inline bool Player::has_maxcardid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Player::set_has_maxcardid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Player::clear_has_maxcardid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Player::clear_maxcardid() {
  maxcardid_ = 0;
  clear_has_maxcardid();
}
inline ::google::protobuf::int32 Player::maxcardid() const {
  return maxcardid_;
}
inline void Player::set_maxcardid(::google::protobuf::int32 value) {
  set_has_maxcardid();
  maxcardid_ = value;
}

// -------------------------------------------------------------------

// Sync_Player_Data

// required int32 flag = 1;
inline bool Sync_Player_Data::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sync_Player_Data::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sync_Player_Data::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sync_Player_Data::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Sync_Player_Data::flag() const {
  return flag_;
}
inline void Sync_Player_Data::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required uint64 create_time = 2;
inline bool Sync_Player_Data::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sync_Player_Data::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sync_Player_Data::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sync_Player_Data::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 Sync_Player_Data::create_time() const {
  return create_time_;
}
inline void Sync_Player_Data::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional .DBCACHE.Player player_data = 3;
inline bool Sync_Player_Data::has_player_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sync_Player_Data::set_has_player_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sync_Player_Data::clear_has_player_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sync_Player_Data::clear_player_data() {
  if (player_data_ != NULL) player_data_->::DBCACHE::Player::Clear();
  clear_has_player_data();
}
inline const ::DBCACHE::Player& Sync_Player_Data::player_data() const {
  return player_data_ != NULL ? *player_data_ : *default_instance_->player_data_;
}
inline ::DBCACHE::Player* Sync_Player_Data::mutable_player_data() {
  set_has_player_data();
  if (player_data_ == NULL) player_data_ = new ::DBCACHE::Player;
  return player_data_;
}
inline ::DBCACHE::Player* Sync_Player_Data::release_player_data() {
  clear_has_player_data();
  ::DBCACHE::Player* temp = player_data_;
  player_data_ = NULL;
  return temp;
}
inline void Sync_Player_Data::set_allocated_player_data(::DBCACHE::Player* player_data) {
  delete player_data_;
  player_data_ = player_data;
  if (player_data) {
    set_has_player_data();
  } else {
    clear_has_player_data();
  }
}

// -------------------------------------------------------------------

// Prop

// required uint32 prop_id = 1;
inline bool Prop::has_prop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Prop::set_has_prop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Prop::clear_has_prop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Prop::clear_prop_id() {
  prop_id_ = 0u;
  clear_has_prop_id();
}
inline ::google::protobuf::uint32 Prop::prop_id() const {
  return prop_id_;
}
inline void Prop::set_prop_id(::google::protobuf::uint32 value) {
  set_has_prop_id();
  prop_id_ = value;
}

// required uint32 prop_amount = 2;
inline bool Prop::has_prop_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Prop::set_has_prop_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Prop::clear_has_prop_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Prop::clear_prop_amount() {
  prop_amount_ = 0u;
  clear_has_prop_amount();
}
inline ::google::protobuf::uint32 Prop::prop_amount() const {
  return prop_amount_;
}
inline void Prop::set_prop_amount(::google::protobuf::uint32 value) {
  set_has_prop_amount();
  prop_amount_ = value;
}

// optional uint64 prop_param = 3;
inline bool Prop::has_prop_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Prop::set_has_prop_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Prop::clear_has_prop_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Prop::clear_prop_param() {
  prop_param_ = GOOGLE_ULONGLONG(0);
  clear_has_prop_param();
}
inline ::google::protobuf::uint64 Prop::prop_param() const {
  return prop_param_;
}
inline void Prop::set_prop_param(::google::protobuf::uint64 value) {
  set_has_prop_param();
  prop_param_ = value;
}

// optional uint64 prop_param2 = 4;
inline bool Prop::has_prop_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Prop::set_has_prop_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Prop::clear_has_prop_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Prop::clear_prop_param2() {
  prop_param2_ = GOOGLE_ULONGLONG(0);
  clear_has_prop_param2();
}
inline ::google::protobuf::uint64 Prop::prop_param2() const {
  return prop_param2_;
}
inline void Prop::set_prop_param2(::google::protobuf::uint64 value) {
  set_has_prop_param2();
  prop_param2_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBCACHE

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_5fcache_2eproto__INCLUDED
