// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameinfo.proto

#ifndef PROTOBUF_gameinfo_2eproto__INCLUDED
#define PROTOBUF_gameinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "db_cache.pb.h"
#include "cardsystem.pb.h"
#include "diesystem.pb.h"
#include "game_desk.pb.h"
// @@protoc_insertion_point(includes)

namespace GAMEINFO {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gameinfo_2eproto();
void protobuf_AssignDesc_gameinfo_2eproto();
void protobuf_ShutdownFile_gameinfo_2eproto();

class Z2G_Load_Player_Info_Rsp;
class PlayerGameResult;
class G2Z_Calculate_Game;
class G2Z_PlayerInfoChange;
class G2Z_PlayerGetChanceCard;

// ===================================================================

class Z2G_Load_Player_Info_Rsp : public ::google::protobuf::Message {
 public:
  Z2G_Load_Player_Info_Rsp();
  virtual ~Z2G_Load_Player_Info_Rsp();

  Z2G_Load_Player_Info_Rsp(const Z2G_Load_Player_Info_Rsp& from);

  inline Z2G_Load_Player_Info_Rsp& operator=(const Z2G_Load_Player_Info_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z2G_Load_Player_Info_Rsp& default_instance();

  void Swap(Z2G_Load_Player_Info_Rsp* other);

  // implements Message ----------------------------------------------

  Z2G_Load_Player_Info_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Z2G_Load_Player_Info_Rsp& from);
  void MergeFrom(const Z2G_Load_Player_Info_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .DBCACHE.PlayerBaseInfo baseinfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 2;
  inline const ::DBCACHE::PlayerBaseInfo& baseinfo() const;
  inline ::DBCACHE::PlayerBaseInfo* mutable_baseinfo();
  inline ::DBCACHE::PlayerBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::DBCACHE::PlayerBaseInfo* baseinfo);

  // optional .CARDSYSTEM.PlayerCardInfo player_cards = 3;
  inline bool has_player_cards() const;
  inline void clear_player_cards();
  static const int kPlayerCardsFieldNumber = 3;
  inline const ::CARDSYSTEM::PlayerCardInfo& player_cards() const;
  inline ::CARDSYSTEM::PlayerCardInfo* mutable_player_cards();
  inline ::CARDSYSTEM::PlayerCardInfo* release_player_cards();
  inline void set_allocated_player_cards(::CARDSYSTEM::PlayerCardInfo* player_cards);

  // optional .DIESYSTEM.DieProperty player_dies = 4;
  inline bool has_player_dies() const;
  inline void clear_player_dies();
  static const int kPlayerDiesFieldNumber = 4;
  inline const ::DIESYSTEM::DieProperty& player_dies() const;
  inline ::DIESYSTEM::DieProperty* mutable_player_dies();
  inline ::DIESYSTEM::DieProperty* release_player_dies();
  inline void set_allocated_player_dies(::DIESYSTEM::DieProperty* player_dies);

  // repeated .DBCACHE.PlayerInGameProp ingame_props = 5;
  inline int ingame_props_size() const;
  inline void clear_ingame_props();
  static const int kIngamePropsFieldNumber = 5;
  inline const ::DBCACHE::PlayerInGameProp& ingame_props(int index) const;
  inline ::DBCACHE::PlayerInGameProp* mutable_ingame_props(int index);
  inline ::DBCACHE::PlayerInGameProp* add_ingame_props();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >&
      ingame_props() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >*
      mutable_ingame_props();

  // optional int32 tickets = 6;
  inline bool has_tickets() const;
  inline void clear_tickets();
  static const int kTicketsFieldNumber = 6;
  inline ::google::protobuf::int32 tickets() const;
  inline void set_tickets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GAMEINFO.Z2G_Load_Player_Info_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_player_cards();
  inline void clear_has_player_cards();
  inline void set_has_player_dies();
  inline void clear_has_player_dies();
  inline void set_has_tickets();
  inline void clear_has_tickets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBCACHE::PlayerBaseInfo* baseinfo_;
  ::CARDSYSTEM::PlayerCardInfo* player_cards_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 tickets_;
  ::DIESYSTEM::DieProperty* player_dies_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp > ingame_props_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gameinfo_2eproto();
  friend void protobuf_AssignDesc_gameinfo_2eproto();
  friend void protobuf_ShutdownFile_gameinfo_2eproto();

  void InitAsDefaultInstance();
  static Z2G_Load_Player_Info_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class PlayerGameResult : public ::google::protobuf::Message {
 public:
  PlayerGameResult();
  virtual ~PlayerGameResult();

  PlayerGameResult(const PlayerGameResult& from);

  inline PlayerGameResult& operator=(const PlayerGameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGameResult& default_instance();

  void Swap(PlayerGameResult* other);

  // implements Message ----------------------------------------------

  PlayerGameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerGameResult& from);
  void MergeFrom(const PlayerGameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 gold_res = 3;
  inline bool has_gold_res() const;
  inline void clear_gold_res();
  static const int kGoldResFieldNumber = 3;
  inline ::google::protobuf::int32 gold_res() const;
  inline void set_gold_res(::google::protobuf::int32 value);

  // required int32 exp_res = 4;
  inline bool has_exp_res() const;
  inline void clear_exp_res();
  static const int kExpResFieldNumber = 4;
  inline ::google::protobuf::int32 exp_res() const;
  inline void set_exp_res(::google::protobuf::int32 value);

  // required int32 score_res = 5;
  inline bool has_score_res() const;
  inline void clear_score_res();
  static const int kScoreResFieldNumber = 5;
  inline ::google::protobuf::int32 score_res() const;
  inline void set_score_res(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GAMEINFO.PlayerGameResult)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold_res();
  inline void clear_has_gold_res();
  inline void set_has_exp_res();
  inline void clear_has_exp_res();
  inline void set_has_score_res();
  inline void clear_has_score_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gold_res_;
  ::google::protobuf::int32 exp_res_;
  ::google::protobuf::int32 score_res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameinfo_2eproto();
  friend void protobuf_AssignDesc_gameinfo_2eproto();
  friend void protobuf_ShutdownFile_gameinfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerGameResult* default_instance_;
};
// -------------------------------------------------------------------

class G2Z_Calculate_Game : public ::google::protobuf::Message {
 public:
  G2Z_Calculate_Game();
  virtual ~G2Z_Calculate_Game();

  G2Z_Calculate_Game(const G2Z_Calculate_Game& from);

  inline G2Z_Calculate_Game& operator=(const G2Z_Calculate_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const G2Z_Calculate_Game& default_instance();

  void Swap(G2Z_Calculate_Game* other);

  // implements Message ----------------------------------------------

  G2Z_Calculate_Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const G2Z_Calculate_Game& from);
  void MergeFrom(const G2Z_Calculate_Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GAMEINFO.PlayerGameResult game_res = 1;
  inline int game_res_size() const;
  inline void clear_game_res();
  static const int kGameResFieldNumber = 1;
  inline const ::GAMEINFO::PlayerGameResult& game_res(int index) const;
  inline ::GAMEINFO::PlayerGameResult* mutable_game_res(int index);
  inline ::GAMEINFO::PlayerGameResult* add_game_res();
  inline const ::google::protobuf::RepeatedPtrField< ::GAMEINFO::PlayerGameResult >&
      game_res() const;
  inline ::google::protobuf::RepeatedPtrField< ::GAMEINFO::PlayerGameResult >*
      mutable_game_res();

  // @@protoc_insertion_point(class_scope:GAMEINFO.G2Z_Calculate_Game)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GAMEINFO::PlayerGameResult > game_res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameinfo_2eproto();
  friend void protobuf_AssignDesc_gameinfo_2eproto();
  friend void protobuf_ShutdownFile_gameinfo_2eproto();

  void InitAsDefaultInstance();
  static G2Z_Calculate_Game* default_instance_;
};
// -------------------------------------------------------------------

class G2Z_PlayerInfoChange : public ::google::protobuf::Message {
 public:
  G2Z_PlayerInfoChange();
  virtual ~G2Z_PlayerInfoChange();

  G2Z_PlayerInfoChange(const G2Z_PlayerInfoChange& from);

  inline G2Z_PlayerInfoChange& operator=(const G2Z_PlayerInfoChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const G2Z_PlayerInfoChange& default_instance();

  void Swap(G2Z_PlayerInfoChange* other);

  // implements Message ----------------------------------------------

  G2Z_PlayerInfoChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const G2Z_PlayerInfoChange& from);
  void MergeFrom(const G2Z_PlayerInfoChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 goldcoin_change = 2;
  inline bool has_goldcoin_change() const;
  inline void clear_goldcoin_change();
  static const int kGoldcoinChangeFieldNumber = 2;
  inline ::google::protobuf::int32 goldcoin_change() const;
  inline void set_goldcoin_change(::google::protobuf::int32 value);

  // optional int32 energy_change = 3;
  inline bool has_energy_change() const;
  inline void clear_energy_change();
  static const int kEnergyChangeFieldNumber = 3;
  inline ::google::protobuf::int32 energy_change() const;
  inline void set_energy_change(::google::protobuf::int32 value);

  // optional int32 ticket_count_change = 4;
  inline bool has_ticket_count_change() const;
  inline void clear_ticket_count_change();
  static const int kTicketCountChangeFieldNumber = 4;
  inline ::google::protobuf::int32 ticket_count_change() const;
  inline void set_ticket_count_change(::google::protobuf::int32 value);

  // optional int32 socre_change = 5;
  inline bool has_socre_change() const;
  inline void clear_socre_change();
  static const int kSocreChangeFieldNumber = 5;
  inline ::google::protobuf::int32 socre_change() const;
  inline void set_socre_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GAMEINFO.G2Z_PlayerInfoChange)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_goldcoin_change();
  inline void clear_has_goldcoin_change();
  inline void set_has_energy_change();
  inline void clear_has_energy_change();
  inline void set_has_ticket_count_change();
  inline void clear_has_ticket_count_change();
  inline void set_has_socre_change();
  inline void clear_has_socre_change();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 goldcoin_change_;
  ::google::protobuf::int32 energy_change_;
  ::google::protobuf::int32 ticket_count_change_;
  ::google::protobuf::int32 socre_change_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameinfo_2eproto();
  friend void protobuf_AssignDesc_gameinfo_2eproto();
  friend void protobuf_ShutdownFile_gameinfo_2eproto();

  void InitAsDefaultInstance();
  static G2Z_PlayerInfoChange* default_instance_;
};
// -------------------------------------------------------------------

class G2Z_PlayerGetChanceCard : public ::google::protobuf::Message {
 public:
  G2Z_PlayerGetChanceCard();
  virtual ~G2Z_PlayerGetChanceCard();

  G2Z_PlayerGetChanceCard(const G2Z_PlayerGetChanceCard& from);

  inline G2Z_PlayerGetChanceCard& operator=(const G2Z_PlayerGetChanceCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const G2Z_PlayerGetChanceCard& default_instance();

  void Swap(G2Z_PlayerGetChanceCard* other);

  // implements Message ----------------------------------------------

  G2Z_PlayerGetChanceCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const G2Z_PlayerGetChanceCard& from);
  void MergeFrom(const G2Z_PlayerGetChanceCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 card_type = 1;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GAMEINFO.G2Z_PlayerGetChanceCard)
 private:
  inline void set_has_card_type();
  inline void clear_has_card_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameinfo_2eproto();
  friend void protobuf_AssignDesc_gameinfo_2eproto();
  friend void protobuf_ShutdownFile_gameinfo_2eproto();

  void InitAsDefaultInstance();
  static G2Z_PlayerGetChanceCard* default_instance_;
};
// ===================================================================


// ===================================================================

// Z2G_Load_Player_Info_Rsp

// required int32 ret = 1;
inline bool Z2G_Load_Player_Info_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Z2G_Load_Player_Info_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Z2G_Load_Player_Info_Rsp::ret() const {
  return ret_;
}
inline void Z2G_Load_Player_Info_Rsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .DBCACHE.PlayerBaseInfo baseinfo = 2;
inline bool Z2G_Load_Player_Info_Rsp::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Z2G_Load_Player_Info_Rsp::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::DBCACHE::PlayerBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::DBCACHE::PlayerBaseInfo& Z2G_Load_Player_Info_Rsp::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::DBCACHE::PlayerBaseInfo* Z2G_Load_Player_Info_Rsp::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::DBCACHE::PlayerBaseInfo;
  return baseinfo_;
}
inline ::DBCACHE::PlayerBaseInfo* Z2G_Load_Player_Info_Rsp::release_baseinfo() {
  clear_has_baseinfo();
  ::DBCACHE::PlayerBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void Z2G_Load_Player_Info_Rsp::set_allocated_baseinfo(::DBCACHE::PlayerBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// optional .CARDSYSTEM.PlayerCardInfo player_cards = 3;
inline bool Z2G_Load_Player_Info_Rsp::has_player_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Z2G_Load_Player_Info_Rsp::set_has_player_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_has_player_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_player_cards() {
  if (player_cards_ != NULL) player_cards_->::CARDSYSTEM::PlayerCardInfo::Clear();
  clear_has_player_cards();
}
inline const ::CARDSYSTEM::PlayerCardInfo& Z2G_Load_Player_Info_Rsp::player_cards() const {
  return player_cards_ != NULL ? *player_cards_ : *default_instance_->player_cards_;
}
inline ::CARDSYSTEM::PlayerCardInfo* Z2G_Load_Player_Info_Rsp::mutable_player_cards() {
  set_has_player_cards();
  if (player_cards_ == NULL) player_cards_ = new ::CARDSYSTEM::PlayerCardInfo;
  return player_cards_;
}
inline ::CARDSYSTEM::PlayerCardInfo* Z2G_Load_Player_Info_Rsp::release_player_cards() {
  clear_has_player_cards();
  ::CARDSYSTEM::PlayerCardInfo* temp = player_cards_;
  player_cards_ = NULL;
  return temp;
}
inline void Z2G_Load_Player_Info_Rsp::set_allocated_player_cards(::CARDSYSTEM::PlayerCardInfo* player_cards) {
  delete player_cards_;
  player_cards_ = player_cards;
  if (player_cards) {
    set_has_player_cards();
  } else {
    clear_has_player_cards();
  }
}

// optional .DIESYSTEM.DieProperty player_dies = 4;
inline bool Z2G_Load_Player_Info_Rsp::has_player_dies() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Z2G_Load_Player_Info_Rsp::set_has_player_dies() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_has_player_dies() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_player_dies() {
  if (player_dies_ != NULL) player_dies_->::DIESYSTEM::DieProperty::Clear();
  clear_has_player_dies();
}
inline const ::DIESYSTEM::DieProperty& Z2G_Load_Player_Info_Rsp::player_dies() const {
  return player_dies_ != NULL ? *player_dies_ : *default_instance_->player_dies_;
}
inline ::DIESYSTEM::DieProperty* Z2G_Load_Player_Info_Rsp::mutable_player_dies() {
  set_has_player_dies();
  if (player_dies_ == NULL) player_dies_ = new ::DIESYSTEM::DieProperty;
  return player_dies_;
}
inline ::DIESYSTEM::DieProperty* Z2G_Load_Player_Info_Rsp::release_player_dies() {
  clear_has_player_dies();
  ::DIESYSTEM::DieProperty* temp = player_dies_;
  player_dies_ = NULL;
  return temp;
}
inline void Z2G_Load_Player_Info_Rsp::set_allocated_player_dies(::DIESYSTEM::DieProperty* player_dies) {
  delete player_dies_;
  player_dies_ = player_dies;
  if (player_dies) {
    set_has_player_dies();
  } else {
    clear_has_player_dies();
  }
}

// repeated .DBCACHE.PlayerInGameProp ingame_props = 5;
inline int Z2G_Load_Player_Info_Rsp::ingame_props_size() const {
  return ingame_props_.size();
}
inline void Z2G_Load_Player_Info_Rsp::clear_ingame_props() {
  ingame_props_.Clear();
}
inline const ::DBCACHE::PlayerInGameProp& Z2G_Load_Player_Info_Rsp::ingame_props(int index) const {
  return ingame_props_.Get(index);
}
inline ::DBCACHE::PlayerInGameProp* Z2G_Load_Player_Info_Rsp::mutable_ingame_props(int index) {
  return ingame_props_.Mutable(index);
}
inline ::DBCACHE::PlayerInGameProp* Z2G_Load_Player_Info_Rsp::add_ingame_props() {
  return ingame_props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >&
Z2G_Load_Player_Info_Rsp::ingame_props() const {
  return ingame_props_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerInGameProp >*
Z2G_Load_Player_Info_Rsp::mutable_ingame_props() {
  return &ingame_props_;
}

// optional int32 tickets = 6;
inline bool Z2G_Load_Player_Info_Rsp::has_tickets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Z2G_Load_Player_Info_Rsp::set_has_tickets() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_has_tickets() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Z2G_Load_Player_Info_Rsp::clear_tickets() {
  tickets_ = 0;
  clear_has_tickets();
}
inline ::google::protobuf::int32 Z2G_Load_Player_Info_Rsp::tickets() const {
  return tickets_;
}
inline void Z2G_Load_Player_Info_Rsp::set_tickets(::google::protobuf::int32 value) {
  set_has_tickets();
  tickets_ = value;
}

// -------------------------------------------------------------------

// PlayerGameResult

// required int32 player_id = 1;
inline bool PlayerGameResult::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGameResult::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGameResult::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGameResult::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 PlayerGameResult::player_id() const {
  return player_id_;
}
inline void PlayerGameResult::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 result = 2;
inline bool PlayerGameResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGameResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGameResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGameResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PlayerGameResult::result() const {
  return result_;
}
inline void PlayerGameResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 gold_res = 3;
inline bool PlayerGameResult::has_gold_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGameResult::set_has_gold_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGameResult::clear_has_gold_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGameResult::clear_gold_res() {
  gold_res_ = 0;
  clear_has_gold_res();
}
inline ::google::protobuf::int32 PlayerGameResult::gold_res() const {
  return gold_res_;
}
inline void PlayerGameResult::set_gold_res(::google::protobuf::int32 value) {
  set_has_gold_res();
  gold_res_ = value;
}

// required int32 exp_res = 4;
inline bool PlayerGameResult::has_exp_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerGameResult::set_has_exp_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerGameResult::clear_has_exp_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerGameResult::clear_exp_res() {
  exp_res_ = 0;
  clear_has_exp_res();
}
inline ::google::protobuf::int32 PlayerGameResult::exp_res() const {
  return exp_res_;
}
inline void PlayerGameResult::set_exp_res(::google::protobuf::int32 value) {
  set_has_exp_res();
  exp_res_ = value;
}

// required int32 score_res = 5;
inline bool PlayerGameResult::has_score_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerGameResult::set_has_score_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerGameResult::clear_has_score_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerGameResult::clear_score_res() {
  score_res_ = 0;
  clear_has_score_res();
}
inline ::google::protobuf::int32 PlayerGameResult::score_res() const {
  return score_res_;
}
inline void PlayerGameResult::set_score_res(::google::protobuf::int32 value) {
  set_has_score_res();
  score_res_ = value;
}

// -------------------------------------------------------------------

// G2Z_Calculate_Game

// repeated .GAMEINFO.PlayerGameResult game_res = 1;
inline int G2Z_Calculate_Game::game_res_size() const {
  return game_res_.size();
}
inline void G2Z_Calculate_Game::clear_game_res() {
  game_res_.Clear();
}
inline const ::GAMEINFO::PlayerGameResult& G2Z_Calculate_Game::game_res(int index) const {
  return game_res_.Get(index);
}
inline ::GAMEINFO::PlayerGameResult* G2Z_Calculate_Game::mutable_game_res(int index) {
  return game_res_.Mutable(index);
}
inline ::GAMEINFO::PlayerGameResult* G2Z_Calculate_Game::add_game_res() {
  return game_res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GAMEINFO::PlayerGameResult >&
G2Z_Calculate_Game::game_res() const {
  return game_res_;
}
inline ::google::protobuf::RepeatedPtrField< ::GAMEINFO::PlayerGameResult >*
G2Z_Calculate_Game::mutable_game_res() {
  return &game_res_;
}

// -------------------------------------------------------------------

// G2Z_PlayerInfoChange

// required int32 flag = 1;
inline bool G2Z_PlayerInfoChange::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void G2Z_PlayerInfoChange::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void G2Z_PlayerInfoChange::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void G2Z_PlayerInfoChange::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 G2Z_PlayerInfoChange::flag() const {
  return flag_;
}
inline void G2Z_PlayerInfoChange::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 goldcoin_change = 2;
inline bool G2Z_PlayerInfoChange::has_goldcoin_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void G2Z_PlayerInfoChange::set_has_goldcoin_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void G2Z_PlayerInfoChange::clear_has_goldcoin_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void G2Z_PlayerInfoChange::clear_goldcoin_change() {
  goldcoin_change_ = 0;
  clear_has_goldcoin_change();
}
inline ::google::protobuf::int32 G2Z_PlayerInfoChange::goldcoin_change() const {
  return goldcoin_change_;
}
inline void G2Z_PlayerInfoChange::set_goldcoin_change(::google::protobuf::int32 value) {
  set_has_goldcoin_change();
  goldcoin_change_ = value;
}

// optional int32 energy_change = 3;
inline bool G2Z_PlayerInfoChange::has_energy_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void G2Z_PlayerInfoChange::set_has_energy_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void G2Z_PlayerInfoChange::clear_has_energy_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void G2Z_PlayerInfoChange::clear_energy_change() {
  energy_change_ = 0;
  clear_has_energy_change();
}
inline ::google::protobuf::int32 G2Z_PlayerInfoChange::energy_change() const {
  return energy_change_;
}
inline void G2Z_PlayerInfoChange::set_energy_change(::google::protobuf::int32 value) {
  set_has_energy_change();
  energy_change_ = value;
}

// optional int32 ticket_count_change = 4;
inline bool G2Z_PlayerInfoChange::has_ticket_count_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void G2Z_PlayerInfoChange::set_has_ticket_count_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void G2Z_PlayerInfoChange::clear_has_ticket_count_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void G2Z_PlayerInfoChange::clear_ticket_count_change() {
  ticket_count_change_ = 0;
  clear_has_ticket_count_change();
}
inline ::google::protobuf::int32 G2Z_PlayerInfoChange::ticket_count_change() const {
  return ticket_count_change_;
}
inline void G2Z_PlayerInfoChange::set_ticket_count_change(::google::protobuf::int32 value) {
  set_has_ticket_count_change();
  ticket_count_change_ = value;
}

// optional int32 socre_change = 5;
inline bool G2Z_PlayerInfoChange::has_socre_change() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void G2Z_PlayerInfoChange::set_has_socre_change() {
  _has_bits_[0] |= 0x00000010u;
}
inline void G2Z_PlayerInfoChange::clear_has_socre_change() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void G2Z_PlayerInfoChange::clear_socre_change() {
  socre_change_ = 0;
  clear_has_socre_change();
}
inline ::google::protobuf::int32 G2Z_PlayerInfoChange::socre_change() const {
  return socre_change_;
}
inline void G2Z_PlayerInfoChange::set_socre_change(::google::protobuf::int32 value) {
  set_has_socre_change();
  socre_change_ = value;
}

// -------------------------------------------------------------------

// G2Z_PlayerGetChanceCard

// required int32 card_type = 1;
inline bool G2Z_PlayerGetChanceCard::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void G2Z_PlayerGetChanceCard::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void G2Z_PlayerGetChanceCard::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void G2Z_PlayerGetChanceCard::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 G2Z_PlayerGetChanceCard::card_type() const {
  return card_type_;
}
inline void G2Z_PlayerGetChanceCard::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GAMEINFO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameinfo_2eproto__INCLUDED
