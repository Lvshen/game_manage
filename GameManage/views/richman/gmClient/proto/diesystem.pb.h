// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diesystem.proto

#ifndef PROTOBUF_diesystem_2eproto__INCLUDED
#define PROTOBUF_diesystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DIESYSTEM {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_diesystem_2eproto();
void protobuf_AssignDesc_diesystem_2eproto();
void protobuf_ShutdownFile_diesystem_2eproto();

class DieProperty;
class S2C_DieList_Rsp;
class C2S_BuyDie_Req;
class S2C_BuyDie_Rsp;
class C2S_DieLevelUp_Req;
class S2C_DieLevelUp_Rsp;
class C2S_DieEquip_Req;
class S2C_DieEquip_Rsp;

enum S2C_BuyDie_Rsp_ResultCode {
  S2C_BuyDie_Rsp_ResultCode_FAILED = -1,
  S2C_BuyDie_Rsp_ResultCode_SUCCESS = 0,
  S2C_BuyDie_Rsp_ResultCode_NOT_ENOUGH_MONEY = 1,
  S2C_BuyDie_Rsp_ResultCode_NOT_ENOUGH_MARBLE = 2,
  S2C_BuyDie_Rsp_ResultCode_UNKNOW_ERROR = 3
};
bool S2C_BuyDie_Rsp_ResultCode_IsValid(int value);
const S2C_BuyDie_Rsp_ResultCode S2C_BuyDie_Rsp_ResultCode_ResultCode_MIN = S2C_BuyDie_Rsp_ResultCode_FAILED;
const S2C_BuyDie_Rsp_ResultCode S2C_BuyDie_Rsp_ResultCode_ResultCode_MAX = S2C_BuyDie_Rsp_ResultCode_UNKNOW_ERROR;
const int S2C_BuyDie_Rsp_ResultCode_ResultCode_ARRAYSIZE = S2C_BuyDie_Rsp_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_BuyDie_Rsp_ResultCode_descriptor();
inline const ::std::string& S2C_BuyDie_Rsp_ResultCode_Name(S2C_BuyDie_Rsp_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_BuyDie_Rsp_ResultCode_descriptor(), value);
}
inline bool S2C_BuyDie_Rsp_ResultCode_Parse(
    const ::std::string& name, S2C_BuyDie_Rsp_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_BuyDie_Rsp_ResultCode>(
    S2C_BuyDie_Rsp_ResultCode_descriptor(), name, value);
}
enum S2C_DieLevelUp_Rsp_ResultCode {
  S2C_DieLevelUp_Rsp_ResultCode_FAILED = -1,
  S2C_DieLevelUp_Rsp_ResultCode_SUCCESS = 0,
  S2C_DieLevelUp_Rsp_ResultCode_NOT_ENOUGH_MONEY = 1,
  S2C_DieLevelUp_Rsp_ResultCode_NOT_ENOUGH_MARBLE = 2,
  S2C_DieLevelUp_Rsp_ResultCode_UNKNOW_ERROR = 3
};
bool S2C_DieLevelUp_Rsp_ResultCode_IsValid(int value);
const S2C_DieLevelUp_Rsp_ResultCode S2C_DieLevelUp_Rsp_ResultCode_ResultCode_MIN = S2C_DieLevelUp_Rsp_ResultCode_FAILED;
const S2C_DieLevelUp_Rsp_ResultCode S2C_DieLevelUp_Rsp_ResultCode_ResultCode_MAX = S2C_DieLevelUp_Rsp_ResultCode_UNKNOW_ERROR;
const int S2C_DieLevelUp_Rsp_ResultCode_ResultCode_ARRAYSIZE = S2C_DieLevelUp_Rsp_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_DieLevelUp_Rsp_ResultCode_descriptor();
inline const ::std::string& S2C_DieLevelUp_Rsp_ResultCode_Name(S2C_DieLevelUp_Rsp_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_DieLevelUp_Rsp_ResultCode_descriptor(), value);
}
inline bool S2C_DieLevelUp_Rsp_ResultCode_Parse(
    const ::std::string& name, S2C_DieLevelUp_Rsp_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_DieLevelUp_Rsp_ResultCode>(
    S2C_DieLevelUp_Rsp_ResultCode_descriptor(), name, value);
}
enum S2C_DieEquip_Rsp_ResultCode {
  S2C_DieEquip_Rsp_ResultCode_SUCCESS = 0,
  S2C_DieEquip_Rsp_ResultCode_FAILED = 1
};
bool S2C_DieEquip_Rsp_ResultCode_IsValid(int value);
const S2C_DieEquip_Rsp_ResultCode S2C_DieEquip_Rsp_ResultCode_ResultCode_MIN = S2C_DieEquip_Rsp_ResultCode_SUCCESS;
const S2C_DieEquip_Rsp_ResultCode S2C_DieEquip_Rsp_ResultCode_ResultCode_MAX = S2C_DieEquip_Rsp_ResultCode_FAILED;
const int S2C_DieEquip_Rsp_ResultCode_ResultCode_ARRAYSIZE = S2C_DieEquip_Rsp_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_DieEquip_Rsp_ResultCode_descriptor();
inline const ::std::string& S2C_DieEquip_Rsp_ResultCode_Name(S2C_DieEquip_Rsp_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_DieEquip_Rsp_ResultCode_descriptor(), value);
}
inline bool S2C_DieEquip_Rsp_ResultCode_Parse(
    const ::std::string& name, S2C_DieEquip_Rsp_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_DieEquip_Rsp_ResultCode>(
    S2C_DieEquip_Rsp_ResultCode_descriptor(), name, value);
}
// ===================================================================

class DieProperty : public ::google::protobuf::Message {
 public:
  DieProperty();
  virtual ~DieProperty();

  DieProperty(const DieProperty& from);

  inline DieProperty& operator=(const DieProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DieProperty& default_instance();

  void Swap(DieProperty* other);

  // implements Message ----------------------------------------------

  DieProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DieProperty& from);
  void MergeFrom(const DieProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // required bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 esc_island = 6;
  inline bool has_esc_island() const;
  inline void clear_esc_island();
  static const int kEscIslandFieldNumber = 6;
  inline ::google::protobuf::int32 esc_island() const;
  inline void set_esc_island(::google::protobuf::int32 value);

  // required int32 exp_reward = 7;
  inline bool has_exp_reward() const;
  inline void clear_exp_reward();
  static const int kExpRewardFieldNumber = 7;
  inline ::google::protobuf::int32 exp_reward() const;
  inline void set_exp_reward(::google::protobuf::int32 value);

  // required int32 cost_discount = 8;
  inline bool has_cost_discount() const;
  inline void clear_cost_discount();
  static const int kCostDiscountFieldNumber = 8;
  inline ::google::protobuf::int32 cost_discount() const;
  inline void set_cost_discount(::google::protobuf::int32 value);

  // required int32 gold_reward = 9;
  inline bool has_gold_reward() const;
  inline void clear_gold_reward();
  static const int kGoldRewardFieldNumber = 9;
  inline ::google::protobuf::int32 gold_reward() const;
  inline void set_gold_reward(::google::protobuf::int32 value);

  // required int32 get_goldcard = 10;
  inline bool has_get_goldcard() const;
  inline void clear_get_goldcard();
  static const int kGetGoldcardFieldNumber = 10;
  inline ::google::protobuf::int32 get_goldcard() const;
  inline void set_get_goldcard(::google::protobuf::int32 value);

  // required int32 win_reward = 11;
  inline bool has_win_reward() const;
  inline void clear_win_reward();
  static const int kWinRewardFieldNumber = 11;
  inline ::google::protobuf::int32 win_reward() const;
  inline void set_win_reward(::google::protobuf::int32 value);

  // required int32 rank_reward = 12;
  inline bool has_rank_reward() const;
  inline void clear_rank_reward();
  static const int kRankRewardFieldNumber = 12;
  inline ::google::protobuf::int32 rank_reward() const;
  inline void set_rank_reward(::google::protobuf::int32 value);

  // required int32 lucky_point = 13;
  inline bool has_lucky_point() const;
  inline void clear_lucky_point();
  static const int kLuckyPointFieldNumber = 13;
  inline ::google::protobuf::int32 lucky_point() const;
  inline void set_lucky_point(::google::protobuf::int32 value);

  // required int32 build_discount = 14;
  inline bool has_build_discount() const;
  inline void clear_build_discount();
  static const int kBuildDiscountFieldNumber = 14;
  inline ::google::protobuf::int32 build_discount() const;
  inline void set_build_discount(::google::protobuf::int32 value);

  // required int32 cash_discount = 15;
  inline bool has_cash_discount() const;
  inline void clear_cash_discount();
  static const int kCashDiscountFieldNumber = 15;
  inline ::google::protobuf::int32 cash_discount() const;
  inline void set_cash_discount(::google::protobuf::int32 value);

  // required int32 sindou_reward = 16;
  inline bool has_sindou_reward() const;
  inline void clear_sindou_reward();
  static const int kSindouRewardFieldNumber = 16;
  inline ::google::protobuf::int32 sindou_reward() const;
  inline void set_sindou_reward(::google::protobuf::int32 value);

  // optional int32 levelup_cost = 17;
  inline bool has_levelup_cost() const;
  inline void clear_levelup_cost();
  static const int kLevelupCostFieldNumber = 17;
  inline ::google::protobuf::int32 levelup_cost() const;
  inline void set_levelup_cost(::google::protobuf::int32 value);

  // optional int32 level_require = 18;
  inline bool has_level_require() const;
  inline void clear_level_require();
  static const int kLevelRequireFieldNumber = 18;
  inline ::google::protobuf::int32 level_require() const;
  inline void set_level_require(::google::protobuf::int32 value);

  // optional int32 buyin_marble_cost = 19;
  inline bool has_buyin_marble_cost() const;
  inline void clear_buyin_marble_cost();
  static const int kBuyinMarbleCostFieldNumber = 19;
  inline ::google::protobuf::int32 buyin_marble_cost() const;
  inline void set_buyin_marble_cost(::google::protobuf::int32 value);

  // optional int32 buyin_gold_cost = 20;
  inline bool has_buyin_gold_cost() const;
  inline void clear_buyin_gold_cost();
  static const int kBuyinGoldCostFieldNumber = 20;
  inline ::google::protobuf::int32 buyin_gold_cost() const;
  inline void set_buyin_gold_cost(::google::protobuf::int32 value);

  // optional int32 buyin_require_level = 21;
  inline bool has_buyin_require_level() const;
  inline void clear_buyin_require_level();
  static const int kBuyinRequireLevelFieldNumber = 21;
  inline ::google::protobuf::int32 buyin_require_level() const;
  inline void set_buyin_require_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.DieProperty)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_esc_island();
  inline void clear_has_esc_island();
  inline void set_has_exp_reward();
  inline void clear_has_exp_reward();
  inline void set_has_cost_discount();
  inline void clear_has_cost_discount();
  inline void set_has_gold_reward();
  inline void clear_has_gold_reward();
  inline void set_has_get_goldcard();
  inline void clear_has_get_goldcard();
  inline void set_has_win_reward();
  inline void clear_has_win_reward();
  inline void set_has_rank_reward();
  inline void clear_has_rank_reward();
  inline void set_has_lucky_point();
  inline void clear_has_lucky_point();
  inline void set_has_build_discount();
  inline void clear_has_build_discount();
  inline void set_has_cash_discount();
  inline void clear_has_cash_discount();
  inline void set_has_sindou_reward();
  inline void clear_has_sindou_reward();
  inline void set_has_levelup_cost();
  inline void clear_has_levelup_cost();
  inline void set_has_level_require();
  inline void clear_has_level_require();
  inline void set_has_buyin_marble_cost();
  inline void clear_has_buyin_marble_cost();
  inline void set_has_buyin_gold_cost();
  inline void clear_has_buyin_gold_cost();
  inline void set_has_buyin_require_level();
  inline void clear_has_buyin_require_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 esc_island_;
  ::google::protobuf::int32 exp_reward_;
  ::google::protobuf::int32 cost_discount_;
  ::google::protobuf::int32 gold_reward_;
  ::google::protobuf::int32 get_goldcard_;
  ::google::protobuf::int32 win_reward_;
  ::google::protobuf::int32 rank_reward_;
  ::google::protobuf::int32 lucky_point_;
  ::google::protobuf::int32 build_discount_;
  ::google::protobuf::int32 cash_discount_;
  ::google::protobuf::int32 sindou_reward_;
  ::google::protobuf::int32 levelup_cost_;
  ::google::protobuf::int32 level_require_;
  ::google::protobuf::int32 buyin_marble_cost_;
  ::google::protobuf::int32 buyin_gold_cost_;
  ::google::protobuf::int32 buyin_require_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static DieProperty* default_instance_;
};
// -------------------------------------------------------------------

class S2C_DieList_Rsp : public ::google::protobuf::Message {
 public:
  S2C_DieList_Rsp();
  virtual ~S2C_DieList_Rsp();

  S2C_DieList_Rsp(const S2C_DieList_Rsp& from);

  inline S2C_DieList_Rsp& operator=(const S2C_DieList_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_DieList_Rsp& default_instance();

  void Swap(S2C_DieList_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_DieList_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_DieList_Rsp& from);
  void MergeFrom(const S2C_DieList_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DIESYSTEM.DieProperty die = 1;
  inline int die_size() const;
  inline void clear_die();
  static const int kDieFieldNumber = 1;
  inline const ::DIESYSTEM::DieProperty& die(int index) const;
  inline ::DIESYSTEM::DieProperty* mutable_die(int index);
  inline ::DIESYSTEM::DieProperty* add_die();
  inline const ::google::protobuf::RepeatedPtrField< ::DIESYSTEM::DieProperty >&
      die() const;
  inline ::google::protobuf::RepeatedPtrField< ::DIESYSTEM::DieProperty >*
      mutable_die();

  // @@protoc_insertion_point(class_scope:DIESYSTEM.S2C_DieList_Rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DIESYSTEM::DieProperty > die_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_DieList_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_BuyDie_Req : public ::google::protobuf::Message {
 public:
  C2S_BuyDie_Req();
  virtual ~C2S_BuyDie_Req();

  C2S_BuyDie_Req(const C2S_BuyDie_Req& from);

  inline C2S_BuyDie_Req& operator=(const C2S_BuyDie_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_BuyDie_Req& default_instance();

  void Swap(C2S_BuyDie_Req* other);

  // implements Message ----------------------------------------------

  C2S_BuyDie_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_BuyDie_Req& from);
  void MergeFrom(const C2S_BuyDie_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 die_id = 1;
  inline bool has_die_id() const;
  inline void clear_die_id();
  static const int kDieIdFieldNumber = 1;
  inline ::google::protobuf::int32 die_id() const;
  inline void set_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.C2S_BuyDie_Req)
 private:
  inline void set_has_die_id();
  inline void clear_has_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_BuyDie_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_BuyDie_Rsp : public ::google::protobuf::Message {
 public:
  S2C_BuyDie_Rsp();
  virtual ~S2C_BuyDie_Rsp();

  S2C_BuyDie_Rsp(const S2C_BuyDie_Rsp& from);

  inline S2C_BuyDie_Rsp& operator=(const S2C_BuyDie_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_BuyDie_Rsp& default_instance();

  void Swap(S2C_BuyDie_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_BuyDie_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_BuyDie_Rsp& from);
  void MergeFrom(const S2C_BuyDie_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_BuyDie_Rsp_ResultCode ResultCode;
  static const ResultCode FAILED = S2C_BuyDie_Rsp_ResultCode_FAILED;
  static const ResultCode SUCCESS = S2C_BuyDie_Rsp_ResultCode_SUCCESS;
  static const ResultCode NOT_ENOUGH_MONEY = S2C_BuyDie_Rsp_ResultCode_NOT_ENOUGH_MONEY;
  static const ResultCode NOT_ENOUGH_MARBLE = S2C_BuyDie_Rsp_ResultCode_NOT_ENOUGH_MARBLE;
  static const ResultCode UNKNOW_ERROR = S2C_BuyDie_Rsp_ResultCode_UNKNOW_ERROR;
  static inline bool ResultCode_IsValid(int value) {
    return S2C_BuyDie_Rsp_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    S2C_BuyDie_Rsp_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    S2C_BuyDie_Rsp_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    S2C_BuyDie_Rsp_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return S2C_BuyDie_Rsp_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return S2C_BuyDie_Rsp_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return S2C_BuyDie_Rsp_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 new_die_id = 2;
  inline bool has_new_die_id() const;
  inline void clear_new_die_id();
  static const int kNewDieIdFieldNumber = 2;
  inline ::google::protobuf::int32 new_die_id() const;
  inline void set_new_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.S2C_BuyDie_Rsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_new_die_id();
  inline void clear_has_new_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 new_die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_BuyDie_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_DieLevelUp_Req : public ::google::protobuf::Message {
 public:
  C2S_DieLevelUp_Req();
  virtual ~C2S_DieLevelUp_Req();

  C2S_DieLevelUp_Req(const C2S_DieLevelUp_Req& from);

  inline C2S_DieLevelUp_Req& operator=(const C2S_DieLevelUp_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_DieLevelUp_Req& default_instance();

  void Swap(C2S_DieLevelUp_Req* other);

  // implements Message ----------------------------------------------

  C2S_DieLevelUp_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_DieLevelUp_Req& from);
  void MergeFrom(const C2S_DieLevelUp_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 die_id = 1;
  inline bool has_die_id() const;
  inline void clear_die_id();
  static const int kDieIdFieldNumber = 1;
  inline ::google::protobuf::int32 die_id() const;
  inline void set_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.C2S_DieLevelUp_Req)
 private:
  inline void set_has_die_id();
  inline void clear_has_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_DieLevelUp_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_DieLevelUp_Rsp : public ::google::protobuf::Message {
 public:
  S2C_DieLevelUp_Rsp();
  virtual ~S2C_DieLevelUp_Rsp();

  S2C_DieLevelUp_Rsp(const S2C_DieLevelUp_Rsp& from);

  inline S2C_DieLevelUp_Rsp& operator=(const S2C_DieLevelUp_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_DieLevelUp_Rsp& default_instance();

  void Swap(S2C_DieLevelUp_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_DieLevelUp_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_DieLevelUp_Rsp& from);
  void MergeFrom(const S2C_DieLevelUp_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_DieLevelUp_Rsp_ResultCode ResultCode;
  static const ResultCode FAILED = S2C_DieLevelUp_Rsp_ResultCode_FAILED;
  static const ResultCode SUCCESS = S2C_DieLevelUp_Rsp_ResultCode_SUCCESS;
  static const ResultCode NOT_ENOUGH_MONEY = S2C_DieLevelUp_Rsp_ResultCode_NOT_ENOUGH_MONEY;
  static const ResultCode NOT_ENOUGH_MARBLE = S2C_DieLevelUp_Rsp_ResultCode_NOT_ENOUGH_MARBLE;
  static const ResultCode UNKNOW_ERROR = S2C_DieLevelUp_Rsp_ResultCode_UNKNOW_ERROR;
  static inline bool ResultCode_IsValid(int value) {
    return S2C_DieLevelUp_Rsp_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    S2C_DieLevelUp_Rsp_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    S2C_DieLevelUp_Rsp_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    S2C_DieLevelUp_Rsp_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return S2C_DieLevelUp_Rsp_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return S2C_DieLevelUp_Rsp_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return S2C_DieLevelUp_Rsp_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 die_id = 2;
  inline bool has_die_id() const;
  inline void clear_die_id();
  static const int kDieIdFieldNumber = 2;
  inline ::google::protobuf::int32 die_id() const;
  inline void set_die_id(::google::protobuf::int32 value);

  // optional int32 new_die_id = 3;
  inline bool has_new_die_id() const;
  inline void clear_new_die_id();
  static const int kNewDieIdFieldNumber = 3;
  inline ::google::protobuf::int32 new_die_id() const;
  inline void set_new_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.S2C_DieLevelUp_Rsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_die_id();
  inline void clear_has_die_id();
  inline void set_has_new_die_id();
  inline void clear_has_new_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 die_id_;
  ::google::protobuf::int32 new_die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_DieLevelUp_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_DieEquip_Req : public ::google::protobuf::Message {
 public:
  C2S_DieEquip_Req();
  virtual ~C2S_DieEquip_Req();

  C2S_DieEquip_Req(const C2S_DieEquip_Req& from);

  inline C2S_DieEquip_Req& operator=(const C2S_DieEquip_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_DieEquip_Req& default_instance();

  void Swap(C2S_DieEquip_Req* other);

  // implements Message ----------------------------------------------

  C2S_DieEquip_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_DieEquip_Req& from);
  void MergeFrom(const C2S_DieEquip_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 die_id = 1;
  inline bool has_die_id() const;
  inline void clear_die_id();
  static const int kDieIdFieldNumber = 1;
  inline ::google::protobuf::int32 die_id() const;
  inline void set_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.C2S_DieEquip_Req)
 private:
  inline void set_has_die_id();
  inline void clear_has_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_DieEquip_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_DieEquip_Rsp : public ::google::protobuf::Message {
 public:
  S2C_DieEquip_Rsp();
  virtual ~S2C_DieEquip_Rsp();

  S2C_DieEquip_Rsp(const S2C_DieEquip_Rsp& from);

  inline S2C_DieEquip_Rsp& operator=(const S2C_DieEquip_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_DieEquip_Rsp& default_instance();

  void Swap(S2C_DieEquip_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_DieEquip_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_DieEquip_Rsp& from);
  void MergeFrom(const S2C_DieEquip_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_DieEquip_Rsp_ResultCode ResultCode;
  static const ResultCode SUCCESS = S2C_DieEquip_Rsp_ResultCode_SUCCESS;
  static const ResultCode FAILED = S2C_DieEquip_Rsp_ResultCode_FAILED;
  static inline bool ResultCode_IsValid(int value) {
    return S2C_DieEquip_Rsp_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    S2C_DieEquip_Rsp_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    S2C_DieEquip_Rsp_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    S2C_DieEquip_Rsp_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return S2C_DieEquip_Rsp_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return S2C_DieEquip_Rsp_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return S2C_DieEquip_Rsp_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 current_die_id = 2;
  inline bool has_current_die_id() const;
  inline void clear_current_die_id();
  static const int kCurrentDieIdFieldNumber = 2;
  inline ::google::protobuf::int32 current_die_id() const;
  inline void set_current_die_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DIESYSTEM.S2C_DieEquip_Rsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_current_die_id();
  inline void clear_has_current_die_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 current_die_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_diesystem_2eproto();
  friend void protobuf_AssignDesc_diesystem_2eproto();
  friend void protobuf_ShutdownFile_diesystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_DieEquip_Rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// DieProperty

// required int32 id = 1;
inline bool DieProperty::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DieProperty::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DieProperty::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DieProperty::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DieProperty::id() const {
  return id_;
}
inline void DieProperty::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool DieProperty::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DieProperty::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DieProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DieProperty::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 DieProperty::type() const {
  return type_;
}
inline void DieProperty::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 icon = 3;
inline bool DieProperty::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DieProperty::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DieProperty::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DieProperty::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 DieProperty::icon() const {
  return icon_;
}
inline void DieProperty::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
}

// required bytes name = 4;
inline bool DieProperty::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DieProperty::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DieProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DieProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DieProperty::name() const {
  return *name_;
}
inline void DieProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DieProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DieProperty::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DieProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DieProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DieProperty::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 5;
inline bool DieProperty::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DieProperty::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DieProperty::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DieProperty::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 DieProperty::level() const {
  return level_;
}
inline void DieProperty::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 esc_island = 6;
inline bool DieProperty::has_esc_island() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DieProperty::set_has_esc_island() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DieProperty::clear_has_esc_island() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DieProperty::clear_esc_island() {
  esc_island_ = 0;
  clear_has_esc_island();
}
inline ::google::protobuf::int32 DieProperty::esc_island() const {
  return esc_island_;
}
inline void DieProperty::set_esc_island(::google::protobuf::int32 value) {
  set_has_esc_island();
  esc_island_ = value;
}

// required int32 exp_reward = 7;
inline bool DieProperty::has_exp_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DieProperty::set_has_exp_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DieProperty::clear_has_exp_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DieProperty::clear_exp_reward() {
  exp_reward_ = 0;
  clear_has_exp_reward();
}
inline ::google::protobuf::int32 DieProperty::exp_reward() const {
  return exp_reward_;
}
inline void DieProperty::set_exp_reward(::google::protobuf::int32 value) {
  set_has_exp_reward();
  exp_reward_ = value;
}

// required int32 cost_discount = 8;
inline bool DieProperty::has_cost_discount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DieProperty::set_has_cost_discount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DieProperty::clear_has_cost_discount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DieProperty::clear_cost_discount() {
  cost_discount_ = 0;
  clear_has_cost_discount();
}
inline ::google::protobuf::int32 DieProperty::cost_discount() const {
  return cost_discount_;
}
inline void DieProperty::set_cost_discount(::google::protobuf::int32 value) {
  set_has_cost_discount();
  cost_discount_ = value;
}

// required int32 gold_reward = 9;
inline bool DieProperty::has_gold_reward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DieProperty::set_has_gold_reward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DieProperty::clear_has_gold_reward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DieProperty::clear_gold_reward() {
  gold_reward_ = 0;
  clear_has_gold_reward();
}
inline ::google::protobuf::int32 DieProperty::gold_reward() const {
  return gold_reward_;
}
inline void DieProperty::set_gold_reward(::google::protobuf::int32 value) {
  set_has_gold_reward();
  gold_reward_ = value;
}

// required int32 get_goldcard = 10;
inline bool DieProperty::has_get_goldcard() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DieProperty::set_has_get_goldcard() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DieProperty::clear_has_get_goldcard() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DieProperty::clear_get_goldcard() {
  get_goldcard_ = 0;
  clear_has_get_goldcard();
}
inline ::google::protobuf::int32 DieProperty::get_goldcard() const {
  return get_goldcard_;
}
inline void DieProperty::set_get_goldcard(::google::protobuf::int32 value) {
  set_has_get_goldcard();
  get_goldcard_ = value;
}

// required int32 win_reward = 11;
inline bool DieProperty::has_win_reward() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DieProperty::set_has_win_reward() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DieProperty::clear_has_win_reward() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DieProperty::clear_win_reward() {
  win_reward_ = 0;
  clear_has_win_reward();
}
inline ::google::protobuf::int32 DieProperty::win_reward() const {
  return win_reward_;
}
inline void DieProperty::set_win_reward(::google::protobuf::int32 value) {
  set_has_win_reward();
  win_reward_ = value;
}

// required int32 rank_reward = 12;
inline bool DieProperty::has_rank_reward() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DieProperty::set_has_rank_reward() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DieProperty::clear_has_rank_reward() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DieProperty::clear_rank_reward() {
  rank_reward_ = 0;
  clear_has_rank_reward();
}
inline ::google::protobuf::int32 DieProperty::rank_reward() const {
  return rank_reward_;
}
inline void DieProperty::set_rank_reward(::google::protobuf::int32 value) {
  set_has_rank_reward();
  rank_reward_ = value;
}

// required int32 lucky_point = 13;
inline bool DieProperty::has_lucky_point() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DieProperty::set_has_lucky_point() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DieProperty::clear_has_lucky_point() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DieProperty::clear_lucky_point() {
  lucky_point_ = 0;
  clear_has_lucky_point();
}
inline ::google::protobuf::int32 DieProperty::lucky_point() const {
  return lucky_point_;
}
inline void DieProperty::set_lucky_point(::google::protobuf::int32 value) {
  set_has_lucky_point();
  lucky_point_ = value;
}

// required int32 build_discount = 14;
inline bool DieProperty::has_build_discount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DieProperty::set_has_build_discount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DieProperty::clear_has_build_discount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DieProperty::clear_build_discount() {
  build_discount_ = 0;
  clear_has_build_discount();
}
inline ::google::protobuf::int32 DieProperty::build_discount() const {
  return build_discount_;
}
inline void DieProperty::set_build_discount(::google::protobuf::int32 value) {
  set_has_build_discount();
  build_discount_ = value;
}

// required int32 cash_discount = 15;
inline bool DieProperty::has_cash_discount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DieProperty::set_has_cash_discount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DieProperty::clear_has_cash_discount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DieProperty::clear_cash_discount() {
  cash_discount_ = 0;
  clear_has_cash_discount();
}
inline ::google::protobuf::int32 DieProperty::cash_discount() const {
  return cash_discount_;
}
inline void DieProperty::set_cash_discount(::google::protobuf::int32 value) {
  set_has_cash_discount();
  cash_discount_ = value;
}

// required int32 sindou_reward = 16;
inline bool DieProperty::has_sindou_reward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DieProperty::set_has_sindou_reward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DieProperty::clear_has_sindou_reward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DieProperty::clear_sindou_reward() {
  sindou_reward_ = 0;
  clear_has_sindou_reward();
}
inline ::google::protobuf::int32 DieProperty::sindou_reward() const {
  return sindou_reward_;
}
inline void DieProperty::set_sindou_reward(::google::protobuf::int32 value) {
  set_has_sindou_reward();
  sindou_reward_ = value;
}

// optional int32 levelup_cost = 17;
inline bool DieProperty::has_levelup_cost() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DieProperty::set_has_levelup_cost() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DieProperty::clear_has_levelup_cost() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DieProperty::clear_levelup_cost() {
  levelup_cost_ = 0;
  clear_has_levelup_cost();
}
inline ::google::protobuf::int32 DieProperty::levelup_cost() const {
  return levelup_cost_;
}
inline void DieProperty::set_levelup_cost(::google::protobuf::int32 value) {
  set_has_levelup_cost();
  levelup_cost_ = value;
}

// optional int32 level_require = 18;
inline bool DieProperty::has_level_require() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DieProperty::set_has_level_require() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DieProperty::clear_has_level_require() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DieProperty::clear_level_require() {
  level_require_ = 0;
  clear_has_level_require();
}
inline ::google::protobuf::int32 DieProperty::level_require() const {
  return level_require_;
}
inline void DieProperty::set_level_require(::google::protobuf::int32 value) {
  set_has_level_require();
  level_require_ = value;
}

// optional int32 buyin_marble_cost = 19;
inline bool DieProperty::has_buyin_marble_cost() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DieProperty::set_has_buyin_marble_cost() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DieProperty::clear_has_buyin_marble_cost() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DieProperty::clear_buyin_marble_cost() {
  buyin_marble_cost_ = 0;
  clear_has_buyin_marble_cost();
}
inline ::google::protobuf::int32 DieProperty::buyin_marble_cost() const {
  return buyin_marble_cost_;
}
inline void DieProperty::set_buyin_marble_cost(::google::protobuf::int32 value) {
  set_has_buyin_marble_cost();
  buyin_marble_cost_ = value;
}

// optional int32 buyin_gold_cost = 20;
inline bool DieProperty::has_buyin_gold_cost() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DieProperty::set_has_buyin_gold_cost() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DieProperty::clear_has_buyin_gold_cost() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DieProperty::clear_buyin_gold_cost() {
  buyin_gold_cost_ = 0;
  clear_has_buyin_gold_cost();
}
inline ::google::protobuf::int32 DieProperty::buyin_gold_cost() const {
  return buyin_gold_cost_;
}
inline void DieProperty::set_buyin_gold_cost(::google::protobuf::int32 value) {
  set_has_buyin_gold_cost();
  buyin_gold_cost_ = value;
}

// optional int32 buyin_require_level = 21;
inline bool DieProperty::has_buyin_require_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DieProperty::set_has_buyin_require_level() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DieProperty::clear_has_buyin_require_level() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DieProperty::clear_buyin_require_level() {
  buyin_require_level_ = 0;
  clear_has_buyin_require_level();
}
inline ::google::protobuf::int32 DieProperty::buyin_require_level() const {
  return buyin_require_level_;
}
inline void DieProperty::set_buyin_require_level(::google::protobuf::int32 value) {
  set_has_buyin_require_level();
  buyin_require_level_ = value;
}

// -------------------------------------------------------------------

// S2C_DieList_Rsp

// repeated .DIESYSTEM.DieProperty die = 1;
inline int S2C_DieList_Rsp::die_size() const {
  return die_.size();
}
inline void S2C_DieList_Rsp::clear_die() {
  die_.Clear();
}
inline const ::DIESYSTEM::DieProperty& S2C_DieList_Rsp::die(int index) const {
  return die_.Get(index);
}
inline ::DIESYSTEM::DieProperty* S2C_DieList_Rsp::mutable_die(int index) {
  return die_.Mutable(index);
}
inline ::DIESYSTEM::DieProperty* S2C_DieList_Rsp::add_die() {
  return die_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DIESYSTEM::DieProperty >&
S2C_DieList_Rsp::die() const {
  return die_;
}
inline ::google::protobuf::RepeatedPtrField< ::DIESYSTEM::DieProperty >*
S2C_DieList_Rsp::mutable_die() {
  return &die_;
}

// -------------------------------------------------------------------

// C2S_BuyDie_Req

// required int32 die_id = 1;
inline bool C2S_BuyDie_Req::has_die_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_BuyDie_Req::set_has_die_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_BuyDie_Req::clear_has_die_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_BuyDie_Req::clear_die_id() {
  die_id_ = 0;
  clear_has_die_id();
}
inline ::google::protobuf::int32 C2S_BuyDie_Req::die_id() const {
  return die_id_;
}
inline void C2S_BuyDie_Req::set_die_id(::google::protobuf::int32 value) {
  set_has_die_id();
  die_id_ = value;
}

// -------------------------------------------------------------------

// S2C_BuyDie_Rsp

// required int32 result = 1;
inline bool S2C_BuyDie_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_BuyDie_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_BuyDie_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_BuyDie_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 S2C_BuyDie_Rsp::result() const {
  return result_;
}
inline void S2C_BuyDie_Rsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 new_die_id = 2;
inline bool S2C_BuyDie_Rsp::has_new_die_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_BuyDie_Rsp::set_has_new_die_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_BuyDie_Rsp::clear_has_new_die_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_BuyDie_Rsp::clear_new_die_id() {
  new_die_id_ = 0;
  clear_has_new_die_id();
}
inline ::google::protobuf::int32 S2C_BuyDie_Rsp::new_die_id() const {
  return new_die_id_;
}
inline void S2C_BuyDie_Rsp::set_new_die_id(::google::protobuf::int32 value) {
  set_has_new_die_id();
  new_die_id_ = value;
}

// -------------------------------------------------------------------

// C2S_DieLevelUp_Req

// required int32 die_id = 1;
inline bool C2S_DieLevelUp_Req::has_die_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_DieLevelUp_Req::set_has_die_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_DieLevelUp_Req::clear_has_die_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_DieLevelUp_Req::clear_die_id() {
  die_id_ = 0;
  clear_has_die_id();
}
inline ::google::protobuf::int32 C2S_DieLevelUp_Req::die_id() const {
  return die_id_;
}
inline void C2S_DieLevelUp_Req::set_die_id(::google::protobuf::int32 value) {
  set_has_die_id();
  die_id_ = value;
}

// -------------------------------------------------------------------

// S2C_DieLevelUp_Rsp

// required int32 result = 1;
inline bool S2C_DieLevelUp_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_DieLevelUp_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_DieLevelUp_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_DieLevelUp_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 S2C_DieLevelUp_Rsp::result() const {
  return result_;
}
inline void S2C_DieLevelUp_Rsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 die_id = 2;
inline bool S2C_DieLevelUp_Rsp::has_die_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_DieLevelUp_Rsp::set_has_die_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_DieLevelUp_Rsp::clear_has_die_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_DieLevelUp_Rsp::clear_die_id() {
  die_id_ = 0;
  clear_has_die_id();
}
inline ::google::protobuf::int32 S2C_DieLevelUp_Rsp::die_id() const {
  return die_id_;
}
inline void S2C_DieLevelUp_Rsp::set_die_id(::google::protobuf::int32 value) {
  set_has_die_id();
  die_id_ = value;
}

// optional int32 new_die_id = 3;
inline bool S2C_DieLevelUp_Rsp::has_new_die_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_DieLevelUp_Rsp::set_has_new_die_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_DieLevelUp_Rsp::clear_has_new_die_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_DieLevelUp_Rsp::clear_new_die_id() {
  new_die_id_ = 0;
  clear_has_new_die_id();
}
inline ::google::protobuf::int32 S2C_DieLevelUp_Rsp::new_die_id() const {
  return new_die_id_;
}
inline void S2C_DieLevelUp_Rsp::set_new_die_id(::google::protobuf::int32 value) {
  set_has_new_die_id();
  new_die_id_ = value;
}

// -------------------------------------------------------------------

// C2S_DieEquip_Req

// required int32 die_id = 1;
inline bool C2S_DieEquip_Req::has_die_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_DieEquip_Req::set_has_die_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_DieEquip_Req::clear_has_die_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_DieEquip_Req::clear_die_id() {
  die_id_ = 0;
  clear_has_die_id();
}
inline ::google::protobuf::int32 C2S_DieEquip_Req::die_id() const {
  return die_id_;
}
inline void C2S_DieEquip_Req::set_die_id(::google::protobuf::int32 value) {
  set_has_die_id();
  die_id_ = value;
}

// -------------------------------------------------------------------

// S2C_DieEquip_Rsp

// required int32 result = 1;
inline bool S2C_DieEquip_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_DieEquip_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_DieEquip_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_DieEquip_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 S2C_DieEquip_Rsp::result() const {
  return result_;
}
inline void S2C_DieEquip_Rsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 current_die_id = 2;
inline bool S2C_DieEquip_Rsp::has_current_die_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_DieEquip_Rsp::set_has_current_die_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_DieEquip_Rsp::clear_has_current_die_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_DieEquip_Rsp::clear_current_die_id() {
  current_die_id_ = 0;
  clear_has_current_die_id();
}
inline ::google::protobuf::int32 S2C_DieEquip_Rsp::current_die_id() const {
  return current_die_id_;
}
inline void S2C_DieEquip_Rsp::set_current_die_id(::google::protobuf::int32 value) {
  set_has_current_die_id();
  current_die_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DIESYSTEM

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DIESYSTEM::S2C_BuyDie_Rsp_ResultCode>() {
  return ::DIESYSTEM::S2C_BuyDie_Rsp_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DIESYSTEM::S2C_DieLevelUp_Rsp_ResultCode>() {
  return ::DIESYSTEM::S2C_DieLevelUp_Rsp_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DIESYSTEM::S2C_DieEquip_Rsp_ResultCode>() {
  return ::DIESYSTEM::S2C_DieEquip_Rsp_ResultCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_diesystem_2eproto__INCLUDED
