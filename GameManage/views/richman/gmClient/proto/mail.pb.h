// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#ifndef PROTOBUF_mail_2eproto__INCLUDED
#define PROTOBUF_mail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db_cache.pb.h"
// @@protoc_insertion_point(includes)

namespace MAIL {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mail_2eproto();
void protobuf_AssignDesc_mail_2eproto();
void protobuf_ShutdownFile_mail_2eproto();

class MailInfo;
class UserMailList;
class C2S_Load_Mail_List_Req;
class S2C_Load_Mail_List_Rsp;
class C2S_Read_Mail_Req;
class S2C_Read_Mail_Rsp;
class C2S_Take_Mail_Prop_Req;
class S2C_Take_Mail_Prop_Rsp;
class Z2M_Take_Mail_Prop_Result;
class C2S_Delete_Mail_Req;
class S2C_Delete_Mail_Rsp;
class C2S_Send_Mail_Req;
class S2C_Send_Mail_Rsp;
class S2C_Notify_New_Mail;
class Z2M_Player_Init_Mail_Box;
class Z2M_Notify_User_Enter;
class Z2M_Send_System_Mail_Req;
class M2Z_Send_System_Mail_Rsp;
class Z2M_Broadcast_System_Mail_Req;
class M2Z_Broadcast_System_Mail_Rsp;

enum S2C_Take_Mail_Prop_Rsp_RetCode {
  S2C_Take_Mail_Prop_Rsp_RetCode_SUCCESS = 0,
  S2C_Take_Mail_Prop_Rsp_RetCode_CLOVER_FULL = 1,
  S2C_Take_Mail_Prop_Rsp_RetCode_GOLDCOIN_FULL = 2,
  S2C_Take_Mail_Prop_Rsp_RetCode_MARBLE_FULL = 3,
  S2C_Take_Mail_Prop_Rsp_RetCode_CARD_FULL = 4,
  S2C_Take_Mail_Prop_Rsp_RetCode_MAIL_NOT_EXISTS = 5,
  S2C_Take_Mail_Prop_Rsp_RetCode_PROP_TAKEN = 6,
  S2C_Take_Mail_Prop_Rsp_RetCode_MIAL_OUT_DATE = 7
};
bool S2C_Take_Mail_Prop_Rsp_RetCode_IsValid(int value);
const S2C_Take_Mail_Prop_Rsp_RetCode S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_MIN = S2C_Take_Mail_Prop_Rsp_RetCode_SUCCESS;
const S2C_Take_Mail_Prop_Rsp_RetCode S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_MAX = S2C_Take_Mail_Prop_Rsp_RetCode_MIAL_OUT_DATE;
const int S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_ARRAYSIZE = S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_Take_Mail_Prop_Rsp_RetCode_descriptor();
inline const ::std::string& S2C_Take_Mail_Prop_Rsp_RetCode_Name(S2C_Take_Mail_Prop_Rsp_RetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_Take_Mail_Prop_Rsp_RetCode_descriptor(), value);
}
inline bool S2C_Take_Mail_Prop_Rsp_RetCode_Parse(
    const ::std::string& name, S2C_Take_Mail_Prop_Rsp_RetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_Take_Mail_Prop_Rsp_RetCode>(
    S2C_Take_Mail_Prop_Rsp_RetCode_descriptor(), name, value);
}
// ===================================================================

class MailInfo : public ::google::protobuf::Message {
 public:
  MailInfo();
  virtual ~MailInfo();

  MailInfo(const MailInfo& from);

  inline MailInfo& operator=(const MailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailInfo& default_instance();

  void Swap(MailInfo* other);

  // implements Message ----------------------------------------------

  MailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailInfo& from);
  void MergeFrom(const MailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 sender = 3;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 3;
  inline ::google::protobuf::uint32 sender() const;
  inline void set_sender(::google::protobuf::uint32 value);

  // optional bytes sender_nickname = 4;
  inline bool has_sender_nickname() const;
  inline void clear_sender_nickname();
  static const int kSenderNicknameFieldNumber = 4;
  inline const ::std::string& sender_nickname() const;
  inline void set_sender_nickname(const ::std::string& value);
  inline void set_sender_nickname(const char* value);
  inline void set_sender_nickname(const void* value, size_t size);
  inline ::std::string* mutable_sender_nickname();
  inline ::std::string* release_sender_nickname();
  inline void set_allocated_sender_nickname(::std::string* sender_nickname);

  // optional uint32 sender_head = 5;
  inline bool has_sender_head() const;
  inline void clear_sender_head();
  static const int kSenderHeadFieldNumber = 5;
  inline ::google::protobuf::uint32 sender_head() const;
  inline void set_sender_head(::google::protobuf::uint32 value);

  // optional string sender_custom_head = 6;
  inline bool has_sender_custom_head() const;
  inline void clear_sender_custom_head();
  static const int kSenderCustomHeadFieldNumber = 6;
  inline const ::std::string& sender_custom_head() const;
  inline void set_sender_custom_head(const ::std::string& value);
  inline void set_sender_custom_head(const char* value);
  inline void set_sender_custom_head(const char* value, size_t size);
  inline ::std::string* mutable_sender_custom_head();
  inline ::std::string* release_sender_custom_head();
  inline void set_allocated_sender_custom_head(::std::string* sender_custom_head);

  // required uint32 receiver = 7;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 7;
  inline ::google::protobuf::uint32 receiver() const;
  inline void set_receiver(::google::protobuf::uint32 value);

  // required uint32 checked = 8;
  inline bool has_checked() const;
  inline void clear_checked();
  static const int kCheckedFieldNumber = 8;
  inline ::google::protobuf::uint32 checked() const;
  inline void set_checked(::google::protobuf::uint32 value);

  // required uint32 state = 9;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 9;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional bytes subject = 10;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 10;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const void* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional bytes context = 11;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 11;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const void* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // optional uint32 template_id = 12;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 12;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional uint64 expire_time = 13;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint64 value);

  // optional uint64 deliver_time = 14;
  inline bool has_deliver_time() const;
  inline void clear_deliver_time();
  static const int kDeliverTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 deliver_time() const;
  inline void set_deliver_time(::google::protobuf::uint64 value);

  // required uint32 create_time = 15;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 prop_flag = 16;
  inline bool has_prop_flag() const;
  inline void clear_prop_flag();
  static const int kPropFlagFieldNumber = 16;
  inline ::google::protobuf::uint32 prop_flag() const;
  inline void set_prop_flag(::google::protobuf::uint32 value);

  // repeated .DBCACHE.Prop attachments = 17;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 17;
  inline const ::DBCACHE::Prop& attachments(int index) const;
  inline ::DBCACHE::Prop* mutable_attachments(int index);
  inline ::DBCACHE::Prop* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:MAIL.MailInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_sender_nickname();
  inline void clear_has_sender_nickname();
  inline void set_has_sender_head();
  inline void clear_has_sender_head();
  inline void set_has_sender_custom_head();
  inline void clear_has_sender_custom_head();
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_checked();
  inline void clear_has_checked();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_deliver_time();
  inline void clear_has_deliver_time();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_prop_flag();
  inline void clear_has_prop_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* sender_nickname_;
  ::google::protobuf::uint32 sender_;
  ::google::protobuf::uint32 sender_head_;
  ::std::string* sender_custom_head_;
  ::google::protobuf::uint32 receiver_;
  ::google::protobuf::uint32 checked_;
  ::std::string* subject_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 template_id_;
  ::std::string* context_;
  ::google::protobuf::uint64 expire_time_;
  ::google::protobuf::uint64 deliver_time_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 prop_flag_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > attachments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static MailInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserMailList : public ::google::protobuf::Message {
 public:
  UserMailList();
  virtual ~UserMailList();

  UserMailList(const UserMailList& from);

  inline UserMailList& operator=(const UserMailList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMailList& default_instance();

  void Swap(UserMailList* other);

  // implements Message ----------------------------------------------

  UserMailList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMailList& from);
  void MergeFrom(const UserMailList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 user_head = 2;
  inline bool has_user_head() const;
  inline void clear_user_head();
  static const int kUserHeadFieldNumber = 2;
  inline ::google::protobuf::uint32 user_head() const;
  inline void set_user_head(::google::protobuf::uint32 value);

  // optional string user_custom_head = 3;
  inline bool has_user_custom_head() const;
  inline void clear_user_custom_head();
  static const int kUserCustomHeadFieldNumber = 3;
  inline const ::std::string& user_custom_head() const;
  inline void set_user_custom_head(const ::std::string& value);
  inline void set_user_custom_head(const char* value);
  inline void set_user_custom_head(const char* value, size_t size);
  inline ::std::string* mutable_user_custom_head();
  inline ::std::string* release_user_custom_head();
  inline void set_allocated_user_custom_head(::std::string* user_custom_head);

  // optional bytes user_name = 4;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const void* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 user_flag = 5;
  inline bool has_user_flag() const;
  inline void clear_user_flag();
  static const int kUserFlagFieldNumber = 5;
  inline ::google::protobuf::uint64 user_flag() const;
  inline void set_user_flag(::google::protobuf::uint64 value);

  // optional uint32 max_mail_id = 6;
  inline bool has_max_mail_id() const;
  inline void clear_max_mail_id();
  static const int kMaxMailIdFieldNumber = 6;
  inline ::google::protobuf::uint32 max_mail_id() const;
  inline void set_max_mail_id(::google::protobuf::uint32 value);

  // optional uint32 unread_mails = 7;
  inline bool has_unread_mails() const;
  inline void clear_unread_mails();
  static const int kUnreadMailsFieldNumber = 7;
  inline ::google::protobuf::uint32 unread_mails() const;
  inline void set_unread_mails(::google::protobuf::uint32 value);

  // repeated .MAIL.MailInfo mail = 8;
  inline int mail_size() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 8;
  inline const ::MAIL::MailInfo& mail(int index) const;
  inline ::MAIL::MailInfo* mutable_mail(int index);
  inline ::MAIL::MailInfo* add_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >&
      mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >*
      mutable_mail();

  // @@protoc_insertion_point(class_scope:MAIL.UserMailList)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_head();
  inline void clear_has_user_head();
  inline void set_has_user_custom_head();
  inline void clear_has_user_custom_head();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_flag();
  inline void clear_has_user_flag();
  inline void set_has_max_mail_id();
  inline void clear_has_max_mail_id();
  inline void set_has_unread_mails();
  inline void clear_has_unread_mails();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 user_head_;
  ::std::string* user_custom_head_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 user_flag_;
  ::google::protobuf::uint32 max_mail_id_;
  ::google::protobuf::uint32 unread_mails_;
  ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo > mail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static UserMailList* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Load_Mail_List_Req : public ::google::protobuf::Message {
 public:
  C2S_Load_Mail_List_Req();
  virtual ~C2S_Load_Mail_List_Req();

  C2S_Load_Mail_List_Req(const C2S_Load_Mail_List_Req& from);

  inline C2S_Load_Mail_List_Req& operator=(const C2S_Load_Mail_List_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Load_Mail_List_Req& default_instance();

  void Swap(C2S_Load_Mail_List_Req* other);

  // implements Message ----------------------------------------------

  C2S_Load_Mail_List_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Load_Mail_List_Req& from);
  void MergeFrom(const C2S_Load_Mail_List_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 load_type = 1;
  inline bool has_load_type() const;
  inline void clear_load_type();
  static const int kLoadTypeFieldNumber = 1;
  inline ::google::protobuf::int32 load_type() const;
  inline void set_load_type(::google::protobuf::int32 value);

  // optional uint32 start_index = 2;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 start_index() const;
  inline void set_start_index(::google::protobuf::uint32 value);

  // optional uint32 req_num = 3;
  inline bool has_req_num() const;
  inline void clear_req_num();
  static const int kReqNumFieldNumber = 3;
  inline ::google::protobuf::uint32 req_num() const;
  inline void set_req_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MAIL.C2S_Load_Mail_List_Req)
 private:
  inline void set_has_load_type();
  inline void clear_has_load_type();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_req_num();
  inline void clear_has_req_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 load_type_;
  ::google::protobuf::uint32 start_index_;
  ::google::protobuf::uint32 req_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static C2S_Load_Mail_List_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Load_Mail_List_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Load_Mail_List_Rsp();
  virtual ~S2C_Load_Mail_List_Rsp();

  S2C_Load_Mail_List_Rsp(const S2C_Load_Mail_List_Rsp& from);

  inline S2C_Load_Mail_List_Rsp& operator=(const S2C_Load_Mail_List_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Load_Mail_List_Rsp& default_instance();

  void Swap(S2C_Load_Mail_List_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Load_Mail_List_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Load_Mail_List_Rsp& from);
  void MergeFrom(const S2C_Load_Mail_List_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional uint32 unread_count = 2;
  inline bool has_unread_count() const;
  inline void clear_unread_count();
  static const int kUnreadCountFieldNumber = 2;
  inline ::google::protobuf::uint32 unread_count() const;
  inline void set_unread_count(::google::protobuf::uint32 value);

  // optional uint32 space_left = 3;
  inline bool has_space_left() const;
  inline void clear_space_left();
  static const int kSpaceLeftFieldNumber = 3;
  inline ::google::protobuf::uint32 space_left() const;
  inline void set_space_left(::google::protobuf::uint32 value);

  // repeated .MAIL.MailInfo mails = 4;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 4;
  inline const ::MAIL::MailInfo& mails(int index) const;
  inline ::MAIL::MailInfo* mutable_mails(int index);
  inline ::MAIL::MailInfo* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >*
      mutable_mails();

  // @@protoc_insertion_point(class_scope:MAIL.S2C_Load_Mail_List_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_unread_count();
  inline void clear_has_unread_count();
  inline void set_has_space_left();
  inline void clear_has_space_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::uint32 unread_count_;
  ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo > mails_;
  ::google::protobuf::uint32 space_left_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static S2C_Load_Mail_List_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Read_Mail_Req : public ::google::protobuf::Message {
 public:
  C2S_Read_Mail_Req();
  virtual ~C2S_Read_Mail_Req();

  C2S_Read_Mail_Req(const C2S_Read_Mail_Req& from);

  inline C2S_Read_Mail_Req& operator=(const C2S_Read_Mail_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Read_Mail_Req& default_instance();

  void Swap(C2S_Read_Mail_Req* other);

  // implements Message ----------------------------------------------

  C2S_Read_Mail_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Read_Mail_Req& from);
  void MergeFrom(const C2S_Read_Mail_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAIL.C2S_Read_Mail_Req)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static C2S_Read_Mail_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Read_Mail_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Read_Mail_Rsp();
  virtual ~S2C_Read_Mail_Rsp();

  S2C_Read_Mail_Rsp(const S2C_Read_Mail_Rsp& from);

  inline S2C_Read_Mail_Rsp& operator=(const S2C_Read_Mail_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Read_Mail_Rsp& default_instance();

  void Swap(S2C_Read_Mail_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Read_Mail_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Read_Mail_Rsp& from);
  void MergeFrom(const S2C_Read_Mail_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // required uint32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // optional bytes context = 3;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 3;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const void* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // @@protoc_insertion_point(class_scope:MAIL.S2C_Read_Mail_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::uint32 mail_id_;
  ::std::string* context_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static S2C_Read_Mail_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Take_Mail_Prop_Req : public ::google::protobuf::Message {
 public:
  C2S_Take_Mail_Prop_Req();
  virtual ~C2S_Take_Mail_Prop_Req();

  C2S_Take_Mail_Prop_Req(const C2S_Take_Mail_Prop_Req& from);

  inline C2S_Take_Mail_Prop_Req& operator=(const C2S_Take_Mail_Prop_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Take_Mail_Prop_Req& default_instance();

  void Swap(C2S_Take_Mail_Prop_Req* other);

  // implements Message ----------------------------------------------

  C2S_Take_Mail_Prop_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Take_Mail_Prop_Req& from);
  void MergeFrom(const C2S_Take_Mail_Prop_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAIL.C2S_Take_Mail_Prop_Req)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static C2S_Take_Mail_Prop_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Take_Mail_Prop_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Take_Mail_Prop_Rsp();
  virtual ~S2C_Take_Mail_Prop_Rsp();

  S2C_Take_Mail_Prop_Rsp(const S2C_Take_Mail_Prop_Rsp& from);

  inline S2C_Take_Mail_Prop_Rsp& operator=(const S2C_Take_Mail_Prop_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Take_Mail_Prop_Rsp& default_instance();

  void Swap(S2C_Take_Mail_Prop_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Take_Mail_Prop_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Take_Mail_Prop_Rsp& from);
  void MergeFrom(const S2C_Take_Mail_Prop_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_Take_Mail_Prop_Rsp_RetCode RetCode;
  static const RetCode SUCCESS = S2C_Take_Mail_Prop_Rsp_RetCode_SUCCESS;
  static const RetCode CLOVER_FULL = S2C_Take_Mail_Prop_Rsp_RetCode_CLOVER_FULL;
  static const RetCode GOLDCOIN_FULL = S2C_Take_Mail_Prop_Rsp_RetCode_GOLDCOIN_FULL;
  static const RetCode MARBLE_FULL = S2C_Take_Mail_Prop_Rsp_RetCode_MARBLE_FULL;
  static const RetCode CARD_FULL = S2C_Take_Mail_Prop_Rsp_RetCode_CARD_FULL;
  static const RetCode MAIL_NOT_EXISTS = S2C_Take_Mail_Prop_Rsp_RetCode_MAIL_NOT_EXISTS;
  static const RetCode PROP_TAKEN = S2C_Take_Mail_Prop_Rsp_RetCode_PROP_TAKEN;
  static const RetCode MIAL_OUT_DATE = S2C_Take_Mail_Prop_Rsp_RetCode_MIAL_OUT_DATE;
  static inline bool RetCode_IsValid(int value) {
    return S2C_Take_Mail_Prop_Rsp_RetCode_IsValid(value);
  }
  static const RetCode RetCode_MIN =
    S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_MIN;
  static const RetCode RetCode_MAX =
    S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_MAX;
  static const int RetCode_ARRAYSIZE =
    S2C_Take_Mail_Prop_Rsp_RetCode_RetCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RetCode_descriptor() {
    return S2C_Take_Mail_Prop_Rsp_RetCode_descriptor();
  }
  static inline const ::std::string& RetCode_Name(RetCode value) {
    return S2C_Take_Mail_Prop_Rsp_RetCode_Name(value);
  }
  static inline bool RetCode_Parse(const ::std::string& name,
      RetCode* value) {
    return S2C_Take_Mail_Prop_Rsp_RetCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // required int32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // repeated .DBCACHE.Prop attachments = 3;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 3;
  inline const ::DBCACHE::Prop& attachments(int index) const;
  inline ::DBCACHE::Prop* mutable_attachments(int index);
  inline ::DBCACHE::Prop* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:MAIL.S2C_Take_Mail_Prop_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 mail_id_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > attachments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static S2C_Take_Mail_Prop_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Z2M_Take_Mail_Prop_Result : public ::google::protobuf::Message {
 public:
  Z2M_Take_Mail_Prop_Result();
  virtual ~Z2M_Take_Mail_Prop_Result();

  Z2M_Take_Mail_Prop_Result(const Z2M_Take_Mail_Prop_Result& from);

  inline Z2M_Take_Mail_Prop_Result& operator=(const Z2M_Take_Mail_Prop_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z2M_Take_Mail_Prop_Result& default_instance();

  void Swap(Z2M_Take_Mail_Prop_Result* other);

  // implements Message ----------------------------------------------

  Z2M_Take_Mail_Prop_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Z2M_Take_Mail_Prop_Result& from);
  void MergeFrom(const Z2M_Take_Mail_Prop_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // required int32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAIL.Z2M_Take_Mail_Prop_Result)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static Z2M_Take_Mail_Prop_Result* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Delete_Mail_Req : public ::google::protobuf::Message {
 public:
  C2S_Delete_Mail_Req();
  virtual ~C2S_Delete_Mail_Req();

  C2S_Delete_Mail_Req(const C2S_Delete_Mail_Req& from);

  inline C2S_Delete_Mail_Req& operator=(const C2S_Delete_Mail_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Delete_Mail_Req& default_instance();

  void Swap(C2S_Delete_Mail_Req* other);

  // implements Message ----------------------------------------------

  C2S_Delete_Mail_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Delete_Mail_Req& from);
  void MergeFrom(const C2S_Delete_Mail_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAIL.C2S_Delete_Mail_Req)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static C2S_Delete_Mail_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Delete_Mail_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Delete_Mail_Rsp();
  virtual ~S2C_Delete_Mail_Rsp();

  S2C_Delete_Mail_Rsp(const S2C_Delete_Mail_Rsp& from);

  inline S2C_Delete_Mail_Rsp& operator=(const S2C_Delete_Mail_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Delete_Mail_Rsp& default_instance();

  void Swap(S2C_Delete_Mail_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Delete_Mail_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Delete_Mail_Rsp& from);
  void MergeFrom(const S2C_Delete_Mail_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // required uint32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MAIL.S2C_Delete_Mail_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static S2C_Delete_Mail_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Send_Mail_Req : public ::google::protobuf::Message {
 public:
  C2S_Send_Mail_Req();
  virtual ~C2S_Send_Mail_Req();

  C2S_Send_Mail_Req(const C2S_Send_Mail_Req& from);

  inline C2S_Send_Mail_Req& operator=(const C2S_Send_Mail_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Send_Mail_Req& default_instance();

  void Swap(C2S_Send_Mail_Req* other);

  // implements Message ----------------------------------------------

  C2S_Send_Mail_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Send_Mail_Req& from);
  void MergeFrom(const C2S_Send_Mail_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 receiver = 1;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline ::google::protobuf::uint32 receiver() const;
  inline void set_receiver(::google::protobuf::uint32 value);

  // required bytes context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const void* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // @@protoc_insertion_point(class_scope:MAIL.C2S_Send_Mail_Req)
 private:
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* context_;
  ::google::protobuf::uint32 receiver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static C2S_Send_Mail_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Send_Mail_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Send_Mail_Rsp();
  virtual ~S2C_Send_Mail_Rsp();

  S2C_Send_Mail_Rsp(const S2C_Send_Mail_Rsp& from);

  inline S2C_Send_Mail_Rsp& operator=(const S2C_Send_Mail_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Send_Mail_Rsp& default_instance();

  void Swap(S2C_Send_Mail_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Send_Mail_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Send_Mail_Rsp& from);
  void MergeFrom(const S2C_Send_Mail_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAIL.S2C_Send_Mail_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static S2C_Send_Mail_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Notify_New_Mail : public ::google::protobuf::Message {
 public:
  S2C_Notify_New_Mail();
  virtual ~S2C_Notify_New_Mail();

  S2C_Notify_New_Mail(const S2C_Notify_New_Mail& from);

  inline S2C_Notify_New_Mail& operator=(const S2C_Notify_New_Mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Notify_New_Mail& default_instance();

  void Swap(S2C_Notify_New_Mail* other);

  // implements Message ----------------------------------------------

  S2C_Notify_New_Mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Notify_New_Mail& from);
  void MergeFrom(const S2C_Notify_New_Mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 new_mail_count = 2;
  inline bool has_new_mail_count() const;
  inline void clear_new_mail_count();
  static const int kNewMailCountFieldNumber = 2;
  inline ::google::protobuf::uint32 new_mail_count() const;
  inline void set_new_mail_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MAIL.S2C_Notify_New_Mail)
 private:
  inline void set_has_new_mail_count();
  inline void clear_has_new_mail_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 new_mail_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static S2C_Notify_New_Mail* default_instance_;
};
// -------------------------------------------------------------------

class Z2M_Player_Init_Mail_Box : public ::google::protobuf::Message {
 public:
  Z2M_Player_Init_Mail_Box();
  virtual ~Z2M_Player_Init_Mail_Box();

  Z2M_Player_Init_Mail_Box(const Z2M_Player_Init_Mail_Box& from);

  inline Z2M_Player_Init_Mail_Box& operator=(const Z2M_Player_Init_Mail_Box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z2M_Player_Init_Mail_Box& default_instance();

  void Swap(Z2M_Player_Init_Mail_Box* other);

  // implements Message ----------------------------------------------

  Z2M_Player_Init_Mail_Box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Z2M_Player_Init_Mail_Box& from);
  void MergeFrom(const Z2M_Player_Init_Mail_Box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required bytes nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 head_icon = 3;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 3;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional string custom_head = 4;
  inline bool has_custom_head() const;
  inline void clear_custom_head();
  static const int kCustomHeadFieldNumber = 4;
  inline const ::std::string& custom_head() const;
  inline void set_custom_head(const ::std::string& value);
  inline void set_custom_head(const char* value);
  inline void set_custom_head(const char* value, size_t size);
  inline ::std::string* mutable_custom_head();
  inline ::std::string* release_custom_head();
  inline void set_allocated_custom_head(::std::string* custom_head);

  // @@protoc_insertion_point(class_scope:MAIL.Z2M_Player_Init_Mail_Box)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_custom_head();
  inline void clear_has_custom_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 head_icon_;
  ::std::string* custom_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static Z2M_Player_Init_Mail_Box* default_instance_;
};
// -------------------------------------------------------------------

class Z2M_Notify_User_Enter : public ::google::protobuf::Message {
 public:
  Z2M_Notify_User_Enter();
  virtual ~Z2M_Notify_User_Enter();

  Z2M_Notify_User_Enter(const Z2M_Notify_User_Enter& from);

  inline Z2M_Notify_User_Enter& operator=(const Z2M_Notify_User_Enter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z2M_Notify_User_Enter& default_instance();

  void Swap(Z2M_Notify_User_Enter* other);

  // implements Message ----------------------------------------------

  Z2M_Notify_User_Enter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Z2M_Notify_User_Enter& from);
  void MergeFrom(const Z2M_Notify_User_Enter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 head_icon = 3;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 3;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional string custom_head = 4;
  inline bool has_custom_head() const;
  inline void clear_custom_head();
  static const int kCustomHeadFieldNumber = 4;
  inline const ::std::string& custom_head() const;
  inline void set_custom_head(const ::std::string& value);
  inline void set_custom_head(const char* value);
  inline void set_custom_head(const char* value, size_t size);
  inline ::std::string* mutable_custom_head();
  inline ::std::string* release_custom_head();
  inline void set_allocated_custom_head(::std::string* custom_head);

  // @@protoc_insertion_point(class_scope:MAIL.Z2M_Notify_User_Enter)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_custom_head();
  inline void clear_has_custom_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 head_icon_;
  ::std::string* custom_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static Z2M_Notify_User_Enter* default_instance_;
};
// -------------------------------------------------------------------

class Z2M_Send_System_Mail_Req : public ::google::protobuf::Message {
 public:
  Z2M_Send_System_Mail_Req();
  virtual ~Z2M_Send_System_Mail_Req();

  Z2M_Send_System_Mail_Req(const Z2M_Send_System_Mail_Req& from);

  inline Z2M_Send_System_Mail_Req& operator=(const Z2M_Send_System_Mail_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z2M_Send_System_Mail_Req& default_instance();

  void Swap(Z2M_Send_System_Mail_Req* other);

  // implements Message ----------------------------------------------

  Z2M_Send_System_Mail_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Z2M_Send_System_Mail_Req& from);
  void MergeFrom(const Z2M_Send_System_Mail_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::uint64 serial() const;
  inline void set_serial(::google::protobuf::uint64 value);

  // required uint32 receiver = 2;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 2;
  inline ::google::protobuf::uint32 receiver() const;
  inline void set_receiver(::google::protobuf::uint32 value);

  // optional bytes context = 3;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 3;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const void* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // optional uint32 template_id = 4;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 4;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional bytes sender_name = 5;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 5;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const void* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // repeated .DBCACHE.Prop attachments = 6;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 6;
  inline const ::DBCACHE::Prop& attachments(int index) const;
  inline ::DBCACHE::Prop* mutable_attachments(int index);
  inline ::DBCACHE::Prop* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:MAIL.Z2M_Send_System_Mail_Req)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 serial_;
  ::std::string* context_;
  ::google::protobuf::uint32 receiver_;
  ::google::protobuf::uint32 template_id_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > attachments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static Z2M_Send_System_Mail_Req* default_instance_;
};
// -------------------------------------------------------------------

class M2Z_Send_System_Mail_Rsp : public ::google::protobuf::Message {
 public:
  M2Z_Send_System_Mail_Rsp();
  virtual ~M2Z_Send_System_Mail_Rsp();

  M2Z_Send_System_Mail_Rsp(const M2Z_Send_System_Mail_Rsp& from);

  inline M2Z_Send_System_Mail_Rsp& operator=(const M2Z_Send_System_Mail_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M2Z_Send_System_Mail_Rsp& default_instance();

  void Swap(M2Z_Send_System_Mail_Rsp* other);

  // implements Message ----------------------------------------------

  M2Z_Send_System_Mail_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M2Z_Send_System_Mail_Rsp& from);
  void MergeFrom(const M2Z_Send_System_Mail_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // required uint64 serial = 2;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::uint64 serial() const;
  inline void set_serial(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MAIL.M2Z_Send_System_Mail_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_serial();
  inline void clear_has_serial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 serial_;
  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static M2Z_Send_System_Mail_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Z2M_Broadcast_System_Mail_Req : public ::google::protobuf::Message {
 public:
  Z2M_Broadcast_System_Mail_Req();
  virtual ~Z2M_Broadcast_System_Mail_Req();

  Z2M_Broadcast_System_Mail_Req(const Z2M_Broadcast_System_Mail_Req& from);

  inline Z2M_Broadcast_System_Mail_Req& operator=(const Z2M_Broadcast_System_Mail_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z2M_Broadcast_System_Mail_Req& default_instance();

  void Swap(Z2M_Broadcast_System_Mail_Req* other);

  // implements Message ----------------------------------------------

  Z2M_Broadcast_System_Mail_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Z2M_Broadcast_System_Mail_Req& from);
  void MergeFrom(const Z2M_Broadcast_System_Mail_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 receiver = 1;
  inline int receiver_size() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline ::google::protobuf::uint32 receiver(int index) const;
  inline void set_receiver(int index, ::google::protobuf::uint32 value);
  inline void add_receiver(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receiver() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receiver();

  // optional bytes context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const void* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // optional uint32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // repeated .DBCACHE.Prop attachments = 5;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 5;
  inline const ::DBCACHE::Prop& attachments(int index) const;
  inline ::DBCACHE::Prop* mutable_attachments(int index);
  inline ::DBCACHE::Prop* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:MAIL.Z2M_Broadcast_System_Mail_Req)
 private:
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receiver_;
  ::std::string* context_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > attachments_;
  ::google::protobuf::uint32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static Z2M_Broadcast_System_Mail_Req* default_instance_;
};
// -------------------------------------------------------------------

class M2Z_Broadcast_System_Mail_Rsp : public ::google::protobuf::Message {
 public:
  M2Z_Broadcast_System_Mail_Rsp();
  virtual ~M2Z_Broadcast_System_Mail_Rsp();

  M2Z_Broadcast_System_Mail_Rsp(const M2Z_Broadcast_System_Mail_Rsp& from);

  inline M2Z_Broadcast_System_Mail_Rsp& operator=(const M2Z_Broadcast_System_Mail_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M2Z_Broadcast_System_Mail_Rsp& default_instance();

  void Swap(M2Z_Broadcast_System_Mail_Rsp* other);

  // implements Message ----------------------------------------------

  M2Z_Broadcast_System_Mail_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M2Z_Broadcast_System_Mail_Rsp& from);
  void MergeFrom(const M2Z_Broadcast_System_Mail_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAIL.M2Z_Broadcast_System_Mail_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static M2Z_Broadcast_System_Mail_Rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// MailInfo

// required uint32 id = 1;
inline bool MailInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MailInfo::id() const {
  return id_;
}
inline void MailInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 type = 2;
inline bool MailInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 MailInfo::type() const {
  return type_;
}
inline void MailInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 sender = 3;
inline bool MailInfo::has_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailInfo::set_has_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailInfo::clear_has_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailInfo::clear_sender() {
  sender_ = 0u;
  clear_has_sender();
}
inline ::google::protobuf::uint32 MailInfo::sender() const {
  return sender_;
}
inline void MailInfo::set_sender(::google::protobuf::uint32 value) {
  set_has_sender();
  sender_ = value;
}

// optional bytes sender_nickname = 4;
inline bool MailInfo::has_sender_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailInfo::set_has_sender_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailInfo::clear_has_sender_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailInfo::clear_sender_nickname() {
  if (sender_nickname_ != &::google::protobuf::internal::kEmptyString) {
    sender_nickname_->clear();
  }
  clear_has_sender_nickname();
}
inline const ::std::string& MailInfo::sender_nickname() const {
  return *sender_nickname_;
}
inline void MailInfo::set_sender_nickname(const ::std::string& value) {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  sender_nickname_->assign(value);
}
inline void MailInfo::set_sender_nickname(const char* value) {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  sender_nickname_->assign(value);
}
inline void MailInfo::set_sender_nickname(const void* value, size_t size) {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  sender_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_sender_nickname() {
  set_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    sender_nickname_ = new ::std::string;
  }
  return sender_nickname_;
}
inline ::std::string* MailInfo::release_sender_nickname() {
  clear_has_sender_nickname();
  if (sender_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_nickname_;
    sender_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_sender_nickname(::std::string* sender_nickname) {
  if (sender_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_nickname_;
  }
  if (sender_nickname) {
    set_has_sender_nickname();
    sender_nickname_ = sender_nickname;
  } else {
    clear_has_sender_nickname();
    sender_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sender_head = 5;
inline bool MailInfo::has_sender_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailInfo::set_has_sender_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailInfo::clear_has_sender_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailInfo::clear_sender_head() {
  sender_head_ = 0u;
  clear_has_sender_head();
}
inline ::google::protobuf::uint32 MailInfo::sender_head() const {
  return sender_head_;
}
inline void MailInfo::set_sender_head(::google::protobuf::uint32 value) {
  set_has_sender_head();
  sender_head_ = value;
}

// optional string sender_custom_head = 6;
inline bool MailInfo::has_sender_custom_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailInfo::set_has_sender_custom_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailInfo::clear_has_sender_custom_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailInfo::clear_sender_custom_head() {
  if (sender_custom_head_ != &::google::protobuf::internal::kEmptyString) {
    sender_custom_head_->clear();
  }
  clear_has_sender_custom_head();
}
inline const ::std::string& MailInfo::sender_custom_head() const {
  return *sender_custom_head_;
}
inline void MailInfo::set_sender_custom_head(const ::std::string& value) {
  set_has_sender_custom_head();
  if (sender_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    sender_custom_head_ = new ::std::string;
  }
  sender_custom_head_->assign(value);
}
inline void MailInfo::set_sender_custom_head(const char* value) {
  set_has_sender_custom_head();
  if (sender_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    sender_custom_head_ = new ::std::string;
  }
  sender_custom_head_->assign(value);
}
inline void MailInfo::set_sender_custom_head(const char* value, size_t size) {
  set_has_sender_custom_head();
  if (sender_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    sender_custom_head_ = new ::std::string;
  }
  sender_custom_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_sender_custom_head() {
  set_has_sender_custom_head();
  if (sender_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    sender_custom_head_ = new ::std::string;
  }
  return sender_custom_head_;
}
inline ::std::string* MailInfo::release_sender_custom_head() {
  clear_has_sender_custom_head();
  if (sender_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_custom_head_;
    sender_custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_sender_custom_head(::std::string* sender_custom_head) {
  if (sender_custom_head_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_custom_head_;
  }
  if (sender_custom_head) {
    set_has_sender_custom_head();
    sender_custom_head_ = sender_custom_head;
  } else {
    clear_has_sender_custom_head();
    sender_custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 receiver = 7;
inline bool MailInfo::has_receiver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailInfo::set_has_receiver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailInfo::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailInfo::clear_receiver() {
  receiver_ = 0u;
  clear_has_receiver();
}
inline ::google::protobuf::uint32 MailInfo::receiver() const {
  return receiver_;
}
inline void MailInfo::set_receiver(::google::protobuf::uint32 value) {
  set_has_receiver();
  receiver_ = value;
}

// required uint32 checked = 8;
inline bool MailInfo::has_checked() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailInfo::set_has_checked() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailInfo::clear_has_checked() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailInfo::clear_checked() {
  checked_ = 0u;
  clear_has_checked();
}
inline ::google::protobuf::uint32 MailInfo::checked() const {
  return checked_;
}
inline void MailInfo::set_checked(::google::protobuf::uint32 value) {
  set_has_checked();
  checked_ = value;
}

// required uint32 state = 9;
inline bool MailInfo::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailInfo::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailInfo::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 MailInfo::state() const {
  return state_;
}
inline void MailInfo::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional bytes subject = 10;
inline bool MailInfo::has_subject() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailInfo::set_has_subject() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailInfo::clear_has_subject() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailInfo::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& MailInfo::subject() const {
  return *subject_;
}
inline void MailInfo::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void MailInfo::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void MailInfo::set_subject(const void* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* MailInfo::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes context = 11;
inline bool MailInfo::has_context() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MailInfo::set_has_context() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MailInfo::clear_has_context() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MailInfo::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& MailInfo::context() const {
  return *context_;
}
inline void MailInfo::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void MailInfo::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void MailInfo::set_context(const void* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* MailInfo::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 template_id = 12;
inline bool MailInfo::has_template_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MailInfo::set_has_template_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MailInfo::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MailInfo::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 MailInfo::template_id() const {
  return template_id_;
}
inline void MailInfo::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint64 expire_time = 13;
inline bool MailInfo::has_expire_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MailInfo::set_has_expire_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MailInfo::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MailInfo::clear_expire_time() {
  expire_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::uint64 MailInfo::expire_time() const {
  return expire_time_;
}
inline void MailInfo::set_expire_time(::google::protobuf::uint64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional uint64 deliver_time = 14;
inline bool MailInfo::has_deliver_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MailInfo::set_has_deliver_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MailInfo::clear_has_deliver_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MailInfo::clear_deliver_time() {
  deliver_time_ = GOOGLE_ULONGLONG(0);
  clear_has_deliver_time();
}
inline ::google::protobuf::uint64 MailInfo::deliver_time() const {
  return deliver_time_;
}
inline void MailInfo::set_deliver_time(::google::protobuf::uint64 value) {
  set_has_deliver_time();
  deliver_time_ = value;
}

// required uint32 create_time = 15;
inline bool MailInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MailInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MailInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MailInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 MailInfo::create_time() const {
  return create_time_;
}
inline void MailInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 prop_flag = 16;
inline bool MailInfo::has_prop_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MailInfo::set_has_prop_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MailInfo::clear_has_prop_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MailInfo::clear_prop_flag() {
  prop_flag_ = 0u;
  clear_has_prop_flag();
}
inline ::google::protobuf::uint32 MailInfo::prop_flag() const {
  return prop_flag_;
}
inline void MailInfo::set_prop_flag(::google::protobuf::uint32 value) {
  set_has_prop_flag();
  prop_flag_ = value;
}

// repeated .DBCACHE.Prop attachments = 17;
inline int MailInfo::attachments_size() const {
  return attachments_.size();
}
inline void MailInfo::clear_attachments() {
  attachments_.Clear();
}
inline const ::DBCACHE::Prop& MailInfo::attachments(int index) const {
  return attachments_.Get(index);
}
inline ::DBCACHE::Prop* MailInfo::mutable_attachments(int index) {
  return attachments_.Mutable(index);
}
inline ::DBCACHE::Prop* MailInfo::add_attachments() {
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
MailInfo::attachments() const {
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
MailInfo::mutable_attachments() {
  return &attachments_;
}

// -------------------------------------------------------------------

// UserMailList

// required uint32 user_id = 1;
inline bool UserMailList::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMailList::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMailList::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMailList::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserMailList::user_id() const {
  return user_id_;
}
inline void UserMailList::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint32 user_head = 2;
inline bool UserMailList::has_user_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMailList::set_has_user_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMailList::clear_has_user_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMailList::clear_user_head() {
  user_head_ = 0u;
  clear_has_user_head();
}
inline ::google::protobuf::uint32 UserMailList::user_head() const {
  return user_head_;
}
inline void UserMailList::set_user_head(::google::protobuf::uint32 value) {
  set_has_user_head();
  user_head_ = value;
}

// optional string user_custom_head = 3;
inline bool UserMailList::has_user_custom_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMailList::set_has_user_custom_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMailList::clear_has_user_custom_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMailList::clear_user_custom_head() {
  if (user_custom_head_ != &::google::protobuf::internal::kEmptyString) {
    user_custom_head_->clear();
  }
  clear_has_user_custom_head();
}
inline const ::std::string& UserMailList::user_custom_head() const {
  return *user_custom_head_;
}
inline void UserMailList::set_user_custom_head(const ::std::string& value) {
  set_has_user_custom_head();
  if (user_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    user_custom_head_ = new ::std::string;
  }
  user_custom_head_->assign(value);
}
inline void UserMailList::set_user_custom_head(const char* value) {
  set_has_user_custom_head();
  if (user_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    user_custom_head_ = new ::std::string;
  }
  user_custom_head_->assign(value);
}
inline void UserMailList::set_user_custom_head(const char* value, size_t size) {
  set_has_user_custom_head();
  if (user_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    user_custom_head_ = new ::std::string;
  }
  user_custom_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserMailList::mutable_user_custom_head() {
  set_has_user_custom_head();
  if (user_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    user_custom_head_ = new ::std::string;
  }
  return user_custom_head_;
}
inline ::std::string* UserMailList::release_user_custom_head() {
  clear_has_user_custom_head();
  if (user_custom_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_custom_head_;
    user_custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserMailList::set_allocated_user_custom_head(::std::string* user_custom_head) {
  if (user_custom_head_ != &::google::protobuf::internal::kEmptyString) {
    delete user_custom_head_;
  }
  if (user_custom_head) {
    set_has_user_custom_head();
    user_custom_head_ = user_custom_head;
  } else {
    clear_has_user_custom_head();
    user_custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes user_name = 4;
inline bool UserMailList::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMailList::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMailList::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMailList::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& UserMailList::user_name() const {
  return *user_name_;
}
inline void UserMailList::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserMailList::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserMailList::set_user_name(const void* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserMailList::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* UserMailList::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserMailList::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_flag = 5;
inline bool UserMailList::has_user_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMailList::set_has_user_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMailList::clear_has_user_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMailList::clear_user_flag() {
  user_flag_ = GOOGLE_ULONGLONG(0);
  clear_has_user_flag();
}
inline ::google::protobuf::uint64 UserMailList::user_flag() const {
  return user_flag_;
}
inline void UserMailList::set_user_flag(::google::protobuf::uint64 value) {
  set_has_user_flag();
  user_flag_ = value;
}

// optional uint32 max_mail_id = 6;
inline bool UserMailList::has_max_mail_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMailList::set_has_max_mail_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMailList::clear_has_max_mail_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMailList::clear_max_mail_id() {
  max_mail_id_ = 0u;
  clear_has_max_mail_id();
}
inline ::google::protobuf::uint32 UserMailList::max_mail_id() const {
  return max_mail_id_;
}
inline void UserMailList::set_max_mail_id(::google::protobuf::uint32 value) {
  set_has_max_mail_id();
  max_mail_id_ = value;
}

// optional uint32 unread_mails = 7;
inline bool UserMailList::has_unread_mails() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserMailList::set_has_unread_mails() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserMailList::clear_has_unread_mails() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserMailList::clear_unread_mails() {
  unread_mails_ = 0u;
  clear_has_unread_mails();
}
inline ::google::protobuf::uint32 UserMailList::unread_mails() const {
  return unread_mails_;
}
inline void UserMailList::set_unread_mails(::google::protobuf::uint32 value) {
  set_has_unread_mails();
  unread_mails_ = value;
}

// repeated .MAIL.MailInfo mail = 8;
inline int UserMailList::mail_size() const {
  return mail_.size();
}
inline void UserMailList::clear_mail() {
  mail_.Clear();
}
inline const ::MAIL::MailInfo& UserMailList::mail(int index) const {
  return mail_.Get(index);
}
inline ::MAIL::MailInfo* UserMailList::mutable_mail(int index) {
  return mail_.Mutable(index);
}
inline ::MAIL::MailInfo* UserMailList::add_mail() {
  return mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >&
UserMailList::mail() const {
  return mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >*
UserMailList::mutable_mail() {
  return &mail_;
}

// -------------------------------------------------------------------

// C2S_Load_Mail_List_Req

// required int32 load_type = 1;
inline bool C2S_Load_Mail_List_Req::has_load_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Load_Mail_List_Req::set_has_load_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Load_Mail_List_Req::clear_has_load_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Load_Mail_List_Req::clear_load_type() {
  load_type_ = 0;
  clear_has_load_type();
}
inline ::google::protobuf::int32 C2S_Load_Mail_List_Req::load_type() const {
  return load_type_;
}
inline void C2S_Load_Mail_List_Req::set_load_type(::google::protobuf::int32 value) {
  set_has_load_type();
  load_type_ = value;
}

// optional uint32 start_index = 2;
inline bool C2S_Load_Mail_List_Req::has_start_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_Load_Mail_List_Req::set_has_start_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_Load_Mail_List_Req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_Load_Mail_List_Req::clear_start_index() {
  start_index_ = 0u;
  clear_has_start_index();
}
inline ::google::protobuf::uint32 C2S_Load_Mail_List_Req::start_index() const {
  return start_index_;
}
inline void C2S_Load_Mail_List_Req::set_start_index(::google::protobuf::uint32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional uint32 req_num = 3;
inline bool C2S_Load_Mail_List_Req::has_req_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S_Load_Mail_List_Req::set_has_req_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S_Load_Mail_List_Req::clear_has_req_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2S_Load_Mail_List_Req::clear_req_num() {
  req_num_ = 0u;
  clear_has_req_num();
}
inline ::google::protobuf::uint32 C2S_Load_Mail_List_Req::req_num() const {
  return req_num_;
}
inline void C2S_Load_Mail_List_Req::set_req_num(::google::protobuf::uint32 value) {
  set_has_req_num();
  req_num_ = value;
}

// -------------------------------------------------------------------

// S2C_Load_Mail_List_Rsp

// required int32 ret_code = 1;
inline bool S2C_Load_Mail_List_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Load_Mail_List_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Load_Mail_List_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Load_Mail_List_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Load_Mail_List_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Load_Mail_List_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional uint32 unread_count = 2;
inline bool S2C_Load_Mail_List_Rsp::has_unread_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Load_Mail_List_Rsp::set_has_unread_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Load_Mail_List_Rsp::clear_has_unread_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Load_Mail_List_Rsp::clear_unread_count() {
  unread_count_ = 0u;
  clear_has_unread_count();
}
inline ::google::protobuf::uint32 S2C_Load_Mail_List_Rsp::unread_count() const {
  return unread_count_;
}
inline void S2C_Load_Mail_List_Rsp::set_unread_count(::google::protobuf::uint32 value) {
  set_has_unread_count();
  unread_count_ = value;
}

// optional uint32 space_left = 3;
inline bool S2C_Load_Mail_List_Rsp::has_space_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_Load_Mail_List_Rsp::set_has_space_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_Load_Mail_List_Rsp::clear_has_space_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_Load_Mail_List_Rsp::clear_space_left() {
  space_left_ = 0u;
  clear_has_space_left();
}
inline ::google::protobuf::uint32 S2C_Load_Mail_List_Rsp::space_left() const {
  return space_left_;
}
inline void S2C_Load_Mail_List_Rsp::set_space_left(::google::protobuf::uint32 value) {
  set_has_space_left();
  space_left_ = value;
}

// repeated .MAIL.MailInfo mails = 4;
inline int S2C_Load_Mail_List_Rsp::mails_size() const {
  return mails_.size();
}
inline void S2C_Load_Mail_List_Rsp::clear_mails() {
  mails_.Clear();
}
inline const ::MAIL::MailInfo& S2C_Load_Mail_List_Rsp::mails(int index) const {
  return mails_.Get(index);
}
inline ::MAIL::MailInfo* S2C_Load_Mail_List_Rsp::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::MAIL::MailInfo* S2C_Load_Mail_List_Rsp::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >&
S2C_Load_Mail_List_Rsp::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::MAIL::MailInfo >*
S2C_Load_Mail_List_Rsp::mutable_mails() {
  return &mails_;
}

// -------------------------------------------------------------------

// C2S_Read_Mail_Req

// required int32 mail_id = 1;
inline bool C2S_Read_Mail_Req::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Read_Mail_Req::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Read_Mail_Req::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Read_Mail_Req::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 C2S_Read_Mail_Req::mail_id() const {
  return mail_id_;
}
inline void C2S_Read_Mail_Req::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// S2C_Read_Mail_Rsp

// required int32 ret_code = 1;
inline bool S2C_Read_Mail_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Read_Mail_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Read_Mail_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Read_Mail_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Read_Mail_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Read_Mail_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// required uint32 mail_id = 2;
inline bool S2C_Read_Mail_Rsp::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Read_Mail_Rsp::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Read_Mail_Rsp::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Read_Mail_Rsp::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 S2C_Read_Mail_Rsp::mail_id() const {
  return mail_id_;
}
inline void S2C_Read_Mail_Rsp::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional bytes context = 3;
inline bool S2C_Read_Mail_Rsp::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_Read_Mail_Rsp::set_has_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_Read_Mail_Rsp::clear_has_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_Read_Mail_Rsp::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& S2C_Read_Mail_Rsp::context() const {
  return *context_;
}
inline void S2C_Read_Mail_Rsp::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void S2C_Read_Mail_Rsp::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void S2C_Read_Mail_Rsp::set_context(const void* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2C_Read_Mail_Rsp::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* S2C_Read_Mail_Rsp::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2C_Read_Mail_Rsp::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2S_Take_Mail_Prop_Req

// required int32 mail_id = 1;
inline bool C2S_Take_Mail_Prop_Req::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Take_Mail_Prop_Req::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Take_Mail_Prop_Req::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Take_Mail_Prop_Req::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 C2S_Take_Mail_Prop_Req::mail_id() const {
  return mail_id_;
}
inline void C2S_Take_Mail_Prop_Req::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// S2C_Take_Mail_Prop_Rsp

// required int32 ret_code = 1;
inline bool S2C_Take_Mail_Prop_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Take_Mail_Prop_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Take_Mail_Prop_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Take_Mail_Prop_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Take_Mail_Prop_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Take_Mail_Prop_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// required int32 mail_id = 2;
inline bool S2C_Take_Mail_Prop_Rsp::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Take_Mail_Prop_Rsp::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Take_Mail_Prop_Rsp::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Take_Mail_Prop_Rsp::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 S2C_Take_Mail_Prop_Rsp::mail_id() const {
  return mail_id_;
}
inline void S2C_Take_Mail_Prop_Rsp::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// repeated .DBCACHE.Prop attachments = 3;
inline int S2C_Take_Mail_Prop_Rsp::attachments_size() const {
  return attachments_.size();
}
inline void S2C_Take_Mail_Prop_Rsp::clear_attachments() {
  attachments_.Clear();
}
inline const ::DBCACHE::Prop& S2C_Take_Mail_Prop_Rsp::attachments(int index) const {
  return attachments_.Get(index);
}
inline ::DBCACHE::Prop* S2C_Take_Mail_Prop_Rsp::mutable_attachments(int index) {
  return attachments_.Mutable(index);
}
inline ::DBCACHE::Prop* S2C_Take_Mail_Prop_Rsp::add_attachments() {
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
S2C_Take_Mail_Prop_Rsp::attachments() const {
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
S2C_Take_Mail_Prop_Rsp::mutable_attachments() {
  return &attachments_;
}

// -------------------------------------------------------------------

// Z2M_Take_Mail_Prop_Result

// required int32 ret_code = 1;
inline bool Z2M_Take_Mail_Prop_Result::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Z2M_Take_Mail_Prop_Result::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Z2M_Take_Mail_Prop_Result::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Z2M_Take_Mail_Prop_Result::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 Z2M_Take_Mail_Prop_Result::ret_code() const {
  return ret_code_;
}
inline void Z2M_Take_Mail_Prop_Result::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// required int32 mail_id = 2;
inline bool Z2M_Take_Mail_Prop_Result::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Z2M_Take_Mail_Prop_Result::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Z2M_Take_Mail_Prop_Result::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Z2M_Take_Mail_Prop_Result::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 Z2M_Take_Mail_Prop_Result::mail_id() const {
  return mail_id_;
}
inline void Z2M_Take_Mail_Prop_Result::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// C2S_Delete_Mail_Req

// required int32 mail_id = 1;
inline bool C2S_Delete_Mail_Req::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Delete_Mail_Req::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Delete_Mail_Req::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Delete_Mail_Req::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 C2S_Delete_Mail_Req::mail_id() const {
  return mail_id_;
}
inline void C2S_Delete_Mail_Req::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// S2C_Delete_Mail_Rsp

// required int32 ret_code = 1;
inline bool S2C_Delete_Mail_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Delete_Mail_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Delete_Mail_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Delete_Mail_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Delete_Mail_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Delete_Mail_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// required uint32 mail_id = 2;
inline bool S2C_Delete_Mail_Rsp::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Delete_Mail_Rsp::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Delete_Mail_Rsp::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Delete_Mail_Rsp::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 S2C_Delete_Mail_Rsp::mail_id() const {
  return mail_id_;
}
inline void S2C_Delete_Mail_Rsp::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// C2S_Send_Mail_Req

// required uint32 receiver = 1;
inline bool C2S_Send_Mail_Req::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Send_Mail_Req::set_has_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Send_Mail_Req::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Send_Mail_Req::clear_receiver() {
  receiver_ = 0u;
  clear_has_receiver();
}
inline ::google::protobuf::uint32 C2S_Send_Mail_Req::receiver() const {
  return receiver_;
}
inline void C2S_Send_Mail_Req::set_receiver(::google::protobuf::uint32 value) {
  set_has_receiver();
  receiver_ = value;
}

// required bytes context = 2;
inline bool C2S_Send_Mail_Req::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_Send_Mail_Req::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_Send_Mail_Req::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_Send_Mail_Req::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& C2S_Send_Mail_Req::context() const {
  return *context_;
}
inline void C2S_Send_Mail_Req::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void C2S_Send_Mail_Req::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void C2S_Send_Mail_Req::set_context(const void* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_Send_Mail_Req::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* C2S_Send_Mail_Req::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_Send_Mail_Req::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_Send_Mail_Rsp

// required int32 ret_code = 1;
inline bool S2C_Send_Mail_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Send_Mail_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Send_Mail_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Send_Mail_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Send_Mail_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Send_Mail_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// S2C_Notify_New_Mail

// required uint32 new_mail_count = 2;
inline bool S2C_Notify_New_Mail::has_new_mail_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Notify_New_Mail::set_has_new_mail_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Notify_New_Mail::clear_has_new_mail_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Notify_New_Mail::clear_new_mail_count() {
  new_mail_count_ = 0u;
  clear_has_new_mail_count();
}
inline ::google::protobuf::uint32 S2C_Notify_New_Mail::new_mail_count() const {
  return new_mail_count_;
}
inline void S2C_Notify_New_Mail::set_new_mail_count(::google::protobuf::uint32 value) {
  set_has_new_mail_count();
  new_mail_count_ = value;
}

// -------------------------------------------------------------------

// Z2M_Player_Init_Mail_Box

// required uint32 user_id = 1;
inline bool Z2M_Player_Init_Mail_Box::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Z2M_Player_Init_Mail_Box::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Z2M_Player_Init_Mail_Box::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Z2M_Player_Init_Mail_Box::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Z2M_Player_Init_Mail_Box::user_id() const {
  return user_id_;
}
inline void Z2M_Player_Init_Mail_Box::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required bytes nickname = 2;
inline bool Z2M_Player_Init_Mail_Box::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Z2M_Player_Init_Mail_Box::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Z2M_Player_Init_Mail_Box::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Z2M_Player_Init_Mail_Box::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Z2M_Player_Init_Mail_Box::nickname() const {
  return *nickname_;
}
inline void Z2M_Player_Init_Mail_Box::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Z2M_Player_Init_Mail_Box::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Z2M_Player_Init_Mail_Box::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Player_Init_Mail_Box::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Z2M_Player_Init_Mail_Box::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Player_Init_Mail_Box::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon = 3;
inline bool Z2M_Player_Init_Mail_Box::has_head_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Z2M_Player_Init_Mail_Box::set_has_head_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Z2M_Player_Init_Mail_Box::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Z2M_Player_Init_Mail_Box::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 Z2M_Player_Init_Mail_Box::head_icon() const {
  return head_icon_;
}
inline void Z2M_Player_Init_Mail_Box::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional string custom_head = 4;
inline bool Z2M_Player_Init_Mail_Box::has_custom_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Z2M_Player_Init_Mail_Box::set_has_custom_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Z2M_Player_Init_Mail_Box::clear_has_custom_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Z2M_Player_Init_Mail_Box::clear_custom_head() {
  if (custom_head_ != &::google::protobuf::internal::kEmptyString) {
    custom_head_->clear();
  }
  clear_has_custom_head();
}
inline const ::std::string& Z2M_Player_Init_Mail_Box::custom_head() const {
  return *custom_head_;
}
inline void Z2M_Player_Init_Mail_Box::set_custom_head(const ::std::string& value) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(value);
}
inline void Z2M_Player_Init_Mail_Box::set_custom_head(const char* value) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(value);
}
inline void Z2M_Player_Init_Mail_Box::set_custom_head(const char* value, size_t size) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Player_Init_Mail_Box::mutable_custom_head() {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  return custom_head_;
}
inline ::std::string* Z2M_Player_Init_Mail_Box::release_custom_head() {
  clear_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_head_;
    custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Player_Init_Mail_Box::set_allocated_custom_head(::std::string* custom_head) {
  if (custom_head_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_head_;
  }
  if (custom_head) {
    set_has_custom_head();
    custom_head_ = custom_head;
  } else {
    clear_has_custom_head();
    custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Z2M_Notify_User_Enter

// required uint32 user_id = 1;
inline bool Z2M_Notify_User_Enter::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Z2M_Notify_User_Enter::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Z2M_Notify_User_Enter::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Z2M_Notify_User_Enter::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Z2M_Notify_User_Enter::user_id() const {
  return user_id_;
}
inline void Z2M_Notify_User_Enter::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bytes nickname = 2;
inline bool Z2M_Notify_User_Enter::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Z2M_Notify_User_Enter::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Z2M_Notify_User_Enter::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Z2M_Notify_User_Enter::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Z2M_Notify_User_Enter::nickname() const {
  return *nickname_;
}
inline void Z2M_Notify_User_Enter::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Z2M_Notify_User_Enter::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Z2M_Notify_User_Enter::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Notify_User_Enter::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Z2M_Notify_User_Enter::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Notify_User_Enter::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon = 3;
inline bool Z2M_Notify_User_Enter::has_head_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Z2M_Notify_User_Enter::set_has_head_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Z2M_Notify_User_Enter::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Z2M_Notify_User_Enter::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 Z2M_Notify_User_Enter::head_icon() const {
  return head_icon_;
}
inline void Z2M_Notify_User_Enter::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional string custom_head = 4;
inline bool Z2M_Notify_User_Enter::has_custom_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Z2M_Notify_User_Enter::set_has_custom_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Z2M_Notify_User_Enter::clear_has_custom_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Z2M_Notify_User_Enter::clear_custom_head() {
  if (custom_head_ != &::google::protobuf::internal::kEmptyString) {
    custom_head_->clear();
  }
  clear_has_custom_head();
}
inline const ::std::string& Z2M_Notify_User_Enter::custom_head() const {
  return *custom_head_;
}
inline void Z2M_Notify_User_Enter::set_custom_head(const ::std::string& value) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(value);
}
inline void Z2M_Notify_User_Enter::set_custom_head(const char* value) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(value);
}
inline void Z2M_Notify_User_Enter::set_custom_head(const char* value, size_t size) {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  custom_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Notify_User_Enter::mutable_custom_head() {
  set_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    custom_head_ = new ::std::string;
  }
  return custom_head_;
}
inline ::std::string* Z2M_Notify_User_Enter::release_custom_head() {
  clear_has_custom_head();
  if (custom_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_head_;
    custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Notify_User_Enter::set_allocated_custom_head(::std::string* custom_head) {
  if (custom_head_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_head_;
  }
  if (custom_head) {
    set_has_custom_head();
    custom_head_ = custom_head;
  } else {
    clear_has_custom_head();
    custom_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Z2M_Send_System_Mail_Req

// required uint64 serial = 1;
inline bool Z2M_Send_System_Mail_Req::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Z2M_Send_System_Mail_Req::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Z2M_Send_System_Mail_Req::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Z2M_Send_System_Mail_Req::clear_serial() {
  serial_ = GOOGLE_ULONGLONG(0);
  clear_has_serial();
}
inline ::google::protobuf::uint64 Z2M_Send_System_Mail_Req::serial() const {
  return serial_;
}
inline void Z2M_Send_System_Mail_Req::set_serial(::google::protobuf::uint64 value) {
  set_has_serial();
  serial_ = value;
}

// required uint32 receiver = 2;
inline bool Z2M_Send_System_Mail_Req::has_receiver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Z2M_Send_System_Mail_Req::set_has_receiver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Z2M_Send_System_Mail_Req::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Z2M_Send_System_Mail_Req::clear_receiver() {
  receiver_ = 0u;
  clear_has_receiver();
}
inline ::google::protobuf::uint32 Z2M_Send_System_Mail_Req::receiver() const {
  return receiver_;
}
inline void Z2M_Send_System_Mail_Req::set_receiver(::google::protobuf::uint32 value) {
  set_has_receiver();
  receiver_ = value;
}

// optional bytes context = 3;
inline bool Z2M_Send_System_Mail_Req::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Z2M_Send_System_Mail_Req::set_has_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Z2M_Send_System_Mail_Req::clear_has_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Z2M_Send_System_Mail_Req::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& Z2M_Send_System_Mail_Req::context() const {
  return *context_;
}
inline void Z2M_Send_System_Mail_Req::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void Z2M_Send_System_Mail_Req::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void Z2M_Send_System_Mail_Req::set_context(const void* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Send_System_Mail_Req::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* Z2M_Send_System_Mail_Req::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Send_System_Mail_Req::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 template_id = 4;
inline bool Z2M_Send_System_Mail_Req::has_template_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Z2M_Send_System_Mail_Req::set_has_template_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Z2M_Send_System_Mail_Req::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Z2M_Send_System_Mail_Req::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 Z2M_Send_System_Mail_Req::template_id() const {
  return template_id_;
}
inline void Z2M_Send_System_Mail_Req::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional bytes sender_name = 5;
inline bool Z2M_Send_System_Mail_Req::has_sender_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Z2M_Send_System_Mail_Req::set_has_sender_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Z2M_Send_System_Mail_Req::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Z2M_Send_System_Mail_Req::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& Z2M_Send_System_Mail_Req::sender_name() const {
  return *sender_name_;
}
inline void Z2M_Send_System_Mail_Req::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void Z2M_Send_System_Mail_Req::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void Z2M_Send_System_Mail_Req::set_sender_name(const void* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Send_System_Mail_Req::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* Z2M_Send_System_Mail_Req::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Send_System_Mail_Req::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .DBCACHE.Prop attachments = 6;
inline int Z2M_Send_System_Mail_Req::attachments_size() const {
  return attachments_.size();
}
inline void Z2M_Send_System_Mail_Req::clear_attachments() {
  attachments_.Clear();
}
inline const ::DBCACHE::Prop& Z2M_Send_System_Mail_Req::attachments(int index) const {
  return attachments_.Get(index);
}
inline ::DBCACHE::Prop* Z2M_Send_System_Mail_Req::mutable_attachments(int index) {
  return attachments_.Mutable(index);
}
inline ::DBCACHE::Prop* Z2M_Send_System_Mail_Req::add_attachments() {
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
Z2M_Send_System_Mail_Req::attachments() const {
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
Z2M_Send_System_Mail_Req::mutable_attachments() {
  return &attachments_;
}

// -------------------------------------------------------------------

// M2Z_Send_System_Mail_Rsp

// required int32 ret_code = 1;
inline bool M2Z_Send_System_Mail_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M2Z_Send_System_Mail_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M2Z_Send_System_Mail_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M2Z_Send_System_Mail_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 M2Z_Send_System_Mail_Rsp::ret_code() const {
  return ret_code_;
}
inline void M2Z_Send_System_Mail_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// required uint64 serial = 2;
inline bool M2Z_Send_System_Mail_Rsp::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M2Z_Send_System_Mail_Rsp::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M2Z_Send_System_Mail_Rsp::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M2Z_Send_System_Mail_Rsp::clear_serial() {
  serial_ = GOOGLE_ULONGLONG(0);
  clear_has_serial();
}
inline ::google::protobuf::uint64 M2Z_Send_System_Mail_Rsp::serial() const {
  return serial_;
}
inline void M2Z_Send_System_Mail_Rsp::set_serial(::google::protobuf::uint64 value) {
  set_has_serial();
  serial_ = value;
}

// -------------------------------------------------------------------

// Z2M_Broadcast_System_Mail_Req

// repeated uint32 receiver = 1;
inline int Z2M_Broadcast_System_Mail_Req::receiver_size() const {
  return receiver_.size();
}
inline void Z2M_Broadcast_System_Mail_Req::clear_receiver() {
  receiver_.Clear();
}
inline ::google::protobuf::uint32 Z2M_Broadcast_System_Mail_Req::receiver(int index) const {
  return receiver_.Get(index);
}
inline void Z2M_Broadcast_System_Mail_Req::set_receiver(int index, ::google::protobuf::uint32 value) {
  receiver_.Set(index, value);
}
inline void Z2M_Broadcast_System_Mail_Req::add_receiver(::google::protobuf::uint32 value) {
  receiver_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Z2M_Broadcast_System_Mail_Req::receiver() const {
  return receiver_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Z2M_Broadcast_System_Mail_Req::mutable_receiver() {
  return &receiver_;
}

// optional bytes context = 2;
inline bool Z2M_Broadcast_System_Mail_Req::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Z2M_Broadcast_System_Mail_Req::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Z2M_Broadcast_System_Mail_Req::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Z2M_Broadcast_System_Mail_Req::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& Z2M_Broadcast_System_Mail_Req::context() const {
  return *context_;
}
inline void Z2M_Broadcast_System_Mail_Req::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void Z2M_Broadcast_System_Mail_Req::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void Z2M_Broadcast_System_Mail_Req::set_context(const void* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Z2M_Broadcast_System_Mail_Req::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* Z2M_Broadcast_System_Mail_Req::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Z2M_Broadcast_System_Mail_Req::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 template_id = 3;
inline bool Z2M_Broadcast_System_Mail_Req::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Z2M_Broadcast_System_Mail_Req::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Z2M_Broadcast_System_Mail_Req::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Z2M_Broadcast_System_Mail_Req::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 Z2M_Broadcast_System_Mail_Req::template_id() const {
  return template_id_;
}
inline void Z2M_Broadcast_System_Mail_Req::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .DBCACHE.Prop attachments = 5;
inline int Z2M_Broadcast_System_Mail_Req::attachments_size() const {
  return attachments_.size();
}
inline void Z2M_Broadcast_System_Mail_Req::clear_attachments() {
  attachments_.Clear();
}
inline const ::DBCACHE::Prop& Z2M_Broadcast_System_Mail_Req::attachments(int index) const {
  return attachments_.Get(index);
}
inline ::DBCACHE::Prop* Z2M_Broadcast_System_Mail_Req::mutable_attachments(int index) {
  return attachments_.Mutable(index);
}
inline ::DBCACHE::Prop* Z2M_Broadcast_System_Mail_Req::add_attachments() {
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
Z2M_Broadcast_System_Mail_Req::attachments() const {
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
Z2M_Broadcast_System_Mail_Req::mutable_attachments() {
  return &attachments_;
}

// -------------------------------------------------------------------

// M2Z_Broadcast_System_Mail_Rsp

// required int32 ret_code = 1;
inline bool M2Z_Broadcast_System_Mail_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M2Z_Broadcast_System_Mail_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M2Z_Broadcast_System_Mail_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M2Z_Broadcast_System_Mail_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 M2Z_Broadcast_System_Mail_Rsp::ret_code() const {
  return ret_code_;
}
inline void M2Z_Broadcast_System_Mail_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MAIL

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MAIL::S2C_Take_Mail_Prop_Rsp_RetCode>() {
  return ::MAIL::S2C_Take_Mail_Prop_Rsp_RetCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mail_2eproto__INCLUDED
