// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db_cache.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class C2S_LoginReq;
class S2C_LoginRsp;
class LoginTotalInfo;
class S2C_RoleCardInfo;
class C2S_Create_Role_Req;
class C2S_LoginNotVerify;
class S2C_Player_Card_List_Rsp;
class S2C_Player_Die_List_Rsp;
class C2S_Modify_NickName_Req;
class S2C_Modify_NickName_Rsp;
class C2S_Modify_UnderWrite_Req;
class S2C_Modify_UnderWrite_Rsp;
class S2C_Sign_In_Avaliable_Rsp;
class S2C_Sign_In_Now_Rsp;
class S2C_Clover_Reward_Sync;
class S2C_Notify_Player_Level_Up;
class C2S_Present_Clover_Req;
class S2C_Present_Clover_Rsp;
class C2S_Lottery_Draw_Req;
class S2C_Lottery_Draw_Rsp;
class C2S_Upload_Custom_Head_Req;
class S2C_Upload_Custom_Head_Rsp;
class S2C_New_System_Message;
class S2C_Kick_Off_User;
class D2Z_load_player_info;

enum S2C_Present_Clover_Rsp_RET_CODE {
  S2C_Present_Clover_Rsp_RET_CODE_SUCCESS = 0,
  S2C_Present_Clover_Rsp_RET_CODE_NOTTIMEOUT = 1,
  S2C_Present_Clover_Rsp_RET_CODE_FAIL = 2
};
bool S2C_Present_Clover_Rsp_RET_CODE_IsValid(int value);
const S2C_Present_Clover_Rsp_RET_CODE S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_MIN = S2C_Present_Clover_Rsp_RET_CODE_SUCCESS;
const S2C_Present_Clover_Rsp_RET_CODE S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_MAX = S2C_Present_Clover_Rsp_RET_CODE_FAIL;
const int S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_ARRAYSIZE = S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_Present_Clover_Rsp_RET_CODE_descriptor();
inline const ::std::string& S2C_Present_Clover_Rsp_RET_CODE_Name(S2C_Present_Clover_Rsp_RET_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_Present_Clover_Rsp_RET_CODE_descriptor(), value);
}
inline bool S2C_Present_Clover_Rsp_RET_CODE_Parse(
    const ::std::string& name, S2C_Present_Clover_Rsp_RET_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_Present_Clover_Rsp_RET_CODE>(
    S2C_Present_Clover_Rsp_RET_CODE_descriptor(), name, value);
}
enum C2S_Lottery_Draw_Req_DrawType {
  C2S_Lottery_Draw_Req_DrawType_Normal = 0,
  C2S_Lottery_Draw_Req_DrawType_Lucky = 1,
  C2S_Lottery_Draw_Req_DrawType_Marble = 2,
  C2S_Lottery_Draw_Req_DrawType_Normal2 = 3,
  C2S_Lottery_Draw_Req_DrawType_Lucky2 = 4
};
bool C2S_Lottery_Draw_Req_DrawType_IsValid(int value);
const C2S_Lottery_Draw_Req_DrawType C2S_Lottery_Draw_Req_DrawType_DrawType_MIN = C2S_Lottery_Draw_Req_DrawType_Normal;
const C2S_Lottery_Draw_Req_DrawType C2S_Lottery_Draw_Req_DrawType_DrawType_MAX = C2S_Lottery_Draw_Req_DrawType_Lucky2;
const int C2S_Lottery_Draw_Req_DrawType_DrawType_ARRAYSIZE = C2S_Lottery_Draw_Req_DrawType_DrawType_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2S_Lottery_Draw_Req_DrawType_descriptor();
inline const ::std::string& C2S_Lottery_Draw_Req_DrawType_Name(C2S_Lottery_Draw_Req_DrawType value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2S_Lottery_Draw_Req_DrawType_descriptor(), value);
}
inline bool C2S_Lottery_Draw_Req_DrawType_Parse(
    const ::std::string& name, C2S_Lottery_Draw_Req_DrawType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2S_Lottery_Draw_Req_DrawType>(
    C2S_Lottery_Draw_Req_DrawType_descriptor(), name, value);
}
enum S2C_Kick_Off_User_KickReason {
  S2C_Kick_Off_User_KickReason_account_login_in_orther_place = 1,
  S2C_Kick_Off_User_KickReason_account_were_banned = 2,
  S2C_Kick_Off_User_KickReason_service_has_stop = 3,
  S2C_Kick_Off_User_KickReason_timeout = 4
};
bool S2C_Kick_Off_User_KickReason_IsValid(int value);
const S2C_Kick_Off_User_KickReason S2C_Kick_Off_User_KickReason_KickReason_MIN = S2C_Kick_Off_User_KickReason_account_login_in_orther_place;
const S2C_Kick_Off_User_KickReason S2C_Kick_Off_User_KickReason_KickReason_MAX = S2C_Kick_Off_User_KickReason_timeout;
const int S2C_Kick_Off_User_KickReason_KickReason_ARRAYSIZE = S2C_Kick_Off_User_KickReason_KickReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_Kick_Off_User_KickReason_descriptor();
inline const ::std::string& S2C_Kick_Off_User_KickReason_Name(S2C_Kick_Off_User_KickReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_Kick_Off_User_KickReason_descriptor(), value);
}
inline bool S2C_Kick_Off_User_KickReason_Parse(
    const ::std::string& name, S2C_Kick_Off_User_KickReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_Kick_Off_User_KickReason>(
    S2C_Kick_Off_User_KickReason_descriptor(), name, value);
}
// ===================================================================

class C2S_LoginReq : public ::google::protobuf::Message {
 public:
  C2S_LoginReq();
  virtual ~C2S_LoginReq();

  C2S_LoginReq(const C2S_LoginReq& from);

  inline C2S_LoginReq& operator=(const C2S_LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_LoginReq& default_instance();

  void Swap(C2S_LoginReq* other);

  // implements Message ----------------------------------------------

  C2S_LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_LoginReq& from);
  void MergeFrom(const C2S_LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_type = 1;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 1;
  inline ::google::protobuf::int32 user_type() const;
  inline void set_user_type(::google::protobuf::int32 value);

  // required string user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required string sign = 3;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 3;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // required int32 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // required string channel_key = 5;
  inline bool has_channel_key() const;
  inline void clear_channel_key();
  static const int kChannelKeyFieldNumber = 5;
  inline const ::std::string& channel_key() const;
  inline void set_channel_key(const ::std::string& value);
  inline void set_channel_key(const char* value);
  inline void set_channel_key(const char* value, size_t size);
  inline ::std::string* mutable_channel_key();
  inline ::std::string* release_channel_key();
  inline void set_allocated_channel_key(::std::string* channel_key);

  // required string client_version = 6;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 6;
  inline const ::std::string& client_version() const;
  inline void set_client_version(const ::std::string& value);
  inline void set_client_version(const char* value);
  inline void set_client_version(const char* value, size_t size);
  inline ::std::string* mutable_client_version();
  inline ::std::string* release_client_version();
  inline void set_allocated_client_version(::std::string* client_version);

  // required string terminate_id = 7;
  inline bool has_terminate_id() const;
  inline void clear_terminate_id();
  static const int kTerminateIdFieldNumber = 7;
  inline const ::std::string& terminate_id() const;
  inline void set_terminate_id(const ::std::string& value);
  inline void set_terminate_id(const char* value);
  inline void set_terminate_id(const char* value, size_t size);
  inline ::std::string* mutable_terminate_id();
  inline ::std::string* release_terminate_id();
  inline void set_allocated_terminate_id(::std::string* terminate_id);

  // optional int32 youai_svr_id = 8;
  inline bool has_youai_svr_id() const;
  inline void clear_youai_svr_id();
  static const int kYouaiSvrIdFieldNumber = 8;
  inline ::google::protobuf::int32 youai_svr_id() const;
  inline void set_youai_svr_id(::google::protobuf::int32 value);

  // optional string client_addr = 9;
  inline bool has_client_addr() const;
  inline void clear_client_addr();
  static const int kClientAddrFieldNumber = 9;
  inline const ::std::string& client_addr() const;
  inline void set_client_addr(const ::std::string& value);
  inline void set_client_addr(const char* value);
  inline void set_client_addr(const char* value, size_t size);
  inline ::std::string* mutable_client_addr();
  inline ::std::string* release_client_addr();
  inline void set_allocated_client_addr(::std::string* client_addr);

  // @@protoc_insertion_point(class_scope:C2S_LoginReq)
 private:
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_channel_key();
  inline void clear_has_channel_key();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_terminate_id();
  inline void clear_has_terminate_id();
  inline void set_has_youai_svr_id();
  inline void clear_has_youai_svr_id();
  inline void set_has_client_addr();
  inline void clear_has_client_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;
  ::google::protobuf::int32 user_type_;
  ::google::protobuf::int32 timestamp_;
  ::std::string* sign_;
  ::std::string* channel_key_;
  ::std::string* client_version_;
  ::std::string* terminate_id_;
  ::std::string* client_addr_;
  ::google::protobuf::int32 youai_svr_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class S2C_LoginRsp : public ::google::protobuf::Message {
 public:
  S2C_LoginRsp();
  virtual ~S2C_LoginRsp();

  S2C_LoginRsp(const S2C_LoginRsp& from);

  inline S2C_LoginRsp& operator=(const S2C_LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_LoginRsp& default_instance();

  void Swap(S2C_LoginRsp* other);

  // implements Message ----------------------------------------------

  S2C_LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_LoginRsp& from);
  void MergeFrom(const S2C_LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // optional bytes error_msg = 3;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const void* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  inline void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:S2C_LoginRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 role_id_;
  ::std::string* error_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class LoginTotalInfo : public ::google::protobuf::Message {
 public:
  LoginTotalInfo();
  virtual ~LoginTotalInfo();

  LoginTotalInfo(const LoginTotalInfo& from);

  inline LoginTotalInfo& operator=(const LoginTotalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginTotalInfo& default_instance();

  void Swap(LoginTotalInfo* other);

  // implements Message ----------------------------------------------

  LoginTotalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginTotalInfo& from);
  void MergeFrom(const LoginTotalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DBCACHE.Player playerInfo = 1;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::DBCACHE::Player& playerinfo() const;
  inline ::DBCACHE::Player* mutable_playerinfo();
  inline ::DBCACHE::Player* release_playerinfo();
  inline void set_allocated_playerinfo(::DBCACHE::Player* playerinfo);

  // optional bool playing_game = 2;
  inline bool has_playing_game() const;
  inline void clear_playing_game();
  static const int kPlayingGameFieldNumber = 2;
  inline bool playing_game() const;
  inline void set_playing_game(bool value);

  // @@protoc_insertion_point(class_scope:LoginTotalInfo)
 private:
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();
  inline void set_has_playing_game();
  inline void clear_has_playing_game();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBCACHE::Player* playerinfo_;
  bool playing_game_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginTotalInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2C_RoleCardInfo : public ::google::protobuf::Message {
 public:
  S2C_RoleCardInfo();
  virtual ~S2C_RoleCardInfo();

  S2C_RoleCardInfo(const S2C_RoleCardInfo& from);

  inline S2C_RoleCardInfo& operator=(const S2C_RoleCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_RoleCardInfo& default_instance();

  void Swap(S2C_RoleCardInfo* other);

  // implements Message ----------------------------------------------

  S2C_RoleCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_RoleCardInfo& from);
  void MergeFrom(const S2C_RoleCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 rolecardUuid = 1;
  inline int rolecarduuid_size() const;
  inline void clear_rolecarduuid();
  static const int kRolecardUuidFieldNumber = 1;
  inline ::google::protobuf::int32 rolecarduuid(int index) const;
  inline void set_rolecarduuid(int index, ::google::protobuf::int32 value);
  inline void add_rolecarduuid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rolecarduuid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rolecarduuid();

  // @@protoc_insertion_point(class_scope:S2C_RoleCardInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rolecarduuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_RoleCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Create_Role_Req : public ::google::protobuf::Message {
 public:
  C2S_Create_Role_Req();
  virtual ~C2S_Create_Role_Req();

  C2S_Create_Role_Req(const C2S_Create_Role_Req& from);

  inline C2S_Create_Role_Req& operator=(const C2S_Create_Role_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Create_Role_Req& default_instance();

  void Swap(C2S_Create_Role_Req* other);

  // implements Message ----------------------------------------------

  C2S_Create_Role_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Create_Role_Req& from);
  void MergeFrom(const C2S_Create_Role_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cardId = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 1;
  inline ::google::protobuf::int32 cardid() const;
  inline void set_cardid(::google::protobuf::int32 value);

  // required bytes nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:C2S_Create_Role_Req)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 cardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_Create_Role_Req* default_instance_;
};
// -------------------------------------------------------------------

class C2S_LoginNotVerify : public ::google::protobuf::Message {
 public:
  C2S_LoginNotVerify();
  virtual ~C2S_LoginNotVerify();

  C2S_LoginNotVerify(const C2S_LoginNotVerify& from);

  inline C2S_LoginNotVerify& operator=(const C2S_LoginNotVerify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_LoginNotVerify& default_instance();

  void Swap(C2S_LoginNotVerify* other);

  // implements Message ----------------------------------------------

  C2S_LoginNotVerify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_LoginNotVerify& from);
  void MergeFrom(const C2S_LoginNotVerify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_LoginNotVerify)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_LoginNotVerify* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Player_Card_List_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Player_Card_List_Rsp();
  virtual ~S2C_Player_Card_List_Rsp();

  S2C_Player_Card_List_Rsp(const S2C_Player_Card_List_Rsp& from);

  inline S2C_Player_Card_List_Rsp& operator=(const S2C_Player_Card_List_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Player_Card_List_Rsp& default_instance();

  void Swap(S2C_Player_Card_List_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Player_Card_List_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Player_Card_List_Rsp& from);
  void MergeFrom(const S2C_Player_Card_List_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DBCACHE.PlayerCard player_card = 1;
  inline int player_card_size() const;
  inline void clear_player_card();
  static const int kPlayerCardFieldNumber = 1;
  inline const ::DBCACHE::PlayerCard& player_card(int index) const;
  inline ::DBCACHE::PlayerCard* mutable_player_card(int index);
  inline ::DBCACHE::PlayerCard* add_player_card();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >&
      player_card() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >*
      mutable_player_card();

  // @@protoc_insertion_point(class_scope:S2C_Player_Card_List_Rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard > player_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Player_Card_List_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Player_Die_List_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Player_Die_List_Rsp();
  virtual ~S2C_Player_Die_List_Rsp();

  S2C_Player_Die_List_Rsp(const S2C_Player_Die_List_Rsp& from);

  inline S2C_Player_Die_List_Rsp& operator=(const S2C_Player_Die_List_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Player_Die_List_Rsp& default_instance();

  void Swap(S2C_Player_Die_List_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Player_Die_List_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Player_Die_List_Rsp& from);
  void MergeFrom(const S2C_Player_Die_List_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DBCACHE.PlayerDie player_die = 1;
  inline int player_die_size() const;
  inline void clear_player_die();
  static const int kPlayerDieFieldNumber = 1;
  inline const ::DBCACHE::PlayerDie& player_die(int index) const;
  inline ::DBCACHE::PlayerDie* mutable_player_die(int index);
  inline ::DBCACHE::PlayerDie* add_player_die();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >&
      player_die() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >*
      mutable_player_die();

  // @@protoc_insertion_point(class_scope:S2C_Player_Die_List_Rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie > player_die_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Player_Die_List_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Modify_NickName_Req : public ::google::protobuf::Message {
 public:
  C2S_Modify_NickName_Req();
  virtual ~C2S_Modify_NickName_Req();

  C2S_Modify_NickName_Req(const C2S_Modify_NickName_Req& from);

  inline C2S_Modify_NickName_Req& operator=(const C2S_Modify_NickName_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Modify_NickName_Req& default_instance();

  void Swap(C2S_Modify_NickName_Req* other);

  // implements Message ----------------------------------------------

  C2S_Modify_NickName_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Modify_NickName_Req& from);
  void MergeFrom(const C2S_Modify_NickName_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes new_nickname = 1;
  inline bool has_new_nickname() const;
  inline void clear_new_nickname();
  static const int kNewNicknameFieldNumber = 1;
  inline const ::std::string& new_nickname() const;
  inline void set_new_nickname(const ::std::string& value);
  inline void set_new_nickname(const char* value);
  inline void set_new_nickname(const void* value, size_t size);
  inline ::std::string* mutable_new_nickname();
  inline ::std::string* release_new_nickname();
  inline void set_allocated_new_nickname(::std::string* new_nickname);

  // @@protoc_insertion_point(class_scope:C2S_Modify_NickName_Req)
 private:
  inline void set_has_new_nickname();
  inline void clear_has_new_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_Modify_NickName_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Modify_NickName_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Modify_NickName_Rsp();
  virtual ~S2C_Modify_NickName_Rsp();

  S2C_Modify_NickName_Rsp(const S2C_Modify_NickName_Rsp& from);

  inline S2C_Modify_NickName_Rsp& operator=(const S2C_Modify_NickName_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Modify_NickName_Rsp& default_instance();

  void Swap(S2C_Modify_NickName_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Modify_NickName_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Modify_NickName_Rsp& from);
  void MergeFrom(const S2C_Modify_NickName_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Modify_NickName_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Modify_NickName_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Modify_UnderWrite_Req : public ::google::protobuf::Message {
 public:
  C2S_Modify_UnderWrite_Req();
  virtual ~C2S_Modify_UnderWrite_Req();

  C2S_Modify_UnderWrite_Req(const C2S_Modify_UnderWrite_Req& from);

  inline C2S_Modify_UnderWrite_Req& operator=(const C2S_Modify_UnderWrite_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Modify_UnderWrite_Req& default_instance();

  void Swap(C2S_Modify_UnderWrite_Req* other);

  // implements Message ----------------------------------------------

  C2S_Modify_UnderWrite_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Modify_UnderWrite_Req& from);
  void MergeFrom(const C2S_Modify_UnderWrite_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes new_underwrite = 1;
  inline bool has_new_underwrite() const;
  inline void clear_new_underwrite();
  static const int kNewUnderwriteFieldNumber = 1;
  inline const ::std::string& new_underwrite() const;
  inline void set_new_underwrite(const ::std::string& value);
  inline void set_new_underwrite(const char* value);
  inline void set_new_underwrite(const void* value, size_t size);
  inline ::std::string* mutable_new_underwrite();
  inline ::std::string* release_new_underwrite();
  inline void set_allocated_new_underwrite(::std::string* new_underwrite);

  // @@protoc_insertion_point(class_scope:C2S_Modify_UnderWrite_Req)
 private:
  inline void set_has_new_underwrite();
  inline void clear_has_new_underwrite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_underwrite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_Modify_UnderWrite_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Modify_UnderWrite_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Modify_UnderWrite_Rsp();
  virtual ~S2C_Modify_UnderWrite_Rsp();

  S2C_Modify_UnderWrite_Rsp(const S2C_Modify_UnderWrite_Rsp& from);

  inline S2C_Modify_UnderWrite_Rsp& operator=(const S2C_Modify_UnderWrite_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Modify_UnderWrite_Rsp& default_instance();

  void Swap(S2C_Modify_UnderWrite_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Modify_UnderWrite_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Modify_UnderWrite_Rsp& from);
  void MergeFrom(const S2C_Modify_UnderWrite_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Modify_UnderWrite_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Modify_UnderWrite_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Sign_In_Avaliable_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Sign_In_Avaliable_Rsp();
  virtual ~S2C_Sign_In_Avaliable_Rsp();

  S2C_Sign_In_Avaliable_Rsp(const S2C_Sign_In_Avaliable_Rsp& from);

  inline S2C_Sign_In_Avaliable_Rsp& operator=(const S2C_Sign_In_Avaliable_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Sign_In_Avaliable_Rsp& default_instance();

  void Swap(S2C_Sign_In_Avaliable_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Sign_In_Avaliable_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Sign_In_Avaliable_Rsp& from);
  void MergeFrom(const S2C_Sign_In_Avaliable_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Sign_In_Avaliable_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Sign_In_Avaliable_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Sign_In_Now_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Sign_In_Now_Rsp();
  virtual ~S2C_Sign_In_Now_Rsp();

  S2C_Sign_In_Now_Rsp(const S2C_Sign_In_Now_Rsp& from);

  inline S2C_Sign_In_Now_Rsp& operator=(const S2C_Sign_In_Now_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Sign_In_Now_Rsp& default_instance();

  void Swap(S2C_Sign_In_Now_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Sign_In_Now_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Sign_In_Now_Rsp& from);
  void MergeFrom(const S2C_Sign_In_Now_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint32 lasting_sign_in_days = 2;
  inline bool has_lasting_sign_in_days() const;
  inline void clear_lasting_sign_in_days();
  static const int kLastingSignInDaysFieldNumber = 2;
  inline ::google::protobuf::uint32 lasting_sign_in_days() const;
  inline void set_lasting_sign_in_days(::google::protobuf::uint32 value);

  // repeated .DBCACHE.Prop drew_prop = 3;
  inline int drew_prop_size() const;
  inline void clear_drew_prop();
  static const int kDrewPropFieldNumber = 3;
  inline const ::DBCACHE::Prop& drew_prop(int index) const;
  inline ::DBCACHE::Prop* mutable_drew_prop(int index);
  inline ::DBCACHE::Prop* add_drew_prop();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      drew_prop() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_drew_prop();

  // @@protoc_insertion_point(class_scope:S2C_Sign_In_Now_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_lasting_sign_in_days();
  inline void clear_has_lasting_sign_in_days();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 lasting_sign_in_days_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > drew_prop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Sign_In_Now_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Clover_Reward_Sync : public ::google::protobuf::Message {
 public:
  S2C_Clover_Reward_Sync();
  virtual ~S2C_Clover_Reward_Sync();

  S2C_Clover_Reward_Sync(const S2C_Clover_Reward_Sync& from);

  inline S2C_Clover_Reward_Sync& operator=(const S2C_Clover_Reward_Sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Clover_Reward_Sync& default_instance();

  void Swap(S2C_Clover_Reward_Sync* other);

  // implements Message ----------------------------------------------

  S2C_Clover_Reward_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Clover_Reward_Sync& from);
  void MergeFrom(const S2C_Clover_Reward_Sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 need_timing = 1;
  inline bool has_need_timing() const;
  inline void clear_need_timing();
  static const int kNeedTimingFieldNumber = 1;
  inline ::google::protobuf::int32 need_timing() const;
  inline void set_need_timing(::google::protobuf::int32 value);

  // optional int32 next_reward_time = 2;
  inline bool has_next_reward_time() const;
  inline void clear_next_reward_time();
  static const int kNextRewardTimeFieldNumber = 2;
  inline ::google::protobuf::int32 next_reward_time() const;
  inline void set_next_reward_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Clover_Reward_Sync)
 private:
  inline void set_has_need_timing();
  inline void clear_has_need_timing();
  inline void set_has_next_reward_time();
  inline void clear_has_next_reward_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 need_timing_;
  ::google::protobuf::int32 next_reward_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Clover_Reward_Sync* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Notify_Player_Level_Up : public ::google::protobuf::Message {
 public:
  S2C_Notify_Player_Level_Up();
  virtual ~S2C_Notify_Player_Level_Up();

  S2C_Notify_Player_Level_Up(const S2C_Notify_Player_Level_Up& from);

  inline S2C_Notify_Player_Level_Up& operator=(const S2C_Notify_Player_Level_Up& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Notify_Player_Level_Up& default_instance();

  void Swap(S2C_Notify_Player_Level_Up* other);

  // implements Message ----------------------------------------------

  S2C_Notify_Player_Level_Up* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Notify_Player_Level_Up& from);
  void MergeFrom(const S2C_Notify_Player_Level_Up& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 new_level = 1;
  inline bool has_new_level() const;
  inline void clear_new_level();
  static const int kNewLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 new_level() const;
  inline void set_new_level(::google::protobuf::uint32 value);

  // required uint32 new_exp = 2;
  inline bool has_new_exp() const;
  inline void clear_new_exp();
  static const int kNewExpFieldNumber = 2;
  inline ::google::protobuf::uint32 new_exp() const;
  inline void set_new_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:S2C_Notify_Player_Level_Up)
 private:
  inline void set_has_new_level();
  inline void clear_has_new_level();
  inline void set_has_new_exp();
  inline void clear_has_new_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 new_level_;
  ::google::protobuf::uint32 new_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Notify_Player_Level_Up* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Present_Clover_Req : public ::google::protobuf::Message {
 public:
  C2S_Present_Clover_Req();
  virtual ~C2S_Present_Clover_Req();

  C2S_Present_Clover_Req(const C2S_Present_Clover_Req& from);

  inline C2S_Present_Clover_Req& operator=(const C2S_Present_Clover_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Present_Clover_Req& default_instance();

  void Swap(C2S_Present_Clover_Req* other);

  // implements Message ----------------------------------------------

  C2S_Present_Clover_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Present_Clover_Req& from);
  void MergeFrom(const C2S_Present_Clover_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 receiver_id = 1;
  inline bool has_receiver_id() const;
  inline void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 1;
  inline ::google::protobuf::int32 receiver_id() const;
  inline void set_receiver_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_Present_Clover_Req)
 private:
  inline void set_has_receiver_id();
  inline void clear_has_receiver_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 receiver_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_Present_Clover_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Present_Clover_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Present_Clover_Rsp();
  virtual ~S2C_Present_Clover_Rsp();

  S2C_Present_Clover_Rsp(const S2C_Present_Clover_Rsp& from);

  inline S2C_Present_Clover_Rsp& operator=(const S2C_Present_Clover_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Present_Clover_Rsp& default_instance();

  void Swap(S2C_Present_Clover_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Present_Clover_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Present_Clover_Rsp& from);
  void MergeFrom(const S2C_Present_Clover_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_Present_Clover_Rsp_RET_CODE RET_CODE;
  static const RET_CODE SUCCESS = S2C_Present_Clover_Rsp_RET_CODE_SUCCESS;
  static const RET_CODE NOTTIMEOUT = S2C_Present_Clover_Rsp_RET_CODE_NOTTIMEOUT;
  static const RET_CODE FAIL = S2C_Present_Clover_Rsp_RET_CODE_FAIL;
  static inline bool RET_CODE_IsValid(int value) {
    return S2C_Present_Clover_Rsp_RET_CODE_IsValid(value);
  }
  static const RET_CODE RET_CODE_MIN =
    S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_MIN;
  static const RET_CODE RET_CODE_MAX =
    S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_MAX;
  static const int RET_CODE_ARRAYSIZE =
    S2C_Present_Clover_Rsp_RET_CODE_RET_CODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RET_CODE_descriptor() {
    return S2C_Present_Clover_Rsp_RET_CODE_descriptor();
  }
  static inline const ::std::string& RET_CODE_Name(RET_CODE value) {
    return S2C_Present_Clover_Rsp_RET_CODE_Name(value);
  }
  static inline bool RET_CODE_Parse(const ::std::string& name,
      RET_CODE* value) {
    return S2C_Present_Clover_Rsp_RET_CODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional int32 curr_present_points = 2;
  inline bool has_curr_present_points() const;
  inline void clear_curr_present_points();
  static const int kCurrPresentPointsFieldNumber = 2;
  inline ::google::protobuf::int32 curr_present_points() const;
  inline void set_curr_present_points(::google::protobuf::int32 value);

  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Present_Clover_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_curr_present_points();
  inline void clear_has_curr_present_points();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 curr_present_points_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Present_Clover_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Lottery_Draw_Req : public ::google::protobuf::Message {
 public:
  C2S_Lottery_Draw_Req();
  virtual ~C2S_Lottery_Draw_Req();

  C2S_Lottery_Draw_Req(const C2S_Lottery_Draw_Req& from);

  inline C2S_Lottery_Draw_Req& operator=(const C2S_Lottery_Draw_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Lottery_Draw_Req& default_instance();

  void Swap(C2S_Lottery_Draw_Req* other);

  // implements Message ----------------------------------------------

  C2S_Lottery_Draw_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Lottery_Draw_Req& from);
  void MergeFrom(const C2S_Lottery_Draw_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef C2S_Lottery_Draw_Req_DrawType DrawType;
  static const DrawType Normal = C2S_Lottery_Draw_Req_DrawType_Normal;
  static const DrawType Lucky = C2S_Lottery_Draw_Req_DrawType_Lucky;
  static const DrawType Marble = C2S_Lottery_Draw_Req_DrawType_Marble;
  static const DrawType Normal2 = C2S_Lottery_Draw_Req_DrawType_Normal2;
  static const DrawType Lucky2 = C2S_Lottery_Draw_Req_DrawType_Lucky2;
  static inline bool DrawType_IsValid(int value) {
    return C2S_Lottery_Draw_Req_DrawType_IsValid(value);
  }
  static const DrawType DrawType_MIN =
    C2S_Lottery_Draw_Req_DrawType_DrawType_MIN;
  static const DrawType DrawType_MAX =
    C2S_Lottery_Draw_Req_DrawType_DrawType_MAX;
  static const int DrawType_ARRAYSIZE =
    C2S_Lottery_Draw_Req_DrawType_DrawType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrawType_descriptor() {
    return C2S_Lottery_Draw_Req_DrawType_descriptor();
  }
  static inline const ::std::string& DrawType_Name(DrawType value) {
    return C2S_Lottery_Draw_Req_DrawType_Name(value);
  }
  static inline bool DrawType_Parse(const ::std::string& name,
      DrawType* value) {
    return C2S_Lottery_Draw_Req_DrawType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 draw_type = 1;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 1;
  inline ::google::protobuf::int32 draw_type() const;
  inline void set_draw_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_Lottery_Draw_Req)
 private:
  inline void set_has_draw_type();
  inline void clear_has_draw_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 draw_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_Lottery_Draw_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Lottery_Draw_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Lottery_Draw_Rsp();
  virtual ~S2C_Lottery_Draw_Rsp();

  S2C_Lottery_Draw_Rsp(const S2C_Lottery_Draw_Rsp& from);

  inline S2C_Lottery_Draw_Rsp& operator=(const S2C_Lottery_Draw_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Lottery_Draw_Rsp& default_instance();

  void Swap(S2C_Lottery_Draw_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Lottery_Draw_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Lottery_Draw_Rsp& from);
  void MergeFrom(const S2C_Lottery_Draw_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional uint32 curr_present_points = 2;
  inline bool has_curr_present_points() const;
  inline void clear_curr_present_points();
  static const int kCurrPresentPointsFieldNumber = 2;
  inline ::google::protobuf::uint32 curr_present_points() const;
  inline void set_curr_present_points(::google::protobuf::uint32 value);

  // repeated .DBCACHE.Prop drew_prop = 3;
  inline int drew_prop_size() const;
  inline void clear_drew_prop();
  static const int kDrewPropFieldNumber = 3;
  inline const ::DBCACHE::Prop& drew_prop(int index) const;
  inline ::DBCACHE::Prop* mutable_drew_prop(int index);
  inline ::DBCACHE::Prop* add_drew_prop();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      drew_prop() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_drew_prop();

  // repeated .DBCACHE.Prop undrew_prop1 = 4;
  inline int undrew_prop1_size() const;
  inline void clear_undrew_prop1();
  static const int kUndrewProp1FieldNumber = 4;
  inline const ::DBCACHE::Prop& undrew_prop1(int index) const;
  inline ::DBCACHE::Prop* mutable_undrew_prop1(int index);
  inline ::DBCACHE::Prop* add_undrew_prop1();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      undrew_prop1() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_undrew_prop1();

  // repeated .DBCACHE.Prop undrew_prop2 = 5;
  inline int undrew_prop2_size() const;
  inline void clear_undrew_prop2();
  static const int kUndrewProp2FieldNumber = 5;
  inline const ::DBCACHE::Prop& undrew_prop2(int index) const;
  inline ::DBCACHE::Prop* mutable_undrew_prop2(int index);
  inline ::DBCACHE::Prop* add_undrew_prop2();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
      undrew_prop2() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
      mutable_undrew_prop2();

  // @@protoc_insertion_point(class_scope:S2C_Lottery_Draw_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_curr_present_points();
  inline void clear_has_curr_present_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::uint32 curr_present_points_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > drew_prop_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > undrew_prop1_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop > undrew_prop2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Lottery_Draw_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Upload_Custom_Head_Req : public ::google::protobuf::Message {
 public:
  C2S_Upload_Custom_Head_Req();
  virtual ~C2S_Upload_Custom_Head_Req();

  C2S_Upload_Custom_Head_Req(const C2S_Upload_Custom_Head_Req& from);

  inline C2S_Upload_Custom_Head_Req& operator=(const C2S_Upload_Custom_Head_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Upload_Custom_Head_Req& default_instance();

  void Swap(C2S_Upload_Custom_Head_Req* other);

  // implements Message ----------------------------------------------

  C2S_Upload_Custom_Head_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Upload_Custom_Head_Req& from);
  void MergeFrom(const C2S_Upload_Custom_Head_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string new_head = 1;
  inline bool has_new_head() const;
  inline void clear_new_head();
  static const int kNewHeadFieldNumber = 1;
  inline const ::std::string& new_head() const;
  inline void set_new_head(const ::std::string& value);
  inline void set_new_head(const char* value);
  inline void set_new_head(const char* value, size_t size);
  inline ::std::string* mutable_new_head();
  inline ::std::string* release_new_head();
  inline void set_allocated_new_head(::std::string* new_head);

  // @@protoc_insertion_point(class_scope:C2S_Upload_Custom_Head_Req)
 private:
  inline void set_has_new_head();
  inline void clear_has_new_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static C2S_Upload_Custom_Head_Req* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Upload_Custom_Head_Rsp : public ::google::protobuf::Message {
 public:
  S2C_Upload_Custom_Head_Rsp();
  virtual ~S2C_Upload_Custom_Head_Rsp();

  S2C_Upload_Custom_Head_Rsp(const S2C_Upload_Custom_Head_Rsp& from);

  inline S2C_Upload_Custom_Head_Rsp& operator=(const S2C_Upload_Custom_Head_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Upload_Custom_Head_Rsp& default_instance();

  void Swap(S2C_Upload_Custom_Head_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_Upload_Custom_Head_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Upload_Custom_Head_Rsp& from);
  void MergeFrom(const S2C_Upload_Custom_Head_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Upload_Custom_Head_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Upload_Custom_Head_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_New_System_Message : public ::google::protobuf::Message {
 public:
  S2C_New_System_Message();
  virtual ~S2C_New_System_Message();

  S2C_New_System_Message(const S2C_New_System_Message& from);

  inline S2C_New_System_Message& operator=(const S2C_New_System_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_New_System_Message& default_instance();

  void Swap(S2C_New_System_Message* other);

  // implements Message ----------------------------------------------

  S2C_New_System_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_New_System_Message& from);
  void MergeFrom(const S2C_New_System_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 message_type = 1;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 message_type() const;
  inline void set_message_type(::google::protobuf::uint32 value);

  // required int32 message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // optional bytes message_context = 3;
  inline bool has_message_context() const;
  inline void clear_message_context();
  static const int kMessageContextFieldNumber = 3;
  inline const ::std::string& message_context() const;
  inline void set_message_context(const ::std::string& value);
  inline void set_message_context(const char* value);
  inline void set_message_context(const void* value, size_t size);
  inline ::std::string* mutable_message_context();
  inline ::std::string* release_message_context();
  inline void set_allocated_message_context(::std::string* message_context);

  // @@protoc_insertion_point(class_scope:S2C_New_System_Message)
 private:
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_message_context();
  inline void clear_has_message_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 message_type_;
  ::google::protobuf::int32 message_id_;
  ::std::string* message_context_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_New_System_Message* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Kick_Off_User : public ::google::protobuf::Message {
 public:
  S2C_Kick_Off_User();
  virtual ~S2C_Kick_Off_User();

  S2C_Kick_Off_User(const S2C_Kick_Off_User& from);

  inline S2C_Kick_Off_User& operator=(const S2C_Kick_Off_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Kick_Off_User& default_instance();

  void Swap(S2C_Kick_Off_User* other);

  // implements Message ----------------------------------------------

  S2C_Kick_Off_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Kick_Off_User& from);
  void MergeFrom(const S2C_Kick_Off_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_Kick_Off_User_KickReason KickReason;
  static const KickReason account_login_in_orther_place = S2C_Kick_Off_User_KickReason_account_login_in_orther_place;
  static const KickReason account_were_banned = S2C_Kick_Off_User_KickReason_account_were_banned;
  static const KickReason service_has_stop = S2C_Kick_Off_User_KickReason_service_has_stop;
  static const KickReason timeout = S2C_Kick_Off_User_KickReason_timeout;
  static inline bool KickReason_IsValid(int value) {
    return S2C_Kick_Off_User_KickReason_IsValid(value);
  }
  static const KickReason KickReason_MIN =
    S2C_Kick_Off_User_KickReason_KickReason_MIN;
  static const KickReason KickReason_MAX =
    S2C_Kick_Off_User_KickReason_KickReason_MAX;
  static const int KickReason_ARRAYSIZE =
    S2C_Kick_Off_User_KickReason_KickReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KickReason_descriptor() {
    return S2C_Kick_Off_User_KickReason_descriptor();
  }
  static inline const ::std::string& KickReason_Name(KickReason value) {
    return S2C_Kick_Off_User_KickReason_Name(value);
  }
  static inline bool KickReason_Parse(const ::std::string& name,
      KickReason* value) {
    return S2C_Kick_Off_User_KickReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_Kick_Off_User)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static S2C_Kick_Off_User* default_instance_;
};
// -------------------------------------------------------------------

class D2Z_load_player_info : public ::google::protobuf::Message {
 public:
  D2Z_load_player_info();
  virtual ~D2Z_load_player_info();

  D2Z_load_player_info(const D2Z_load_player_info& from);

  inline D2Z_load_player_info& operator=(const D2Z_load_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const D2Z_load_player_info& default_instance();

  void Swap(D2Z_load_player_info* other);

  // implements Message ----------------------------------------------

  D2Z_load_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const D2Z_load_player_info& from);
  void MergeFrom(const D2Z_load_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_existed = 1;
  inline bool has_is_existed() const;
  inline void clear_is_existed();
  static const int kIsExistedFieldNumber = 1;
  inline bool is_existed() const;
  inline void set_is_existed(bool value);

  // optional .DBCACHE.Player currentplayer = 2;
  inline bool has_currentplayer() const;
  inline void clear_currentplayer();
  static const int kCurrentplayerFieldNumber = 2;
  inline const ::DBCACHE::Player& currentplayer() const;
  inline ::DBCACHE::Player* mutable_currentplayer();
  inline ::DBCACHE::Player* release_currentplayer();
  inline void set_allocated_currentplayer(::DBCACHE::Player* currentplayer);

  // @@protoc_insertion_point(class_scope:D2Z_load_player_info)
 private:
  inline void set_has_is_existed();
  inline void clear_has_is_existed();
  inline void set_has_currentplayer();
  inline void clear_has_currentplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBCACHE::Player* currentplayer_;
  bool is_existed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static D2Z_load_player_info* default_instance_;
};
// ===================================================================


// ===================================================================

// C2S_LoginReq

// required int32 user_type = 1;
inline bool C2S_LoginReq::has_user_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_LoginReq::set_has_user_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_LoginReq::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_LoginReq::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::google::protobuf::int32 C2S_LoginReq::user_type() const {
  return user_type_;
}
inline void C2S_LoginReq::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
}

// required string user_id = 2;
inline bool C2S_LoginReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_LoginReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_LoginReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_LoginReq::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& C2S_LoginReq::user_id() const {
  return *user_id_;
}
inline void C2S_LoginReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void C2S_LoginReq::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void C2S_LoginReq::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_LoginReq::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* C2S_LoginReq::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_LoginReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sign = 3;
inline bool C2S_LoginReq::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S_LoginReq::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S_LoginReq::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2S_LoginReq::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& C2S_LoginReq::sign() const {
  return *sign_;
}
inline void C2S_LoginReq::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void C2S_LoginReq::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void C2S_LoginReq::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_LoginReq::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* C2S_LoginReq::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_LoginReq::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 timestamp = 4;
inline bool C2S_LoginReq::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2S_LoginReq::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2S_LoginReq::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2S_LoginReq::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 C2S_LoginReq::timestamp() const {
  return timestamp_;
}
inline void C2S_LoginReq::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string channel_key = 5;
inline bool C2S_LoginReq::has_channel_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2S_LoginReq::set_has_channel_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2S_LoginReq::clear_has_channel_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2S_LoginReq::clear_channel_key() {
  if (channel_key_ != &::google::protobuf::internal::kEmptyString) {
    channel_key_->clear();
  }
  clear_has_channel_key();
}
inline const ::std::string& C2S_LoginReq::channel_key() const {
  return *channel_key_;
}
inline void C2S_LoginReq::set_channel_key(const ::std::string& value) {
  set_has_channel_key();
  if (channel_key_ == &::google::protobuf::internal::kEmptyString) {
    channel_key_ = new ::std::string;
  }
  channel_key_->assign(value);
}
inline void C2S_LoginReq::set_channel_key(const char* value) {
  set_has_channel_key();
  if (channel_key_ == &::google::protobuf::internal::kEmptyString) {
    channel_key_ = new ::std::string;
  }
  channel_key_->assign(value);
}
inline void C2S_LoginReq::set_channel_key(const char* value, size_t size) {
  set_has_channel_key();
  if (channel_key_ == &::google::protobuf::internal::kEmptyString) {
    channel_key_ = new ::std::string;
  }
  channel_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_LoginReq::mutable_channel_key() {
  set_has_channel_key();
  if (channel_key_ == &::google::protobuf::internal::kEmptyString) {
    channel_key_ = new ::std::string;
  }
  return channel_key_;
}
inline ::std::string* C2S_LoginReq::release_channel_key() {
  clear_has_channel_key();
  if (channel_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_key_;
    channel_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_LoginReq::set_allocated_channel_key(::std::string* channel_key) {
  if (channel_key_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_key_;
  }
  if (channel_key) {
    set_has_channel_key();
    channel_key_ = channel_key;
  } else {
    clear_has_channel_key();
    channel_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string client_version = 6;
inline bool C2S_LoginReq::has_client_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2S_LoginReq::set_has_client_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2S_LoginReq::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2S_LoginReq::clear_client_version() {
  if (client_version_ != &::google::protobuf::internal::kEmptyString) {
    client_version_->clear();
  }
  clear_has_client_version();
}
inline const ::std::string& C2S_LoginReq::client_version() const {
  return *client_version_;
}
inline void C2S_LoginReq::set_client_version(const ::std::string& value) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::kEmptyString) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(value);
}
inline void C2S_LoginReq::set_client_version(const char* value) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::kEmptyString) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(value);
}
inline void C2S_LoginReq::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::kEmptyString) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_LoginReq::mutable_client_version() {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::kEmptyString) {
    client_version_ = new ::std::string;
  }
  return client_version_;
}
inline ::std::string* C2S_LoginReq::release_client_version() {
  clear_has_client_version();
  if (client_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_version_;
    client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_LoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version_ != &::google::protobuf::internal::kEmptyString) {
    delete client_version_;
  }
  if (client_version) {
    set_has_client_version();
    client_version_ = client_version;
  } else {
    clear_has_client_version();
    client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string terminate_id = 7;
inline bool C2S_LoginReq::has_terminate_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2S_LoginReq::set_has_terminate_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2S_LoginReq::clear_has_terminate_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2S_LoginReq::clear_terminate_id() {
  if (terminate_id_ != &::google::protobuf::internal::kEmptyString) {
    terminate_id_->clear();
  }
  clear_has_terminate_id();
}
inline const ::std::string& C2S_LoginReq::terminate_id() const {
  return *terminate_id_;
}
inline void C2S_LoginReq::set_terminate_id(const ::std::string& value) {
  set_has_terminate_id();
  if (terminate_id_ == &::google::protobuf::internal::kEmptyString) {
    terminate_id_ = new ::std::string;
  }
  terminate_id_->assign(value);
}
inline void C2S_LoginReq::set_terminate_id(const char* value) {
  set_has_terminate_id();
  if (terminate_id_ == &::google::protobuf::internal::kEmptyString) {
    terminate_id_ = new ::std::string;
  }
  terminate_id_->assign(value);
}
inline void C2S_LoginReq::set_terminate_id(const char* value, size_t size) {
  set_has_terminate_id();
  if (terminate_id_ == &::google::protobuf::internal::kEmptyString) {
    terminate_id_ = new ::std::string;
  }
  terminate_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_LoginReq::mutable_terminate_id() {
  set_has_terminate_id();
  if (terminate_id_ == &::google::protobuf::internal::kEmptyString) {
    terminate_id_ = new ::std::string;
  }
  return terminate_id_;
}
inline ::std::string* C2S_LoginReq::release_terminate_id() {
  clear_has_terminate_id();
  if (terminate_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = terminate_id_;
    terminate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_LoginReq::set_allocated_terminate_id(::std::string* terminate_id) {
  if (terminate_id_ != &::google::protobuf::internal::kEmptyString) {
    delete terminate_id_;
  }
  if (terminate_id) {
    set_has_terminate_id();
    terminate_id_ = terminate_id;
  } else {
    clear_has_terminate_id();
    terminate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 youai_svr_id = 8;
inline bool C2S_LoginReq::has_youai_svr_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2S_LoginReq::set_has_youai_svr_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2S_LoginReq::clear_has_youai_svr_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2S_LoginReq::clear_youai_svr_id() {
  youai_svr_id_ = 0;
  clear_has_youai_svr_id();
}
inline ::google::protobuf::int32 C2S_LoginReq::youai_svr_id() const {
  return youai_svr_id_;
}
inline void C2S_LoginReq::set_youai_svr_id(::google::protobuf::int32 value) {
  set_has_youai_svr_id();
  youai_svr_id_ = value;
}

// optional string client_addr = 9;
inline bool C2S_LoginReq::has_client_addr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void C2S_LoginReq::set_has_client_addr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void C2S_LoginReq::clear_has_client_addr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void C2S_LoginReq::clear_client_addr() {
  if (client_addr_ != &::google::protobuf::internal::kEmptyString) {
    client_addr_->clear();
  }
  clear_has_client_addr();
}
inline const ::std::string& C2S_LoginReq::client_addr() const {
  return *client_addr_;
}
inline void C2S_LoginReq::set_client_addr(const ::std::string& value) {
  set_has_client_addr();
  if (client_addr_ == &::google::protobuf::internal::kEmptyString) {
    client_addr_ = new ::std::string;
  }
  client_addr_->assign(value);
}
inline void C2S_LoginReq::set_client_addr(const char* value) {
  set_has_client_addr();
  if (client_addr_ == &::google::protobuf::internal::kEmptyString) {
    client_addr_ = new ::std::string;
  }
  client_addr_->assign(value);
}
inline void C2S_LoginReq::set_client_addr(const char* value, size_t size) {
  set_has_client_addr();
  if (client_addr_ == &::google::protobuf::internal::kEmptyString) {
    client_addr_ = new ::std::string;
  }
  client_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_LoginReq::mutable_client_addr() {
  set_has_client_addr();
  if (client_addr_ == &::google::protobuf::internal::kEmptyString) {
    client_addr_ = new ::std::string;
  }
  return client_addr_;
}
inline ::std::string* C2S_LoginReq::release_client_addr() {
  clear_has_client_addr();
  if (client_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_addr_;
    client_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_LoginReq::set_allocated_client_addr(::std::string* client_addr) {
  if (client_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete client_addr_;
  }
  if (client_addr) {
    set_has_client_addr();
    client_addr_ = client_addr;
  } else {
    clear_has_client_addr();
    client_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_LoginRsp

// required int32 ret = 1;
inline bool S2C_LoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_LoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_LoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_LoginRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 S2C_LoginRsp::ret() const {
  return ret_;
}
inline void S2C_LoginRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 role_id = 2;
inline bool S2C_LoginRsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_LoginRsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_LoginRsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_LoginRsp::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 S2C_LoginRsp::role_id() const {
  return role_id_;
}
inline void S2C_LoginRsp::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional bytes error_msg = 3;
inline bool S2C_LoginRsp::has_error_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_LoginRsp::set_has_error_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_LoginRsp::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_LoginRsp::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& S2C_LoginRsp::error_msg() const {
  return *error_msg_;
}
inline void S2C_LoginRsp::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void S2C_LoginRsp::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void S2C_LoginRsp::set_error_msg(const void* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2C_LoginRsp::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  return error_msg_;
}
inline ::std::string* S2C_LoginRsp::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2C_LoginRsp::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (error_msg) {
    set_has_error_msg();
    error_msg_ = error_msg;
  } else {
    clear_has_error_msg();
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginTotalInfo

// required .DBCACHE.Player playerInfo = 1;
inline bool LoginTotalInfo::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginTotalInfo::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginTotalInfo::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginTotalInfo::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::DBCACHE::Player::Clear();
  clear_has_playerinfo();
}
inline const ::DBCACHE::Player& LoginTotalInfo::playerinfo() const {
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::DBCACHE::Player* LoginTotalInfo::mutable_playerinfo() {
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::DBCACHE::Player;
  return playerinfo_;
}
inline ::DBCACHE::Player* LoginTotalInfo::release_playerinfo() {
  clear_has_playerinfo();
  ::DBCACHE::Player* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void LoginTotalInfo::set_allocated_playerinfo(::DBCACHE::Player* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
}

// optional bool playing_game = 2;
inline bool LoginTotalInfo::has_playing_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginTotalInfo::set_has_playing_game() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginTotalInfo::clear_has_playing_game() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginTotalInfo::clear_playing_game() {
  playing_game_ = false;
  clear_has_playing_game();
}
inline bool LoginTotalInfo::playing_game() const {
  return playing_game_;
}
inline void LoginTotalInfo::set_playing_game(bool value) {
  set_has_playing_game();
  playing_game_ = value;
}

// -------------------------------------------------------------------

// S2C_RoleCardInfo

// repeated int32 rolecardUuid = 1;
inline int S2C_RoleCardInfo::rolecarduuid_size() const {
  return rolecarduuid_.size();
}
inline void S2C_RoleCardInfo::clear_rolecarduuid() {
  rolecarduuid_.Clear();
}
inline ::google::protobuf::int32 S2C_RoleCardInfo::rolecarduuid(int index) const {
  return rolecarduuid_.Get(index);
}
inline void S2C_RoleCardInfo::set_rolecarduuid(int index, ::google::protobuf::int32 value) {
  rolecarduuid_.Set(index, value);
}
inline void S2C_RoleCardInfo::add_rolecarduuid(::google::protobuf::int32 value) {
  rolecarduuid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2C_RoleCardInfo::rolecarduuid() const {
  return rolecarduuid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2C_RoleCardInfo::mutable_rolecarduuid() {
  return &rolecarduuid_;
}

// -------------------------------------------------------------------

// C2S_Create_Role_Req

// required int32 cardId = 1;
inline bool C2S_Create_Role_Req::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Create_Role_Req::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Create_Role_Req::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Create_Role_Req::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 C2S_Create_Role_Req::cardid() const {
  return cardid_;
}
inline void C2S_Create_Role_Req::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
}

// required bytes nickName = 2;
inline bool C2S_Create_Role_Req::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_Create_Role_Req::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_Create_Role_Req::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_Create_Role_Req::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& C2S_Create_Role_Req::nickname() const {
  return *nickname_;
}
inline void C2S_Create_Role_Req::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void C2S_Create_Role_Req::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void C2S_Create_Role_Req::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_Create_Role_Req::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* C2S_Create_Role_Req::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_Create_Role_Req::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2S_LoginNotVerify

// required int32 userid = 1;
inline bool C2S_LoginNotVerify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_LoginNotVerify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_LoginNotVerify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_LoginNotVerify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 C2S_LoginNotVerify::userid() const {
  return userid_;
}
inline void C2S_LoginNotVerify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// S2C_Player_Card_List_Rsp

// repeated .DBCACHE.PlayerCard player_card = 1;
inline int S2C_Player_Card_List_Rsp::player_card_size() const {
  return player_card_.size();
}
inline void S2C_Player_Card_List_Rsp::clear_player_card() {
  player_card_.Clear();
}
inline const ::DBCACHE::PlayerCard& S2C_Player_Card_List_Rsp::player_card(int index) const {
  return player_card_.Get(index);
}
inline ::DBCACHE::PlayerCard* S2C_Player_Card_List_Rsp::mutable_player_card(int index) {
  return player_card_.Mutable(index);
}
inline ::DBCACHE::PlayerCard* S2C_Player_Card_List_Rsp::add_player_card() {
  return player_card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >&
S2C_Player_Card_List_Rsp::player_card() const {
  return player_card_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerCard >*
S2C_Player_Card_List_Rsp::mutable_player_card() {
  return &player_card_;
}

// -------------------------------------------------------------------

// S2C_Player_Die_List_Rsp

// repeated .DBCACHE.PlayerDie player_die = 1;
inline int S2C_Player_Die_List_Rsp::player_die_size() const {
  return player_die_.size();
}
inline void S2C_Player_Die_List_Rsp::clear_player_die() {
  player_die_.Clear();
}
inline const ::DBCACHE::PlayerDie& S2C_Player_Die_List_Rsp::player_die(int index) const {
  return player_die_.Get(index);
}
inline ::DBCACHE::PlayerDie* S2C_Player_Die_List_Rsp::mutable_player_die(int index) {
  return player_die_.Mutable(index);
}
inline ::DBCACHE::PlayerDie* S2C_Player_Die_List_Rsp::add_player_die() {
  return player_die_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >&
S2C_Player_Die_List_Rsp::player_die() const {
  return player_die_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerDie >*
S2C_Player_Die_List_Rsp::mutable_player_die() {
  return &player_die_;
}

// -------------------------------------------------------------------

// C2S_Modify_NickName_Req

// required bytes new_nickname = 1;
inline bool C2S_Modify_NickName_Req::has_new_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Modify_NickName_Req::set_has_new_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Modify_NickName_Req::clear_has_new_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Modify_NickName_Req::clear_new_nickname() {
  if (new_nickname_ != &::google::protobuf::internal::kEmptyString) {
    new_nickname_->clear();
  }
  clear_has_new_nickname();
}
inline const ::std::string& C2S_Modify_NickName_Req::new_nickname() const {
  return *new_nickname_;
}
inline void C2S_Modify_NickName_Req::set_new_nickname(const ::std::string& value) {
  set_has_new_nickname();
  if (new_nickname_ == &::google::protobuf::internal::kEmptyString) {
    new_nickname_ = new ::std::string;
  }
  new_nickname_->assign(value);
}
inline void C2S_Modify_NickName_Req::set_new_nickname(const char* value) {
  set_has_new_nickname();
  if (new_nickname_ == &::google::protobuf::internal::kEmptyString) {
    new_nickname_ = new ::std::string;
  }
  new_nickname_->assign(value);
}
inline void C2S_Modify_NickName_Req::set_new_nickname(const void* value, size_t size) {
  set_has_new_nickname();
  if (new_nickname_ == &::google::protobuf::internal::kEmptyString) {
    new_nickname_ = new ::std::string;
  }
  new_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_Modify_NickName_Req::mutable_new_nickname() {
  set_has_new_nickname();
  if (new_nickname_ == &::google::protobuf::internal::kEmptyString) {
    new_nickname_ = new ::std::string;
  }
  return new_nickname_;
}
inline ::std::string* C2S_Modify_NickName_Req::release_new_nickname() {
  clear_has_new_nickname();
  if (new_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_nickname_;
    new_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_Modify_NickName_Req::set_allocated_new_nickname(::std::string* new_nickname) {
  if (new_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete new_nickname_;
  }
  if (new_nickname) {
    set_has_new_nickname();
    new_nickname_ = new_nickname;
  } else {
    clear_has_new_nickname();
    new_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_Modify_NickName_Rsp

// required int32 ret = 1;
inline bool S2C_Modify_NickName_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Modify_NickName_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Modify_NickName_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Modify_NickName_Rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 S2C_Modify_NickName_Rsp::ret() const {
  return ret_;
}
inline void S2C_Modify_NickName_Rsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// C2S_Modify_UnderWrite_Req

// required bytes new_underwrite = 1;
inline bool C2S_Modify_UnderWrite_Req::has_new_underwrite() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Modify_UnderWrite_Req::set_has_new_underwrite() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Modify_UnderWrite_Req::clear_has_new_underwrite() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Modify_UnderWrite_Req::clear_new_underwrite() {
  if (new_underwrite_ != &::google::protobuf::internal::kEmptyString) {
    new_underwrite_->clear();
  }
  clear_has_new_underwrite();
}
inline const ::std::string& C2S_Modify_UnderWrite_Req::new_underwrite() const {
  return *new_underwrite_;
}
inline void C2S_Modify_UnderWrite_Req::set_new_underwrite(const ::std::string& value) {
  set_has_new_underwrite();
  if (new_underwrite_ == &::google::protobuf::internal::kEmptyString) {
    new_underwrite_ = new ::std::string;
  }
  new_underwrite_->assign(value);
}
inline void C2S_Modify_UnderWrite_Req::set_new_underwrite(const char* value) {
  set_has_new_underwrite();
  if (new_underwrite_ == &::google::protobuf::internal::kEmptyString) {
    new_underwrite_ = new ::std::string;
  }
  new_underwrite_->assign(value);
}
inline void C2S_Modify_UnderWrite_Req::set_new_underwrite(const void* value, size_t size) {
  set_has_new_underwrite();
  if (new_underwrite_ == &::google::protobuf::internal::kEmptyString) {
    new_underwrite_ = new ::std::string;
  }
  new_underwrite_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_Modify_UnderWrite_Req::mutable_new_underwrite() {
  set_has_new_underwrite();
  if (new_underwrite_ == &::google::protobuf::internal::kEmptyString) {
    new_underwrite_ = new ::std::string;
  }
  return new_underwrite_;
}
inline ::std::string* C2S_Modify_UnderWrite_Req::release_new_underwrite() {
  clear_has_new_underwrite();
  if (new_underwrite_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_underwrite_;
    new_underwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_Modify_UnderWrite_Req::set_allocated_new_underwrite(::std::string* new_underwrite) {
  if (new_underwrite_ != &::google::protobuf::internal::kEmptyString) {
    delete new_underwrite_;
  }
  if (new_underwrite) {
    set_has_new_underwrite();
    new_underwrite_ = new_underwrite;
  } else {
    clear_has_new_underwrite();
    new_underwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_Modify_UnderWrite_Rsp

// required int32 ret = 1;
inline bool S2C_Modify_UnderWrite_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Modify_UnderWrite_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Modify_UnderWrite_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Modify_UnderWrite_Rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 S2C_Modify_UnderWrite_Rsp::ret() const {
  return ret_;
}
inline void S2C_Modify_UnderWrite_Rsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// S2C_Sign_In_Avaliable_Rsp

// required int32 ret = 1;
inline bool S2C_Sign_In_Avaliable_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Sign_In_Avaliable_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Sign_In_Avaliable_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Sign_In_Avaliable_Rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 S2C_Sign_In_Avaliable_Rsp::ret() const {
  return ret_;
}
inline void S2C_Sign_In_Avaliable_Rsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// S2C_Sign_In_Now_Rsp

// required int32 ret = 1;
inline bool S2C_Sign_In_Now_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Sign_In_Now_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Sign_In_Now_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Sign_In_Now_Rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 S2C_Sign_In_Now_Rsp::ret() const {
  return ret_;
}
inline void S2C_Sign_In_Now_Rsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint32 lasting_sign_in_days = 2;
inline bool S2C_Sign_In_Now_Rsp::has_lasting_sign_in_days() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Sign_In_Now_Rsp::set_has_lasting_sign_in_days() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Sign_In_Now_Rsp::clear_has_lasting_sign_in_days() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Sign_In_Now_Rsp::clear_lasting_sign_in_days() {
  lasting_sign_in_days_ = 0u;
  clear_has_lasting_sign_in_days();
}
inline ::google::protobuf::uint32 S2C_Sign_In_Now_Rsp::lasting_sign_in_days() const {
  return lasting_sign_in_days_;
}
inline void S2C_Sign_In_Now_Rsp::set_lasting_sign_in_days(::google::protobuf::uint32 value) {
  set_has_lasting_sign_in_days();
  lasting_sign_in_days_ = value;
}

// repeated .DBCACHE.Prop drew_prop = 3;
inline int S2C_Sign_In_Now_Rsp::drew_prop_size() const {
  return drew_prop_.size();
}
inline void S2C_Sign_In_Now_Rsp::clear_drew_prop() {
  drew_prop_.Clear();
}
inline const ::DBCACHE::Prop& S2C_Sign_In_Now_Rsp::drew_prop(int index) const {
  return drew_prop_.Get(index);
}
inline ::DBCACHE::Prop* S2C_Sign_In_Now_Rsp::mutable_drew_prop(int index) {
  return drew_prop_.Mutable(index);
}
inline ::DBCACHE::Prop* S2C_Sign_In_Now_Rsp::add_drew_prop() {
  return drew_prop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
S2C_Sign_In_Now_Rsp::drew_prop() const {
  return drew_prop_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
S2C_Sign_In_Now_Rsp::mutable_drew_prop() {
  return &drew_prop_;
}

// -------------------------------------------------------------------

// S2C_Clover_Reward_Sync

// required int32 need_timing = 1;
inline bool S2C_Clover_Reward_Sync::has_need_timing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Clover_Reward_Sync::set_has_need_timing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Clover_Reward_Sync::clear_has_need_timing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Clover_Reward_Sync::clear_need_timing() {
  need_timing_ = 0;
  clear_has_need_timing();
}
inline ::google::protobuf::int32 S2C_Clover_Reward_Sync::need_timing() const {
  return need_timing_;
}
inline void S2C_Clover_Reward_Sync::set_need_timing(::google::protobuf::int32 value) {
  set_has_need_timing();
  need_timing_ = value;
}

// optional int32 next_reward_time = 2;
inline bool S2C_Clover_Reward_Sync::has_next_reward_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Clover_Reward_Sync::set_has_next_reward_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Clover_Reward_Sync::clear_has_next_reward_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Clover_Reward_Sync::clear_next_reward_time() {
  next_reward_time_ = 0;
  clear_has_next_reward_time();
}
inline ::google::protobuf::int32 S2C_Clover_Reward_Sync::next_reward_time() const {
  return next_reward_time_;
}
inline void S2C_Clover_Reward_Sync::set_next_reward_time(::google::protobuf::int32 value) {
  set_has_next_reward_time();
  next_reward_time_ = value;
}

// -------------------------------------------------------------------

// S2C_Notify_Player_Level_Up

// required uint32 new_level = 1;
inline bool S2C_Notify_Player_Level_Up::has_new_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Notify_Player_Level_Up::set_has_new_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Notify_Player_Level_Up::clear_has_new_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Notify_Player_Level_Up::clear_new_level() {
  new_level_ = 0u;
  clear_has_new_level();
}
inline ::google::protobuf::uint32 S2C_Notify_Player_Level_Up::new_level() const {
  return new_level_;
}
inline void S2C_Notify_Player_Level_Up::set_new_level(::google::protobuf::uint32 value) {
  set_has_new_level();
  new_level_ = value;
}

// required uint32 new_exp = 2;
inline bool S2C_Notify_Player_Level_Up::has_new_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Notify_Player_Level_Up::set_has_new_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Notify_Player_Level_Up::clear_has_new_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Notify_Player_Level_Up::clear_new_exp() {
  new_exp_ = 0u;
  clear_has_new_exp();
}
inline ::google::protobuf::uint32 S2C_Notify_Player_Level_Up::new_exp() const {
  return new_exp_;
}
inline void S2C_Notify_Player_Level_Up::set_new_exp(::google::protobuf::uint32 value) {
  set_has_new_exp();
  new_exp_ = value;
}

// -------------------------------------------------------------------

// C2S_Present_Clover_Req

// required int32 receiver_id = 1;
inline bool C2S_Present_Clover_Req::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Present_Clover_Req::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Present_Clover_Req::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Present_Clover_Req::clear_receiver_id() {
  receiver_id_ = 0;
  clear_has_receiver_id();
}
inline ::google::protobuf::int32 C2S_Present_Clover_Req::receiver_id() const {
  return receiver_id_;
}
inline void C2S_Present_Clover_Req::set_receiver_id(::google::protobuf::int32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
}

// -------------------------------------------------------------------

// S2C_Present_Clover_Rsp

// required int32 ret_code = 1;
inline bool S2C_Present_Clover_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Present_Clover_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Present_Clover_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Present_Clover_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Present_Clover_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Present_Clover_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional int32 curr_present_points = 2;
inline bool S2C_Present_Clover_Rsp::has_curr_present_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Present_Clover_Rsp::set_has_curr_present_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Present_Clover_Rsp::clear_has_curr_present_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Present_Clover_Rsp::clear_curr_present_points() {
  curr_present_points_ = 0;
  clear_has_curr_present_points();
}
inline ::google::protobuf::int32 S2C_Present_Clover_Rsp::curr_present_points() const {
  return curr_present_points_;
}
inline void S2C_Present_Clover_Rsp::set_curr_present_points(::google::protobuf::int32 value) {
  set_has_curr_present_points();
  curr_present_points_ = value;
}

// optional int32 left_time = 3;
inline bool S2C_Present_Clover_Rsp::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_Present_Clover_Rsp::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_Present_Clover_Rsp::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_Present_Clover_Rsp::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 S2C_Present_Clover_Rsp::left_time() const {
  return left_time_;
}
inline void S2C_Present_Clover_Rsp::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// C2S_Lottery_Draw_Req

// required int32 draw_type = 1;
inline bool C2S_Lottery_Draw_Req::has_draw_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Lottery_Draw_Req::set_has_draw_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Lottery_Draw_Req::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Lottery_Draw_Req::clear_draw_type() {
  draw_type_ = 0;
  clear_has_draw_type();
}
inline ::google::protobuf::int32 C2S_Lottery_Draw_Req::draw_type() const {
  return draw_type_;
}
inline void C2S_Lottery_Draw_Req::set_draw_type(::google::protobuf::int32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// -------------------------------------------------------------------

// S2C_Lottery_Draw_Rsp

// required int32 ret_code = 1;
inline bool S2C_Lottery_Draw_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Lottery_Draw_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Lottery_Draw_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Lottery_Draw_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Lottery_Draw_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Lottery_Draw_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional uint32 curr_present_points = 2;
inline bool S2C_Lottery_Draw_Rsp::has_curr_present_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_Lottery_Draw_Rsp::set_has_curr_present_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_Lottery_Draw_Rsp::clear_has_curr_present_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_Lottery_Draw_Rsp::clear_curr_present_points() {
  curr_present_points_ = 0u;
  clear_has_curr_present_points();
}
inline ::google::protobuf::uint32 S2C_Lottery_Draw_Rsp::curr_present_points() const {
  return curr_present_points_;
}
inline void S2C_Lottery_Draw_Rsp::set_curr_present_points(::google::protobuf::uint32 value) {
  set_has_curr_present_points();
  curr_present_points_ = value;
}

// repeated .DBCACHE.Prop drew_prop = 3;
inline int S2C_Lottery_Draw_Rsp::drew_prop_size() const {
  return drew_prop_.size();
}
inline void S2C_Lottery_Draw_Rsp::clear_drew_prop() {
  drew_prop_.Clear();
}
inline const ::DBCACHE::Prop& S2C_Lottery_Draw_Rsp::drew_prop(int index) const {
  return drew_prop_.Get(index);
}
inline ::DBCACHE::Prop* S2C_Lottery_Draw_Rsp::mutable_drew_prop(int index) {
  return drew_prop_.Mutable(index);
}
inline ::DBCACHE::Prop* S2C_Lottery_Draw_Rsp::add_drew_prop() {
  return drew_prop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
S2C_Lottery_Draw_Rsp::drew_prop() const {
  return drew_prop_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
S2C_Lottery_Draw_Rsp::mutable_drew_prop() {
  return &drew_prop_;
}

// repeated .DBCACHE.Prop undrew_prop1 = 4;
inline int S2C_Lottery_Draw_Rsp::undrew_prop1_size() const {
  return undrew_prop1_.size();
}
inline void S2C_Lottery_Draw_Rsp::clear_undrew_prop1() {
  undrew_prop1_.Clear();
}
inline const ::DBCACHE::Prop& S2C_Lottery_Draw_Rsp::undrew_prop1(int index) const {
  return undrew_prop1_.Get(index);
}
inline ::DBCACHE::Prop* S2C_Lottery_Draw_Rsp::mutable_undrew_prop1(int index) {
  return undrew_prop1_.Mutable(index);
}
inline ::DBCACHE::Prop* S2C_Lottery_Draw_Rsp::add_undrew_prop1() {
  return undrew_prop1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
S2C_Lottery_Draw_Rsp::undrew_prop1() const {
  return undrew_prop1_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
S2C_Lottery_Draw_Rsp::mutable_undrew_prop1() {
  return &undrew_prop1_;
}

// repeated .DBCACHE.Prop undrew_prop2 = 5;
inline int S2C_Lottery_Draw_Rsp::undrew_prop2_size() const {
  return undrew_prop2_.size();
}
inline void S2C_Lottery_Draw_Rsp::clear_undrew_prop2() {
  undrew_prop2_.Clear();
}
inline const ::DBCACHE::Prop& S2C_Lottery_Draw_Rsp::undrew_prop2(int index) const {
  return undrew_prop2_.Get(index);
}
inline ::DBCACHE::Prop* S2C_Lottery_Draw_Rsp::mutable_undrew_prop2(int index) {
  return undrew_prop2_.Mutable(index);
}
inline ::DBCACHE::Prop* S2C_Lottery_Draw_Rsp::add_undrew_prop2() {
  return undrew_prop2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >&
S2C_Lottery_Draw_Rsp::undrew_prop2() const {
  return undrew_prop2_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::Prop >*
S2C_Lottery_Draw_Rsp::mutable_undrew_prop2() {
  return &undrew_prop2_;
}

// -------------------------------------------------------------------

// C2S_Upload_Custom_Head_Req

// required string new_head = 1;
inline bool C2S_Upload_Custom_Head_Req::has_new_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Upload_Custom_Head_Req::set_has_new_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Upload_Custom_Head_Req::clear_has_new_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Upload_Custom_Head_Req::clear_new_head() {
  if (new_head_ != &::google::protobuf::internal::kEmptyString) {
    new_head_->clear();
  }
  clear_has_new_head();
}
inline const ::std::string& C2S_Upload_Custom_Head_Req::new_head() const {
  return *new_head_;
}
inline void C2S_Upload_Custom_Head_Req::set_new_head(const ::std::string& value) {
  set_has_new_head();
  if (new_head_ == &::google::protobuf::internal::kEmptyString) {
    new_head_ = new ::std::string;
  }
  new_head_->assign(value);
}
inline void C2S_Upload_Custom_Head_Req::set_new_head(const char* value) {
  set_has_new_head();
  if (new_head_ == &::google::protobuf::internal::kEmptyString) {
    new_head_ = new ::std::string;
  }
  new_head_->assign(value);
}
inline void C2S_Upload_Custom_Head_Req::set_new_head(const char* value, size_t size) {
  set_has_new_head();
  if (new_head_ == &::google::protobuf::internal::kEmptyString) {
    new_head_ = new ::std::string;
  }
  new_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_Upload_Custom_Head_Req::mutable_new_head() {
  set_has_new_head();
  if (new_head_ == &::google::protobuf::internal::kEmptyString) {
    new_head_ = new ::std::string;
  }
  return new_head_;
}
inline ::std::string* C2S_Upload_Custom_Head_Req::release_new_head() {
  clear_has_new_head();
  if (new_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_head_;
    new_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_Upload_Custom_Head_Req::set_allocated_new_head(::std::string* new_head) {
  if (new_head_ != &::google::protobuf::internal::kEmptyString) {
    delete new_head_;
  }
  if (new_head) {
    set_has_new_head();
    new_head_ = new_head;
  } else {
    clear_has_new_head();
    new_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_Upload_Custom_Head_Rsp

// required int32 ret_code = 1;
inline bool S2C_Upload_Custom_Head_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Upload_Custom_Head_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Upload_Custom_Head_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Upload_Custom_Head_Rsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_Upload_Custom_Head_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_Upload_Custom_Head_Rsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// S2C_New_System_Message

// required uint32 message_type = 1;
inline bool S2C_New_System_Message::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_New_System_Message::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_New_System_Message::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_New_System_Message::clear_message_type() {
  message_type_ = 0u;
  clear_has_message_type();
}
inline ::google::protobuf::uint32 S2C_New_System_Message::message_type() const {
  return message_type_;
}
inline void S2C_New_System_Message::set_message_type(::google::protobuf::uint32 value) {
  set_has_message_type();
  message_type_ = value;
}

// required int32 message_id = 2;
inline bool S2C_New_System_Message::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_New_System_Message::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_New_System_Message::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_New_System_Message::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 S2C_New_System_Message::message_id() const {
  return message_id_;
}
inline void S2C_New_System_Message::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional bytes message_context = 3;
inline bool S2C_New_System_Message::has_message_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_New_System_Message::set_has_message_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_New_System_Message::clear_has_message_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_New_System_Message::clear_message_context() {
  if (message_context_ != &::google::protobuf::internal::kEmptyString) {
    message_context_->clear();
  }
  clear_has_message_context();
}
inline const ::std::string& S2C_New_System_Message::message_context() const {
  return *message_context_;
}
inline void S2C_New_System_Message::set_message_context(const ::std::string& value) {
  set_has_message_context();
  if (message_context_ == &::google::protobuf::internal::kEmptyString) {
    message_context_ = new ::std::string;
  }
  message_context_->assign(value);
}
inline void S2C_New_System_Message::set_message_context(const char* value) {
  set_has_message_context();
  if (message_context_ == &::google::protobuf::internal::kEmptyString) {
    message_context_ = new ::std::string;
  }
  message_context_->assign(value);
}
inline void S2C_New_System_Message::set_message_context(const void* value, size_t size) {
  set_has_message_context();
  if (message_context_ == &::google::protobuf::internal::kEmptyString) {
    message_context_ = new ::std::string;
  }
  message_context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2C_New_System_Message::mutable_message_context() {
  set_has_message_context();
  if (message_context_ == &::google::protobuf::internal::kEmptyString) {
    message_context_ = new ::std::string;
  }
  return message_context_;
}
inline ::std::string* S2C_New_System_Message::release_message_context() {
  clear_has_message_context();
  if (message_context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_context_;
    message_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2C_New_System_Message::set_allocated_message_context(::std::string* message_context) {
  if (message_context_ != &::google::protobuf::internal::kEmptyString) {
    delete message_context_;
  }
  if (message_context) {
    set_has_message_context();
    message_context_ = message_context;
  } else {
    clear_has_message_context();
    message_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_Kick_Off_User

// required int32 reason = 1;
inline bool S2C_Kick_Off_User::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_Kick_Off_User::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_Kick_Off_User::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_Kick_Off_User::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 S2C_Kick_Off_User::reason() const {
  return reason_;
}
inline void S2C_Kick_Off_User::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// D2Z_load_player_info

// required bool is_existed = 1;
inline bool D2Z_load_player_info::has_is_existed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void D2Z_load_player_info::set_has_is_existed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void D2Z_load_player_info::clear_has_is_existed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void D2Z_load_player_info::clear_is_existed() {
  is_existed_ = false;
  clear_has_is_existed();
}
inline bool D2Z_load_player_info::is_existed() const {
  return is_existed_;
}
inline void D2Z_load_player_info::set_is_existed(bool value) {
  set_has_is_existed();
  is_existed_ = value;
}

// optional .DBCACHE.Player currentplayer = 2;
inline bool D2Z_load_player_info::has_currentplayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void D2Z_load_player_info::set_has_currentplayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void D2Z_load_player_info::clear_has_currentplayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void D2Z_load_player_info::clear_currentplayer() {
  if (currentplayer_ != NULL) currentplayer_->::DBCACHE::Player::Clear();
  clear_has_currentplayer();
}
inline const ::DBCACHE::Player& D2Z_load_player_info::currentplayer() const {
  return currentplayer_ != NULL ? *currentplayer_ : *default_instance_->currentplayer_;
}
inline ::DBCACHE::Player* D2Z_load_player_info::mutable_currentplayer() {
  set_has_currentplayer();
  if (currentplayer_ == NULL) currentplayer_ = new ::DBCACHE::Player;
  return currentplayer_;
}
inline ::DBCACHE::Player* D2Z_load_player_info::release_currentplayer() {
  clear_has_currentplayer();
  ::DBCACHE::Player* temp = currentplayer_;
  currentplayer_ = NULL;
  return temp;
}
inline void D2Z_load_player_info::set_allocated_currentplayer(::DBCACHE::Player* currentplayer) {
  delete currentplayer_;
  currentplayer_ = currentplayer;
  if (currentplayer) {
    set_has_currentplayer();
  } else {
    clear_has_currentplayer();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::S2C_Present_Clover_Rsp_RET_CODE>() {
  return ::S2C_Present_Clover_Rsp_RET_CODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::C2S_Lottery_Draw_Req_DrawType>() {
  return ::C2S_Lottery_Draw_Req_DrawType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::S2C_Kick_Off_User_KickReason>() {
  return ::S2C_Kick_Off_User_KickReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
