// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef PROTOBUF_report_2eproto__INCLUDED
#define PROTOBUF_report_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace REPORT {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_report_2eproto();
void protobuf_AssignDesc_report_2eproto();
void protobuf_ShutdownFile_report_2eproto();

class ReportSomething;

// ===================================================================

class ReportSomething : public ::google::protobuf::Message {
 public:
  ReportSomething();
  virtual ~ReportSomething();

  ReportSomething(const ReportSomething& from);

  inline ReportSomething& operator=(const ReportSomething& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSomething& default_instance();

  void Swap(ReportSomething* other);

  // implements Message ----------------------------------------------

  ReportSomething* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSomething& from);
  void MergeFrom(const ReportSomething& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 channel_id = 4;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 4;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);

  // optional int32 log_type = 5;
  inline bool has_log_type() const;
  inline void clear_log_type();
  static const int kLogTypeFieldNumber = 5;
  inline ::google::protobuf::int32 log_type() const;
  inline void set_log_type(::google::protobuf::int32 value);

  // optional string log_data = 6;
  inline bool has_log_data() const;
  inline void clear_log_data();
  static const int kLogDataFieldNumber = 6;
  inline const ::std::string& log_data() const;
  inline void set_log_data(const ::std::string& value);
  inline void set_log_data(const char* value);
  inline void set_log_data(const char* value, size_t size);
  inline ::std::string* mutable_log_data();
  inline ::std::string* release_log_data();
  inline void set_allocated_log_data(::std::string* log_data);

  // optional int32 log_result = 7;
  inline bool has_log_result() const;
  inline void clear_log_result();
  static const int kLogResultFieldNumber = 7;
  inline ::google::protobuf::int32 log_result() const;
  inline void set_log_result(::google::protobuf::int32 value);

  // optional string param1 = 8;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 8;
  inline const ::std::string& param1() const;
  inline void set_param1(const ::std::string& value);
  inline void set_param1(const char* value);
  inline void set_param1(const char* value, size_t size);
  inline ::std::string* mutable_param1();
  inline ::std::string* release_param1();
  inline void set_allocated_param1(::std::string* param1);

  // optional string param2 = 9;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 9;
  inline const ::std::string& param2() const;
  inline void set_param2(const ::std::string& value);
  inline void set_param2(const char* value);
  inline void set_param2(const char* value, size_t size);
  inline ::std::string* mutable_param2();
  inline ::std::string* release_param2();
  inline void set_allocated_param2(::std::string* param2);

  // optional string param3 = 10;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 10;
  inline const ::std::string& param3() const;
  inline void set_param3(const ::std::string& value);
  inline void set_param3(const char* value);
  inline void set_param3(const char* value, size_t size);
  inline ::std::string* mutable_param3();
  inline ::std::string* release_param3();
  inline void set_allocated_param3(::std::string* param3);

  // optional string param4 = 11;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 11;
  inline const ::std::string& param4() const;
  inline void set_param4(const ::std::string& value);
  inline void set_param4(const char* value);
  inline void set_param4(const char* value, size_t size);
  inline ::std::string* mutable_param4();
  inline ::std::string* release_param4();
  inline void set_allocated_param4(::std::string* param4);

  // optional string param5 = 12;
  inline bool has_param5() const;
  inline void clear_param5();
  static const int kParam5FieldNumber = 12;
  inline const ::std::string& param5() const;
  inline void set_param5(const ::std::string& value);
  inline void set_param5(const char* value);
  inline void set_param5(const char* value, size_t size);
  inline ::std::string* mutable_param5();
  inline ::std::string* release_param5();
  inline void set_allocated_param5(::std::string* param5);

  // optional string param6 = 13;
  inline bool has_param6() const;
  inline void clear_param6();
  static const int kParam6FieldNumber = 13;
  inline const ::std::string& param6() const;
  inline void set_param6(const ::std::string& value);
  inline void set_param6(const char* value);
  inline void set_param6(const char* value, size_t size);
  inline ::std::string* mutable_param6();
  inline ::std::string* release_param6();
  inline void set_allocated_param6(::std::string* param6);

  // @@protoc_insertion_point(class_scope:REPORT.ReportSomething)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_log_type();
  inline void clear_has_log_type();
  inline void set_has_log_data();
  inline void clear_has_log_data();
  inline void set_has_log_result();
  inline void clear_has_log_result();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();
  inline void set_has_param5();
  inline void clear_has_param5();
  inline void set_has_param6();
  inline void clear_has_param6();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 channel_id_;
  ::google::protobuf::int32 log_type_;
  ::std::string* log_data_;
  ::std::string* param1_;
  ::std::string* param2_;
  ::std::string* param3_;
  ::std::string* param4_;
  ::std::string* param5_;
  ::std::string* param6_;
  ::google::protobuf::int32 log_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportSomething* default_instance_;
};
// ===================================================================


// ===================================================================

// ReportSomething

// optional string type = 1;
inline bool ReportSomething::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSomething::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSomething::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSomething::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ReportSomething::type() const {
  return *type_;
}
inline void ReportSomething::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ReportSomething::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ReportSomething::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* ReportSomething::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 user_id = 2;
inline bool ReportSomething::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSomething::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSomething::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSomething::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 ReportSomething::user_id() const {
  return user_id_;
}
inline void ReportSomething::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 server_id = 3;
inline bool ReportSomething::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportSomething::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportSomething::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportSomething::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 ReportSomething::server_id() const {
  return server_id_;
}
inline void ReportSomething::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 channel_id = 4;
inline bool ReportSomething::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportSomething::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportSomething::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportSomething::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 ReportSomething::channel_id() const {
  return channel_id_;
}
inline void ReportSomething::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional int32 log_type = 5;
inline bool ReportSomething::has_log_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportSomething::set_has_log_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportSomething::clear_has_log_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportSomething::clear_log_type() {
  log_type_ = 0;
  clear_has_log_type();
}
inline ::google::protobuf::int32 ReportSomething::log_type() const {
  return log_type_;
}
inline void ReportSomething::set_log_type(::google::protobuf::int32 value) {
  set_has_log_type();
  log_type_ = value;
}

// optional string log_data = 6;
inline bool ReportSomething::has_log_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReportSomething::set_has_log_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReportSomething::clear_has_log_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReportSomething::clear_log_data() {
  if (log_data_ != &::google::protobuf::internal::kEmptyString) {
    log_data_->clear();
  }
  clear_has_log_data();
}
inline const ::std::string& ReportSomething::log_data() const {
  return *log_data_;
}
inline void ReportSomething::set_log_data(const ::std::string& value) {
  set_has_log_data();
  if (log_data_ == &::google::protobuf::internal::kEmptyString) {
    log_data_ = new ::std::string;
  }
  log_data_->assign(value);
}
inline void ReportSomething::set_log_data(const char* value) {
  set_has_log_data();
  if (log_data_ == &::google::protobuf::internal::kEmptyString) {
    log_data_ = new ::std::string;
  }
  log_data_->assign(value);
}
inline void ReportSomething::set_log_data(const char* value, size_t size) {
  set_has_log_data();
  if (log_data_ == &::google::protobuf::internal::kEmptyString) {
    log_data_ = new ::std::string;
  }
  log_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_log_data() {
  set_has_log_data();
  if (log_data_ == &::google::protobuf::internal::kEmptyString) {
    log_data_ = new ::std::string;
  }
  return log_data_;
}
inline ::std::string* ReportSomething::release_log_data() {
  clear_has_log_data();
  if (log_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_data_;
    log_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_log_data(::std::string* log_data) {
  if (log_data_ != &::google::protobuf::internal::kEmptyString) {
    delete log_data_;
  }
  if (log_data) {
    set_has_log_data();
    log_data_ = log_data;
  } else {
    clear_has_log_data();
    log_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 log_result = 7;
inline bool ReportSomething::has_log_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReportSomething::set_has_log_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReportSomething::clear_has_log_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReportSomething::clear_log_result() {
  log_result_ = 0;
  clear_has_log_result();
}
inline ::google::protobuf::int32 ReportSomething::log_result() const {
  return log_result_;
}
inline void ReportSomething::set_log_result(::google::protobuf::int32 value) {
  set_has_log_result();
  log_result_ = value;
}

// optional string param1 = 8;
inline bool ReportSomething::has_param1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReportSomething::set_has_param1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReportSomething::clear_has_param1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReportSomething::clear_param1() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    param1_->clear();
  }
  clear_has_param1();
}
inline const ::std::string& ReportSomething::param1() const {
  return *param1_;
}
inline void ReportSomething::set_param1(const ::std::string& value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void ReportSomething::set_param1(const char* value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void ReportSomething::set_param1(const char* value, size_t size) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_param1() {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  return param1_;
}
inline ::std::string* ReportSomething::release_param1() {
  clear_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param1_;
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_param1(::std::string* param1) {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param1) {
    set_has_param1();
    param1_ = param1;
  } else {
    clear_has_param1();
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string param2 = 9;
inline bool ReportSomething::has_param2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReportSomething::set_has_param2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReportSomething::clear_has_param2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReportSomething::clear_param2() {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    param2_->clear();
  }
  clear_has_param2();
}
inline const ::std::string& ReportSomething::param2() const {
  return *param2_;
}
inline void ReportSomething::set_param2(const ::std::string& value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void ReportSomething::set_param2(const char* value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void ReportSomething::set_param2(const char* value, size_t size) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_param2() {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  return param2_;
}
inline ::std::string* ReportSomething::release_param2() {
  clear_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param2_;
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_param2(::std::string* param2) {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (param2) {
    set_has_param2();
    param2_ = param2;
  } else {
    clear_has_param2();
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string param3 = 10;
inline bool ReportSomething::has_param3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReportSomething::set_has_param3() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReportSomething::clear_has_param3() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReportSomething::clear_param3() {
  if (param3_ != &::google::protobuf::internal::kEmptyString) {
    param3_->clear();
  }
  clear_has_param3();
}
inline const ::std::string& ReportSomething::param3() const {
  return *param3_;
}
inline void ReportSomething::set_param3(const ::std::string& value) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  param3_->assign(value);
}
inline void ReportSomething::set_param3(const char* value) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  param3_->assign(value);
}
inline void ReportSomething::set_param3(const char* value, size_t size) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  param3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_param3() {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  return param3_;
}
inline ::std::string* ReportSomething::release_param3() {
  clear_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param3_;
    param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_param3(::std::string* param3) {
  if (param3_ != &::google::protobuf::internal::kEmptyString) {
    delete param3_;
  }
  if (param3) {
    set_has_param3();
    param3_ = param3;
  } else {
    clear_has_param3();
    param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string param4 = 11;
inline bool ReportSomething::has_param4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReportSomething::set_has_param4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReportSomething::clear_has_param4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReportSomething::clear_param4() {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    param4_->clear();
  }
  clear_has_param4();
}
inline const ::std::string& ReportSomething::param4() const {
  return *param4_;
}
inline void ReportSomething::set_param4(const ::std::string& value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void ReportSomething::set_param4(const char* value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
}
inline void ReportSomething::set_param4(const char* value, size_t size) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  param4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_param4() {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    param4_ = new ::std::string;
  }
  return param4_;
}
inline ::std::string* ReportSomething::release_param4() {
  clear_has_param4();
  if (param4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param4_;
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_param4(::std::string* param4) {
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (param4) {
    set_has_param4();
    param4_ = param4;
  } else {
    clear_has_param4();
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string param5 = 12;
inline bool ReportSomething::has_param5() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReportSomething::set_has_param5() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReportSomething::clear_has_param5() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReportSomething::clear_param5() {
  if (param5_ != &::google::protobuf::internal::kEmptyString) {
    param5_->clear();
  }
  clear_has_param5();
}
inline const ::std::string& ReportSomething::param5() const {
  return *param5_;
}
inline void ReportSomething::set_param5(const ::std::string& value) {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::kEmptyString) {
    param5_ = new ::std::string;
  }
  param5_->assign(value);
}
inline void ReportSomething::set_param5(const char* value) {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::kEmptyString) {
    param5_ = new ::std::string;
  }
  param5_->assign(value);
}
inline void ReportSomething::set_param5(const char* value, size_t size) {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::kEmptyString) {
    param5_ = new ::std::string;
  }
  param5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_param5() {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::kEmptyString) {
    param5_ = new ::std::string;
  }
  return param5_;
}
inline ::std::string* ReportSomething::release_param5() {
  clear_has_param5();
  if (param5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param5_;
    param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_param5(::std::string* param5) {
  if (param5_ != &::google::protobuf::internal::kEmptyString) {
    delete param5_;
  }
  if (param5) {
    set_has_param5();
    param5_ = param5;
  } else {
    clear_has_param5();
    param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string param6 = 13;
inline bool ReportSomething::has_param6() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReportSomething::set_has_param6() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReportSomething::clear_has_param6() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReportSomething::clear_param6() {
  if (param6_ != &::google::protobuf::internal::kEmptyString) {
    param6_->clear();
  }
  clear_has_param6();
}
inline const ::std::string& ReportSomething::param6() const {
  return *param6_;
}
inline void ReportSomething::set_param6(const ::std::string& value) {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::kEmptyString) {
    param6_ = new ::std::string;
  }
  param6_->assign(value);
}
inline void ReportSomething::set_param6(const char* value) {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::kEmptyString) {
    param6_ = new ::std::string;
  }
  param6_->assign(value);
}
inline void ReportSomething::set_param6(const char* value, size_t size) {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::kEmptyString) {
    param6_ = new ::std::string;
  }
  param6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportSomething::mutable_param6() {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::kEmptyString) {
    param6_ = new ::std::string;
  }
  return param6_;
}
inline ::std::string* ReportSomething::release_param6() {
  clear_has_param6();
  if (param6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param6_;
    param6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportSomething::set_allocated_param6(::std::string* param6) {
  if (param6_ != &::google::protobuf::internal::kEmptyString) {
    delete param6_;
  }
  if (param6) {
    set_has_param6();
    param6_ = param6;
  } else {
    clear_has_param6();
    param6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace REPORT

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_report_2eproto__INCLUDED
