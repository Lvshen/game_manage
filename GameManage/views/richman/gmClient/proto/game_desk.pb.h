// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_desk.proto

#ifndef PROTOBUF_game_5fdesk_2eproto__INCLUDED
#define PROTOBUF_game_5fdesk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "player_match.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fdesk_2eproto();
void protobuf_AssignDesc_game_5fdesk_2eproto();
void protobuf_ShutdownFile_game_5fdesk_2eproto();

class C2S_SelectFirstCard;
class SelectedFirstCard;
class FirstCardInfo;
class DicingResult;
class DicingResult_ThreeSamePoint;
class GridOper;
class SellOffCity;
class Bankrupt;
class BuildCity;
class GiveToll;
class GiveToll_Purch;
class GiveToll_Toll;
class Coin;
class BuildIsland;
class HoldPeak;
class Tollage;
class RandEvent;
class RandEvent_CmdCardOper;
class RandEvent_AttackOper;
class RandEvent_AttackOper_ChangeCity;
class Start;
class ActionResult;
class BuildRsp;
class BuildRsp_BuildCity;
class BuildRsp_BuildIsland;
class HoldPeakRsp;
class CoinThrowRsp;
class PurchaseRsp;
class FlyRsp;
class StartPointRsp;
class BankruptRsp;
class UseCardRsp;
class RandEventRsp;
class RandEventRsp_IslandInfo;
class RandEventRsp_CmdCardOperRes;
class RandEventRsp_CmdCardOperRes_MoveCmd;
class RandEventRsp_AttackOperRes;
class RandEventRsp_AttackOperRes_ChangeCityRsp;
class RandEventRsp_AttackOperRes_EarthQuakeRsp;
class RandEventRsp_AttackOperRes_UfoRsp;
class RandEventRsp_AttackOperRes_RecoveryInfo;
class PlayerResult;
class GridInfo;
class GridInfo_AttackState;
class PlayerGameInfo;
class GameInfoChange;
class OccupyWarn;
class OccupyWarn_LastOccupy;
class OccupyWarn_ThreeColor;
class NextOper;
class S2C_SenceInfo;
class C2S_InviteReq;
class S2C_NitifyPlayerInvite;
class C2S_AutoReq;
class S2C_NotifyPlayerAuto;
class C2S_OffsetSocreReq;
class S2C_OffsetSocreRsp;
class C2S_SendSmsInRoom;
class S2C_NotifySms;

// ===================================================================

class C2S_SelectFirstCard : public ::google::protobuf::Message {
 public:
  C2S_SelectFirstCard();
  virtual ~C2S_SelectFirstCard();

  C2S_SelectFirstCard(const C2S_SelectFirstCard& from);

  inline C2S_SelectFirstCard& operator=(const C2S_SelectFirstCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_SelectFirstCard& default_instance();

  void Swap(C2S_SelectFirstCard* other);

  // implements Message ----------------------------------------------

  C2S_SelectFirstCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_SelectFirstCard& from);
  void MergeFrom(const C2S_SelectFirstCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_SelectFirstCard)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static C2S_SelectFirstCard* default_instance_;
};
// -------------------------------------------------------------------

class SelectedFirstCard : public ::google::protobuf::Message {
 public:
  SelectedFirstCard();
  virtual ~SelectedFirstCard();

  SelectedFirstCard(const SelectedFirstCard& from);

  inline SelectedFirstCard& operator=(const SelectedFirstCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectedFirstCard& default_instance();

  void Swap(SelectedFirstCard* other);

  // implements Message ----------------------------------------------

  SelectedFirstCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectedFirstCard& from);
  void MergeFrom(const SelectedFirstCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SelectedFirstCard)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static SelectedFirstCard* default_instance_;
};
// -------------------------------------------------------------------

class FirstCardInfo : public ::google::protobuf::Message {
 public:
  FirstCardInfo();
  virtual ~FirstCardInfo();

  FirstCardInfo(const FirstCardInfo& from);

  inline FirstCardInfo& operator=(const FirstCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstCardInfo& default_instance();

  void Swap(FirstCardInfo* other);

  // implements Message ----------------------------------------------

  FirstCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstCardInfo& from);
  void MergeFrom(const FirstCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 seat_no = 2;
  inline bool has_seat_no() const;
  inline void clear_seat_no();
  static const int kSeatNoFieldNumber = 2;
  inline ::google::protobuf::int32 seat_no() const;
  inline void set_seat_no(::google::protobuf::int32 value);

  // repeated int32 player_sort = 3;
  inline int player_sort_size() const;
  inline void clear_player_sort();
  static const int kPlayerSortFieldNumber = 3;
  inline ::google::protobuf::int32 player_sort(int index) const;
  inline void set_player_sort(int index, ::google::protobuf::int32 value);
  inline void add_player_sort(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_sort() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_sort();

  // @@protoc_insertion_point(class_scope:FirstCardInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_seat_no();
  inline void clear_has_seat_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 seat_no_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_sort_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static FirstCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class DicingResult_ThreeSamePoint : public ::google::protobuf::Message {
 public:
  DicingResult_ThreeSamePoint();
  virtual ~DicingResult_ThreeSamePoint();

  DicingResult_ThreeSamePoint(const DicingResult_ThreeSamePoint& from);

  inline DicingResult_ThreeSamePoint& operator=(const DicingResult_ThreeSamePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DicingResult_ThreeSamePoint& default_instance();

  void Swap(DicingResult_ThreeSamePoint* other);

  // implements Message ----------------------------------------------

  DicingResult_ThreeSamePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DicingResult_ThreeSamePoint& from);
  void MergeFrom(const DicingResult_ThreeSamePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool three_point_same = 1;
  inline bool has_three_point_same() const;
  inline void clear_three_point_same();
  static const int kThreePointSameFieldNumber = 1;
  inline bool three_point_same() const;
  inline void set_three_point_same(bool value);

  // optional int32 posi = 2;
  inline bool has_posi() const;
  inline void clear_posi();
  static const int kPosiFieldNumber = 2;
  inline ::google::protobuf::int32 posi() const;
  inline void set_posi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DicingResult.ThreeSamePoint)
 private:
  inline void set_has_three_point_same();
  inline void clear_has_three_point_same();
  inline void set_has_posi();
  inline void clear_has_posi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool three_point_same_;
  ::google::protobuf::int32 posi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static DicingResult_ThreeSamePoint* default_instance_;
};
// -------------------------------------------------------------------

class DicingResult : public ::google::protobuf::Message {
 public:
  DicingResult();
  virtual ~DicingResult();

  DicingResult(const DicingResult& from);

  inline DicingResult& operator=(const DicingResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DicingResult& default_instance();

  void Swap(DicingResult* other);

  // implements Message ----------------------------------------------

  DicingResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DicingResult& from);
  void MergeFrom(const DicingResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DicingResult_ThreeSamePoint ThreeSamePoint;

  // accessors -------------------------------------------------------

  // required int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 first_point = 2;
  inline bool has_first_point() const;
  inline void clear_first_point();
  static const int kFirstPointFieldNumber = 2;
  inline ::google::protobuf::int32 first_point() const;
  inline void set_first_point(::google::protobuf::int32 value);

  // optional int32 second_point = 3;
  inline bool has_second_point() const;
  inline void clear_second_point();
  static const int kSecondPointFieldNumber = 3;
  inline ::google::protobuf::int32 second_point() const;
  inline void set_second_point(::google::protobuf::int32 value);

  // optional int32 has_dice_ctrl = 4;
  inline bool has_has_dice_ctrl() const;
  inline void clear_has_dice_ctrl();
  static const int kHasDiceCtrlFieldNumber = 4;
  inline ::google::protobuf::int32 has_dice_ctrl() const;
  inline void set_has_dice_ctrl(::google::protobuf::int32 value);

  // optional bool pass_start = 5;
  inline bool has_pass_start() const;
  inline void clear_pass_start();
  static const int kPassStartFieldNumber = 5;
  inline bool pass_start() const;
  inline void set_pass_start(bool value);

  // optional bool can_move = 6;
  inline bool has_can_move() const;
  inline void clear_can_move();
  static const int kCanMoveFieldNumber = 6;
  inline bool can_move() const;
  inline void set_can_move(bool value);

  // optional .DicingResult.ThreeSamePoint three_same_point = 7;
  inline bool has_three_same_point() const;
  inline void clear_three_same_point();
  static const int kThreeSamePointFieldNumber = 7;
  inline const ::DicingResult_ThreeSamePoint& three_same_point() const;
  inline ::DicingResult_ThreeSamePoint* mutable_three_same_point();
  inline ::DicingResult_ThreeSamePoint* release_three_same_point();
  inline void set_allocated_three_same_point(::DicingResult_ThreeSamePoint* three_same_point);

  // optional int32 total_round = 8;
  inline bool has_total_round() const;
  inline void clear_total_round();
  static const int kTotalRoundFieldNumber = 8;
  inline ::google::protobuf::int32 total_round() const;
  inline void set_total_round(::google::protobuf::int32 value);

  // optional int32 target_posi = 9;
  inline bool has_target_posi() const;
  inline void clear_target_posi();
  static const int kTargetPosiFieldNumber = 9;
  inline ::google::protobuf::int32 target_posi() const;
  inline void set_target_posi(::google::protobuf::int32 value);

  // optional int32 user_prop = 10;
  inline bool has_user_prop() const;
  inline void clear_user_prop();
  static const int kUserPropFieldNumber = 10;
  inline ::google::protobuf::int32 user_prop() const;
  inline void set_user_prop(::google::protobuf::int32 value);

  // optional .GridOper grid_oper = 11;
  inline bool has_grid_oper() const;
  inline void clear_grid_oper();
  static const int kGridOperFieldNumber = 11;
  inline const ::GridOper& grid_oper() const;
  inline ::GridOper* mutable_grid_oper();
  inline ::GridOper* release_grid_oper();
  inline void set_allocated_grid_oper(::GridOper* grid_oper);

  // @@protoc_insertion_point(class_scope:DicingResult)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_first_point();
  inline void clear_has_first_point();
  inline void set_has_second_point();
  inline void clear_has_second_point();
  inline void set_has_has_dice_ctrl();
  inline void clear_has_has_dice_ctrl();
  inline void set_has_pass_start();
  inline void clear_has_pass_start();
  inline void set_has_can_move();
  inline void clear_has_can_move();
  inline void set_has_three_same_point();
  inline void clear_has_three_same_point();
  inline void set_has_total_round();
  inline void clear_has_total_round();
  inline void set_has_target_posi();
  inline void clear_has_target_posi();
  inline void set_has_user_prop();
  inline void clear_has_user_prop();
  inline void set_has_grid_oper();
  inline void clear_has_grid_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 first_point_;
  ::google::protobuf::int32 second_point_;
  ::google::protobuf::int32 has_dice_ctrl_;
  bool pass_start_;
  bool can_move_;
  ::google::protobuf::int32 total_round_;
  ::DicingResult_ThreeSamePoint* three_same_point_;
  ::google::protobuf::int32 target_posi_;
  ::google::protobuf::int32 user_prop_;
  ::GridOper* grid_oper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static DicingResult* default_instance_;
};
// -------------------------------------------------------------------

class GridOper : public ::google::protobuf::Message {
 public:
  GridOper();
  virtual ~GridOper();

  GridOper(const GridOper& from);

  inline GridOper& operator=(const GridOper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridOper& default_instance();

  void Swap(GridOper* other);

  // implements Message ----------------------------------------------

  GridOper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridOper& from);
  void MergeFrom(const GridOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opra_type = 1;
  inline bool has_opra_type() const;
  inline void clear_opra_type();
  static const int kOpraTypeFieldNumber = 1;
  inline ::google::protobuf::int32 opra_type() const;
  inline void set_opra_type(::google::protobuf::int32 value);

  // optional int32 opra_grid = 2;
  inline bool has_opra_grid() const;
  inline void clear_opra_grid();
  static const int kOpraGridFieldNumber = 2;
  inline ::google::protobuf::int32 opra_grid() const;
  inline void set_opra_grid(::google::protobuf::int32 value);

  // optional .BuildCity build = 3;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 3;
  inline const ::BuildCity& build() const;
  inline ::BuildCity* mutable_build();
  inline ::BuildCity* release_build();
  inline void set_allocated_build(::BuildCity* build);

  // optional .GiveToll toll = 4;
  inline bool has_toll() const;
  inline void clear_toll();
  static const int kTollFieldNumber = 4;
  inline const ::GiveToll& toll() const;
  inline ::GiveToll* mutable_toll();
  inline ::GiveToll* release_toll();
  inline void set_allocated_toll(::GiveToll* toll);

  // optional .Coin coin = 5;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 5;
  inline const ::Coin& coin() const;
  inline ::Coin* mutable_coin();
  inline ::Coin* release_coin();
  inline void set_allocated_coin(::Coin* coin);

  // optional .BuildIsland build_island = 6;
  inline bool has_build_island() const;
  inline void clear_build_island();
  static const int kBuildIslandFieldNumber = 6;
  inline const ::BuildIsland& build_island() const;
  inline ::BuildIsland* mutable_build_island();
  inline ::BuildIsland* release_build_island();
  inline void set_allocated_build_island(::BuildIsland* build_island);

  // optional .HoldPeak peak = 7;
  inline bool has_peak() const;
  inline void clear_peak();
  static const int kPeakFieldNumber = 7;
  inline const ::HoldPeak& peak() const;
  inline ::HoldPeak* mutable_peak();
  inline ::HoldPeak* release_peak();
  inline void set_allocated_peak(::HoldPeak* peak);

  // optional .Tollage tollage = 8;
  inline bool has_tollage() const;
  inline void clear_tollage();
  static const int kTollageFieldNumber = 8;
  inline const ::Tollage& tollage() const;
  inline ::Tollage* mutable_tollage();
  inline ::Tollage* release_tollage();
  inline void set_allocated_tollage(::Tollage* tollage);

  // optional .RandEvent event = 9;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 9;
  inline const ::RandEvent& event() const;
  inline ::RandEvent* mutable_event();
  inline ::RandEvent* release_event();
  inline void set_allocated_event(::RandEvent* event);

  // optional .Start start = 10;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 10;
  inline const ::Start& start() const;
  inline ::Start* mutable_start();
  inline ::Start* release_start();
  inline void set_allocated_start(::Start* start);

  // @@protoc_insertion_point(class_scope:GridOper)
 private:
  inline void set_has_opra_type();
  inline void clear_has_opra_type();
  inline void set_has_opra_grid();
  inline void clear_has_opra_grid();
  inline void set_has_build();
  inline void clear_has_build();
  inline void set_has_toll();
  inline void clear_has_toll();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_build_island();
  inline void clear_has_build_island();
  inline void set_has_peak();
  inline void clear_has_peak();
  inline void set_has_tollage();
  inline void clear_has_tollage();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opra_type_;
  ::google::protobuf::int32 opra_grid_;
  ::BuildCity* build_;
  ::GiveToll* toll_;
  ::Coin* coin_;
  ::BuildIsland* build_island_;
  ::HoldPeak* peak_;
  ::Tollage* tollage_;
  ::RandEvent* event_;
  ::Start* start_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GridOper* default_instance_;
};
// -------------------------------------------------------------------

class SellOffCity : public ::google::protobuf::Message {
 public:
  SellOffCity();
  virtual ~SellOffCity();

  SellOffCity(const SellOffCity& from);

  inline SellOffCity& operator=(const SellOffCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SellOffCity& default_instance();

  void Swap(SellOffCity* other);

  // implements Message ----------------------------------------------

  SellOffCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SellOffCity& from);
  void MergeFrom(const SellOffCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required uint32 worth = 2;
  inline bool has_worth() const;
  inline void clear_worth();
  static const int kWorthFieldNumber = 2;
  inline ::google::protobuf::uint32 worth() const;
  inline void set_worth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SellOffCity)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_worth();
  inline void clear_has_worth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::uint32 worth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static SellOffCity* default_instance_;
};
// -------------------------------------------------------------------

class Bankrupt : public ::google::protobuf::Message {
 public:
  Bankrupt();
  virtual ~Bankrupt();

  Bankrupt(const Bankrupt& from);

  inline Bankrupt& operator=(const Bankrupt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bankrupt& default_instance();

  void Swap(Bankrupt* other);

  // implements Message ----------------------------------------------

  Bankrupt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bankrupt& from);
  void MergeFrom(const Bankrupt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bk_type = 1;
  inline bool has_bk_type() const;
  inline void clear_bk_type();
  static const int kBkTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bk_type() const;
  inline void set_bk_type(::google::protobuf::int32 value);

  // repeated .SellOffCity sell_off_city = 2;
  inline int sell_off_city_size() const;
  inline void clear_sell_off_city();
  static const int kSellOffCityFieldNumber = 2;
  inline const ::SellOffCity& sell_off_city(int index) const;
  inline ::SellOffCity* mutable_sell_off_city(int index);
  inline ::SellOffCity* add_sell_off_city();
  inline const ::google::protobuf::RepeatedPtrField< ::SellOffCity >&
      sell_off_city() const;
  inline ::google::protobuf::RepeatedPtrField< ::SellOffCity >*
      mutable_sell_off_city();

  // optional int32 cost_credit_gold = 3;
  inline bool has_cost_credit_gold() const;
  inline void clear_cost_credit_gold();
  static const int kCostCreditGoldFieldNumber = 3;
  inline ::google::protobuf::int32 cost_credit_gold() const;
  inline void set_cost_credit_gold(::google::protobuf::int32 value);

  // optional int32 credit_money = 4;
  inline bool has_credit_money() const;
  inline void clear_credit_money();
  static const int kCreditMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 credit_money() const;
  inline void set_credit_money(::google::protobuf::int32 value);

  // repeated int32 close_city = 5;
  inline int close_city_size() const;
  inline void clear_close_city();
  static const int kCloseCityFieldNumber = 5;
  inline ::google::protobuf::int32 close_city(int index) const;
  inline void set_close_city(int index, ::google::protobuf::int32 value);
  inline void add_close_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      close_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_close_city();

  // @@protoc_insertion_point(class_scope:Bankrupt)
 private:
  inline void set_has_bk_type();
  inline void clear_has_bk_type();
  inline void set_has_cost_credit_gold();
  inline void clear_has_cost_credit_gold();
  inline void set_has_credit_money();
  inline void clear_has_credit_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SellOffCity > sell_off_city_;
  ::google::protobuf::int32 bk_type_;
  ::google::protobuf::int32 cost_credit_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > close_city_;
  ::google::protobuf::int32 credit_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static Bankrupt* default_instance_;
};
// -------------------------------------------------------------------

class BuildCity : public ::google::protobuf::Message {
 public:
  BuildCity();
  virtual ~BuildCity();

  BuildCity(const BuildCity& from);

  inline BuildCity& operator=(const BuildCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildCity& default_instance();

  void Swap(BuildCity* other);

  // implements Message ----------------------------------------------

  BuildCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildCity& from);
  void MergeFrom(const BuildCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opre_res = 1;
  inline bool has_opre_res() const;
  inline void clear_opre_res();
  static const int kOpreResFieldNumber = 1;
  inline ::google::protobuf::int32 opre_res() const;
  inline void set_opre_res(::google::protobuf::int32 value);

  // optional int32 higth_lvl = 3;
  inline bool has_higth_lvl() const;
  inline void clear_higth_lvl();
  static const int kHigthLvlFieldNumber = 3;
  inline ::google::protobuf::int32 higth_lvl() const;
  inline void set_higth_lvl(::google::protobuf::int32 value);

  // repeated int32 can_build = 4;
  inline int can_build_size() const;
  inline void clear_can_build();
  static const int kCanBuildFieldNumber = 4;
  inline ::google::protobuf::int32 can_build(int index) const;
  inline void set_can_build(int index, ::google::protobuf::int32 value);
  inline void add_can_build(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      can_build() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_can_build();

  // repeated int32 build_cost = 5;
  inline int build_cost_size() const;
  inline void clear_build_cost();
  static const int kBuildCostFieldNumber = 5;
  inline ::google::protobuf::int32 build_cost(int index) const;
  inline void set_build_cost(int index, ::google::protobuf::int32 value);
  inline void add_build_cost(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      build_cost() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_build_cost();

  // repeated int32 has_build = 6;
  inline int has_build_size() const;
  inline void clear_has_build();
  static const int kHasBuildFieldNumber = 6;
  inline ::google::protobuf::int32 has_build(int index) const;
  inline void set_has_build(int index, ::google::protobuf::int32 value);
  inline void add_has_build(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      has_build() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_has_build();

  // @@protoc_insertion_point(class_scope:BuildCity)
 private:
  inline void set_has_opre_res();
  inline void clear_has_opre_res();
  inline void set_has_higth_lvl();
  inline void clear_has_higth_lvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opre_res_;
  ::google::protobuf::int32 higth_lvl_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > can_build_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > build_cost_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > has_build_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static BuildCity* default_instance_;
};
// -------------------------------------------------------------------

class GiveToll_Purch : public ::google::protobuf::Message {
 public:
  GiveToll_Purch();
  virtual ~GiveToll_Purch();

  GiveToll_Purch(const GiveToll_Purch& from);

  inline GiveToll_Purch& operator=(const GiveToll_Purch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveToll_Purch& default_instance();

  void Swap(GiveToll_Purch* other);

  // implements Message ----------------------------------------------

  GiveToll_Purch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveToll_Purch& from);
  void MergeFrom(const GiveToll_Purch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool can_purch = 1;
  inline bool has_can_purch() const;
  inline void clear_can_purch();
  static const int kCanPurchFieldNumber = 1;
  inline bool can_purch() const;
  inline void set_can_purch(bool value);

  // optional uint32 purch_cost = 2;
  inline bool has_purch_cost() const;
  inline void clear_purch_cost();
  static const int kPurchCostFieldNumber = 2;
  inline ::google::protobuf::uint32 purch_cost() const;
  inline void set_purch_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GiveToll.Purch)
 private:
  inline void set_has_can_purch();
  inline void clear_has_can_purch();
  inline void set_has_purch_cost();
  inline void clear_has_purch_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool can_purch_;
  ::google::protobuf::uint32 purch_cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GiveToll_Purch* default_instance_;
};
// -------------------------------------------------------------------

class GiveToll_Toll : public ::google::protobuf::Message {
 public:
  GiveToll_Toll();
  virtual ~GiveToll_Toll();

  GiveToll_Toll(const GiveToll_Toll& from);

  inline GiveToll_Toll& operator=(const GiveToll_Toll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveToll_Toll& default_instance();

  void Swap(GiveToll_Toll* other);

  // implements Message ----------------------------------------------

  GiveToll_Toll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveToll_Toll& from);
  void MergeFrom(const GiveToll_Toll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hald_type = 1;
  inline bool has_hald_type() const;
  inline void clear_hald_type();
  static const int kHaldTypeFieldNumber = 1;
  inline ::google::protobuf::int32 hald_type() const;
  inline void set_hald_type(::google::protobuf::int32 value);

  // optional int32 card_type = 2;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // required uint32 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional .Bankrupt bk = 4;
  inline bool has_bk() const;
  inline void clear_bk();
  static const int kBkFieldNumber = 4;
  inline const ::Bankrupt& bk() const;
  inline ::Bankrupt* mutable_bk();
  inline ::Bankrupt* release_bk();
  inline void set_allocated_bk(::Bankrupt* bk);

  // optional .BuildIsland build_island = 5;
  inline bool has_build_island() const;
  inline void clear_build_island();
  static const int kBuildIslandFieldNumber = 5;
  inline const ::BuildIsland& build_island() const;
  inline ::BuildIsland* mutable_build_island();
  inline ::BuildIsland* release_build_island();
  inline void set_allocated_build_island(::BuildIsland* build_island);

  // @@protoc_insertion_point(class_scope:GiveToll.Toll)
 private:
  inline void set_has_hald_type();
  inline void clear_has_hald_type();
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_bk();
  inline void clear_has_bk();
  inline void set_has_build_island();
  inline void clear_has_build_island();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hald_type_;
  ::google::protobuf::int32 card_type_;
  ::Bankrupt* bk_;
  ::BuildIsland* build_island_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GiveToll_Toll* default_instance_;
};
// -------------------------------------------------------------------

class GiveToll : public ::google::protobuf::Message {
 public:
  GiveToll();
  virtual ~GiveToll();

  GiveToll(const GiveToll& from);

  inline GiveToll& operator=(const GiveToll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveToll& default_instance();

  void Swap(GiveToll* other);

  // implements Message ----------------------------------------------

  GiveToll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveToll& from);
  void MergeFrom(const GiveToll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GiveToll_Purch Purch;
  typedef GiveToll_Toll Toll;

  // accessors -------------------------------------------------------

  // optional .GiveToll.Toll toll = 1;
  inline bool has_toll() const;
  inline void clear_toll();
  static const int kTollFieldNumber = 1;
  inline const ::GiveToll_Toll& toll() const;
  inline ::GiveToll_Toll* mutable_toll();
  inline ::GiveToll_Toll* release_toll();
  inline void set_allocated_toll(::GiveToll_Toll* toll);

  // optional .GiveToll.Purch purch = 2;
  inline bool has_purch() const;
  inline void clear_purch();
  static const int kPurchFieldNumber = 2;
  inline const ::GiveToll_Purch& purch() const;
  inline ::GiveToll_Purch* mutable_purch();
  inline ::GiveToll_Purch* release_purch();
  inline void set_allocated_purch(::GiveToll_Purch* purch);

  // @@protoc_insertion_point(class_scope:GiveToll)
 private:
  inline void set_has_toll();
  inline void clear_has_toll();
  inline void set_has_purch();
  inline void clear_has_purch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GiveToll_Toll* toll_;
  ::GiveToll_Purch* purch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GiveToll* default_instance_;
};
// -------------------------------------------------------------------

class Coin : public ::google::protobuf::Message {
 public:
  Coin();
  virtual ~Coin();

  Coin(const Coin& from);

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coin& default_instance();

  void Swap(Coin* other);

  // implements Message ----------------------------------------------

  Coin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Coin& from);
  void MergeFrom(const Coin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int32 stake = 2;
  inline int stake_size() const;
  inline void clear_stake();
  static const int kStakeFieldNumber = 2;
  inline ::google::protobuf::int32 stake(int index) const;
  inline void set_stake(int index, ::google::protobuf::int32 value);
  inline void add_stake(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stake() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stake();

  // repeated int32 result_list = 3;
  inline int result_list_size() const;
  inline void clear_result_list();
  static const int kResultListFieldNumber = 3;
  inline ::google::protobuf::int32 result_list(int index) const;
  inline void set_result_list(int index, ::google::protobuf::int32 value);
  inline void add_result_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result_list();

  // @@protoc_insertion_point(class_scope:Coin)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stake_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_list_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static Coin* default_instance_;
};
// -------------------------------------------------------------------

class BuildIsland : public ::google::protobuf::Message {
 public:
  BuildIsland();
  virtual ~BuildIsland();

  BuildIsland(const BuildIsland& from);

  inline BuildIsland& operator=(const BuildIsland& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildIsland& default_instance();

  void Swap(BuildIsland* other);

  // implements Message ----------------------------------------------

  BuildIsland* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildIsland& from);
  void MergeFrom(const BuildIsland& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opre_res = 1;
  inline bool has_opre_res() const;
  inline void clear_opre_res();
  static const int kOpreResFieldNumber = 1;
  inline ::google::protobuf::int32 opre_res() const;
  inline void set_opre_res(::google::protobuf::int32 value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional int32 lvl = 3;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 3;
  inline ::google::protobuf::int32 lvl() const;
  inline void set_lvl(::google::protobuf::int32 value);

  // repeated int32 grid_index = 4;
  inline int grid_index_size() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 4;
  inline ::google::protobuf::int32 grid_index(int index) const;
  inline void set_grid_index(int index, ::google::protobuf::int32 value);
  inline void add_grid_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      grid_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_grid_index();

  // @@protoc_insertion_point(class_scope:BuildIsland)
 private:
  inline void set_has_opre_res();
  inline void clear_has_opre_res();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_lvl();
  inline void clear_has_lvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opre_res_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > grid_index_;
  ::google::protobuf::int32 lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static BuildIsland* default_instance_;
};
// -------------------------------------------------------------------

class HoldPeak : public ::google::protobuf::Message {
 public:
  HoldPeak();
  virtual ~HoldPeak();

  HoldPeak(const HoldPeak& from);

  inline HoldPeak& operator=(const HoldPeak& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HoldPeak& default_instance();

  void Swap(HoldPeak* other);

  // implements Message ----------------------------------------------

  HoldPeak* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HoldPeak& from);
  void MergeFrom(const HoldPeak& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // repeated int32 can_hold_grid = 3;
  inline int can_hold_grid_size() const;
  inline void clear_can_hold_grid();
  static const int kCanHoldGridFieldNumber = 3;
  inline ::google::protobuf::int32 can_hold_grid(int index) const;
  inline void set_can_hold_grid(int index, ::google::protobuf::int32 value);
  inline void add_can_hold_grid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      can_hold_grid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_can_hold_grid();

  // @@protoc_insertion_point(class_scope:HoldPeak)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > can_hold_grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static HoldPeak* default_instance_;
};
// -------------------------------------------------------------------

class Tollage : public ::google::protobuf::Message {
 public:
  Tollage();
  virtual ~Tollage();

  Tollage(const Tollage& from);

  inline Tollage& operator=(const Tollage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tollage& default_instance();

  void Swap(Tollage* other);

  // implements Message ----------------------------------------------

  Tollage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tollage& from);
  void MergeFrom(const Tollage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hald_type = 1;
  inline bool has_hald_type() const;
  inline void clear_hald_type();
  static const int kHaldTypeFieldNumber = 1;
  inline ::google::protobuf::int32 hald_type() const;
  inline void set_hald_type(::google::protobuf::int32 value);

  // optional int32 card_type = 2;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // required uint32 base_price = 3;
  inline bool has_base_price() const;
  inline void clear_base_price();
  static const int kBasePriceFieldNumber = 3;
  inline ::google::protobuf::uint32 base_price() const;
  inline void set_base_price(::google::protobuf::uint32 value);

  // required uint32 sale_price = 4;
  inline bool has_sale_price() const;
  inline void clear_sale_price();
  static const int kSalePriceFieldNumber = 4;
  inline ::google::protobuf::uint32 sale_price() const;
  inline void set_sale_price(::google::protobuf::uint32 value);

  // optional .Bankrupt bk = 5;
  inline bool has_bk() const;
  inline void clear_bk();
  static const int kBkFieldNumber = 5;
  inline const ::Bankrupt& bk() const;
  inline ::Bankrupt* mutable_bk();
  inline ::Bankrupt* release_bk();
  inline void set_allocated_bk(::Bankrupt* bk);

  // @@protoc_insertion_point(class_scope:Tollage)
 private:
  inline void set_has_hald_type();
  inline void clear_has_hald_type();
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_base_price();
  inline void clear_has_base_price();
  inline void set_has_sale_price();
  inline void clear_has_sale_price();
  inline void set_has_bk();
  inline void clear_has_bk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hald_type_;
  ::google::protobuf::int32 card_type_;
  ::google::protobuf::uint32 base_price_;
  ::google::protobuf::uint32 sale_price_;
  ::Bankrupt* bk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static Tollage* default_instance_;
};
// -------------------------------------------------------------------

class RandEvent_CmdCardOper : public ::google::protobuf::Message {
 public:
  RandEvent_CmdCardOper();
  virtual ~RandEvent_CmdCardOper();

  RandEvent_CmdCardOper(const RandEvent_CmdCardOper& from);

  inline RandEvent_CmdCardOper& operator=(const RandEvent_CmdCardOper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEvent_CmdCardOper& default_instance();

  void Swap(RandEvent_CmdCardOper* other);

  // implements Message ----------------------------------------------

  RandEvent_CmdCardOper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEvent_CmdCardOper& from);
  void MergeFrom(const RandEvent_CmdCardOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 contribut_city_list = 1;
  inline int contribut_city_list_size() const;
  inline void clear_contribut_city_list();
  static const int kContributCityListFieldNumber = 1;
  inline ::google::protobuf::int32 contribut_city_list(int index) const;
  inline void set_contribut_city_list(int index, ::google::protobuf::int32 value);
  inline void add_contribut_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      contribut_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_contribut_city_list();

  // repeated int32 contribut_role_list = 2;
  inline int contribut_role_list_size() const;
  inline void clear_contribut_role_list();
  static const int kContributRoleListFieldNumber = 2;
  inline ::google::protobuf::int32 contribut_role_list(int index) const;
  inline void set_contribut_role_list(int index, ::google::protobuf::int32 value);
  inline void add_contribut_role_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      contribut_role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_contribut_role_list();

  // repeated int32 hold_peak_city_list = 3;
  inline int hold_peak_city_list_size() const;
  inline void clear_hold_peak_city_list();
  static const int kHoldPeakCityListFieldNumber = 3;
  inline ::google::protobuf::int32 hold_peak_city_list(int index) const;
  inline void set_hold_peak_city_list(int index, ::google::protobuf::int32 value);
  inline void add_hold_peak_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hold_peak_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hold_peak_city_list();

  // optional int32 curr_hold_peak_city = 4;
  inline bool has_curr_hold_peak_city() const;
  inline void clear_curr_hold_peak_city();
  static const int kCurrHoldPeakCityFieldNumber = 4;
  inline ::google::protobuf::int32 curr_hold_peak_city() const;
  inline void set_curr_hold_peak_city(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEvent.CmdCardOper)
 private:
  inline void set_has_curr_hold_peak_city();
  inline void clear_has_curr_hold_peak_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > contribut_city_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > contribut_role_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hold_peak_city_list_;
  ::google::protobuf::int32 curr_hold_peak_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEvent_CmdCardOper* default_instance_;
};
// -------------------------------------------------------------------

class RandEvent_AttackOper_ChangeCity : public ::google::protobuf::Message {
 public:
  RandEvent_AttackOper_ChangeCity();
  virtual ~RandEvent_AttackOper_ChangeCity();

  RandEvent_AttackOper_ChangeCity(const RandEvent_AttackOper_ChangeCity& from);

  inline RandEvent_AttackOper_ChangeCity& operator=(const RandEvent_AttackOper_ChangeCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEvent_AttackOper_ChangeCity& default_instance();

  void Swap(RandEvent_AttackOper_ChangeCity* other);

  // implements Message ----------------------------------------------

  RandEvent_AttackOper_ChangeCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEvent_AttackOper_ChangeCity& from);
  void MergeFrom(const RandEvent_AttackOper_ChangeCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 self_city_list = 1;
  inline int self_city_list_size() const;
  inline void clear_self_city_list();
  static const int kSelfCityListFieldNumber = 1;
  inline ::google::protobuf::int32 self_city_list(int index) const;
  inline void set_self_city_list(int index, ::google::protobuf::int32 value);
  inline void add_self_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      self_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_self_city_list();

  // repeated int32 enemy_city_list = 2;
  inline int enemy_city_list_size() const;
  inline void clear_enemy_city_list();
  static const int kEnemyCityListFieldNumber = 2;
  inline ::google::protobuf::int32 enemy_city_list(int index) const;
  inline void set_enemy_city_list(int index, ::google::protobuf::int32 value);
  inline void add_enemy_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemy_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemy_city_list();

  // @@protoc_insertion_point(class_scope:RandEvent.AttackOper.ChangeCity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > self_city_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemy_city_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEvent_AttackOper_ChangeCity* default_instance_;
};
// -------------------------------------------------------------------

class RandEvent_AttackOper : public ::google::protobuf::Message {
 public:
  RandEvent_AttackOper();
  virtual ~RandEvent_AttackOper();

  RandEvent_AttackOper(const RandEvent_AttackOper& from);

  inline RandEvent_AttackOper& operator=(const RandEvent_AttackOper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEvent_AttackOper& default_instance();

  void Swap(RandEvent_AttackOper* other);

  // implements Message ----------------------------------------------

  RandEvent_AttackOper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEvent_AttackOper& from);
  void MergeFrom(const RandEvent_AttackOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEvent_AttackOper_ChangeCity ChangeCity;

  // accessors -------------------------------------------------------

  // repeated int32 can_attack_city_list = 1;
  inline int can_attack_city_list_size() const;
  inline void clear_can_attack_city_list();
  static const int kCanAttackCityListFieldNumber = 1;
  inline ::google::protobuf::int32 can_attack_city_list(int index) const;
  inline void set_can_attack_city_list(int index, ::google::protobuf::int32 value);
  inline void add_can_attack_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      can_attack_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_can_attack_city_list();

  // optional .RandEvent.AttackOper.ChangeCity change_city_list = 2;
  inline bool has_change_city_list() const;
  inline void clear_change_city_list();
  static const int kChangeCityListFieldNumber = 2;
  inline const ::RandEvent_AttackOper_ChangeCity& change_city_list() const;
  inline ::RandEvent_AttackOper_ChangeCity* mutable_change_city_list();
  inline ::RandEvent_AttackOper_ChangeCity* release_change_city_list();
  inline void set_allocated_change_city_list(::RandEvent_AttackOper_ChangeCity* change_city_list);

  // @@protoc_insertion_point(class_scope:RandEvent.AttackOper)
 private:
  inline void set_has_change_city_list();
  inline void clear_has_change_city_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > can_attack_city_list_;
  ::RandEvent_AttackOper_ChangeCity* change_city_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEvent_AttackOper* default_instance_;
};
// -------------------------------------------------------------------

class RandEvent : public ::google::protobuf::Message {
 public:
  RandEvent();
  virtual ~RandEvent();

  RandEvent(const RandEvent& from);

  inline RandEvent& operator=(const RandEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEvent& default_instance();

  void Swap(RandEvent* other);

  // implements Message ----------------------------------------------

  RandEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEvent& from);
  void MergeFrom(const RandEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEvent_CmdCardOper CmdCardOper;
  typedef RandEvent_AttackOper AttackOper;

  // accessors -------------------------------------------------------

  // required int32 card_type = 1;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // required int32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // required bool is_trigger_skill = 3;
  inline bool has_is_trigger_skill() const;
  inline void clear_is_trigger_skill();
  static const int kIsTriggerSkillFieldNumber = 3;
  inline bool is_trigger_skill() const;
  inline void set_is_trigger_skill(bool value);

  // optional .RandEvent.CmdCardOper cmd_card_oper = 4;
  inline bool has_cmd_card_oper() const;
  inline void clear_cmd_card_oper();
  static const int kCmdCardOperFieldNumber = 4;
  inline const ::RandEvent_CmdCardOper& cmd_card_oper() const;
  inline ::RandEvent_CmdCardOper* mutable_cmd_card_oper();
  inline ::RandEvent_CmdCardOper* release_cmd_card_oper();
  inline void set_allocated_cmd_card_oper(::RandEvent_CmdCardOper* cmd_card_oper);

  // optional .RandEvent.AttackOper attack_card_oper = 5;
  inline bool has_attack_card_oper() const;
  inline void clear_attack_card_oper();
  static const int kAttackCardOperFieldNumber = 5;
  inline const ::RandEvent_AttackOper& attack_card_oper() const;
  inline ::RandEvent_AttackOper* mutable_attack_card_oper();
  inline ::RandEvent_AttackOper* release_attack_card_oper();
  inline void set_allocated_attack_card_oper(::RandEvent_AttackOper* attack_card_oper);

  // @@protoc_insertion_point(class_scope:RandEvent)
 private:
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_is_trigger_skill();
  inline void clear_has_is_trigger_skill();
  inline void set_has_cmd_card_oper();
  inline void clear_has_cmd_card_oper();
  inline void set_has_attack_card_oper();
  inline void clear_has_attack_card_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 event_id_;
  ::RandEvent_CmdCardOper* cmd_card_oper_;
  ::RandEvent_AttackOper* attack_card_oper_;
  bool is_trigger_skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEvent* default_instance_;
};
// -------------------------------------------------------------------

class Start : public ::google::protobuf::Message {
 public:
  Start();
  virtual ~Start();

  Start(const Start& from);

  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Start& default_instance();

  void Swap(Start* other);

  // implements Message ----------------------------------------------

  Start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Start& from);
  void MergeFrom(const Start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 up_grid = 1;
  inline int up_grid_size() const;
  inline void clear_up_grid();
  static const int kUpGridFieldNumber = 1;
  inline ::google::protobuf::int32 up_grid(int index) const;
  inline void set_up_grid(int index, ::google::protobuf::int32 value);
  inline void add_up_grid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      up_grid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_up_grid();

  // @@protoc_insertion_point(class_scope:Start)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > up_grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static Start* default_instance_;
};
// -------------------------------------------------------------------

class ActionResult : public ::google::protobuf::Message {
 public:
  ActionResult();
  virtual ~ActionResult();

  ActionResult(const ActionResult& from);

  inline ActionResult& operator=(const ActionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionResult& default_instance();

  void Swap(ActionResult* other);

  // implements Message ----------------------------------------------

  ActionResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionResult& from);
  void MergeFrom(const ActionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 action_seat_id = 1;
  inline bool has_action_seat_id() const;
  inline void clear_action_seat_id();
  static const int kActionSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 action_seat_id() const;
  inline void set_action_seat_id(::google::protobuf::int32 value);

  // required int32 action_type = 2;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 2;
  inline ::google::protobuf::int32 action_type() const;
  inline void set_action_type(::google::protobuf::int32 value);

  // required int32 action_res = 3;
  inline bool has_action_res() const;
  inline void clear_action_res();
  static const int kActionResFieldNumber = 3;
  inline ::google::protobuf::int32 action_res() const;
  inline void set_action_res(::google::protobuf::int32 value);

  // optional .BuildRsp build_rsp = 4;
  inline bool has_build_rsp() const;
  inline void clear_build_rsp();
  static const int kBuildRspFieldNumber = 4;
  inline const ::BuildRsp& build_rsp() const;
  inline ::BuildRsp* mutable_build_rsp();
  inline ::BuildRsp* release_build_rsp();
  inline void set_allocated_build_rsp(::BuildRsp* build_rsp);

  // optional .CoinThrowRsp coin_throw_rsp = 5;
  inline bool has_coin_throw_rsp() const;
  inline void clear_coin_throw_rsp();
  static const int kCoinThrowRspFieldNumber = 5;
  inline const ::CoinThrowRsp& coin_throw_rsp() const;
  inline ::CoinThrowRsp* mutable_coin_throw_rsp();
  inline ::CoinThrowRsp* release_coin_throw_rsp();
  inline void set_allocated_coin_throw_rsp(::CoinThrowRsp* coin_throw_rsp);

  // optional .HoldPeakRsp hold_peak_rsp = 6;
  inline bool has_hold_peak_rsp() const;
  inline void clear_hold_peak_rsp();
  static const int kHoldPeakRspFieldNumber = 6;
  inline const ::HoldPeakRsp& hold_peak_rsp() const;
  inline ::HoldPeakRsp* mutable_hold_peak_rsp();
  inline ::HoldPeakRsp* release_hold_peak_rsp();
  inline void set_allocated_hold_peak_rsp(::HoldPeakRsp* hold_peak_rsp);

  // optional .PurchaseRsp purchase = 7;
  inline bool has_purchase() const;
  inline void clear_purchase();
  static const int kPurchaseFieldNumber = 7;
  inline const ::PurchaseRsp& purchase() const;
  inline ::PurchaseRsp* mutable_purchase();
  inline ::PurchaseRsp* release_purchase();
  inline void set_allocated_purchase(::PurchaseRsp* purchase);

  // optional .FlyRsp fly_rsp = 8;
  inline bool has_fly_rsp() const;
  inline void clear_fly_rsp();
  static const int kFlyRspFieldNumber = 8;
  inline const ::FlyRsp& fly_rsp() const;
  inline ::FlyRsp* mutable_fly_rsp();
  inline ::FlyRsp* release_fly_rsp();
  inline void set_allocated_fly_rsp(::FlyRsp* fly_rsp);

  // optional .BankruptRsp bankrupt_rsp = 9;
  inline bool has_bankrupt_rsp() const;
  inline void clear_bankrupt_rsp();
  static const int kBankruptRspFieldNumber = 9;
  inline const ::BankruptRsp& bankrupt_rsp() const;
  inline ::BankruptRsp* mutable_bankrupt_rsp();
  inline ::BankruptRsp* release_bankrupt_rsp();
  inline void set_allocated_bankrupt_rsp(::BankruptRsp* bankrupt_rsp);

  // optional .RandEventRsp rand_event_rsp = 10;
  inline bool has_rand_event_rsp() const;
  inline void clear_rand_event_rsp();
  static const int kRandEventRspFieldNumber = 10;
  inline const ::RandEventRsp& rand_event_rsp() const;
  inline ::RandEventRsp* mutable_rand_event_rsp();
  inline ::RandEventRsp* release_rand_event_rsp();
  inline void set_allocated_rand_event_rsp(::RandEventRsp* rand_event_rsp);

  // optional .UseCardRsp user_card_rsp = 11;
  inline bool has_user_card_rsp() const;
  inline void clear_user_card_rsp();
  static const int kUserCardRspFieldNumber = 11;
  inline const ::UseCardRsp& user_card_rsp() const;
  inline ::UseCardRsp* mutable_user_card_rsp();
  inline ::UseCardRsp* release_user_card_rsp();
  inline void set_allocated_user_card_rsp(::UseCardRsp* user_card_rsp);

  // optional .StartPointRsp start_point_rsp = 12;
  inline bool has_start_point_rsp() const;
  inline void clear_start_point_rsp();
  static const int kStartPointRspFieldNumber = 12;
  inline const ::StartPointRsp& start_point_rsp() const;
  inline ::StartPointRsp* mutable_start_point_rsp();
  inline ::StartPointRsp* release_start_point_rsp();
  inline void set_allocated_start_point_rsp(::StartPointRsp* start_point_rsp);

  // @@protoc_insertion_point(class_scope:ActionResult)
 private:
  inline void set_has_action_seat_id();
  inline void clear_has_action_seat_id();
  inline void set_has_action_type();
  inline void clear_has_action_type();
  inline void set_has_action_res();
  inline void clear_has_action_res();
  inline void set_has_build_rsp();
  inline void clear_has_build_rsp();
  inline void set_has_coin_throw_rsp();
  inline void clear_has_coin_throw_rsp();
  inline void set_has_hold_peak_rsp();
  inline void clear_has_hold_peak_rsp();
  inline void set_has_purchase();
  inline void clear_has_purchase();
  inline void set_has_fly_rsp();
  inline void clear_has_fly_rsp();
  inline void set_has_bankrupt_rsp();
  inline void clear_has_bankrupt_rsp();
  inline void set_has_rand_event_rsp();
  inline void clear_has_rand_event_rsp();
  inline void set_has_user_card_rsp();
  inline void clear_has_user_card_rsp();
  inline void set_has_start_point_rsp();
  inline void clear_has_start_point_rsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 action_seat_id_;
  ::google::protobuf::int32 action_type_;
  ::BuildRsp* build_rsp_;
  ::CoinThrowRsp* coin_throw_rsp_;
  ::HoldPeakRsp* hold_peak_rsp_;
  ::PurchaseRsp* purchase_;
  ::FlyRsp* fly_rsp_;
  ::BankruptRsp* bankrupt_rsp_;
  ::RandEventRsp* rand_event_rsp_;
  ::UseCardRsp* user_card_rsp_;
  ::StartPointRsp* start_point_rsp_;
  ::google::protobuf::int32 action_res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static ActionResult* default_instance_;
};
// -------------------------------------------------------------------

class BuildRsp_BuildCity : public ::google::protobuf::Message {
 public:
  BuildRsp_BuildCity();
  virtual ~BuildRsp_BuildCity();

  BuildRsp_BuildCity(const BuildRsp_BuildCity& from);

  inline BuildRsp_BuildCity& operator=(const BuildRsp_BuildCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildRsp_BuildCity& default_instance();

  void Swap(BuildRsp_BuildCity* other);

  // implements Message ----------------------------------------------

  BuildRsp_BuildCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildRsp_BuildCity& from);
  void MergeFrom(const BuildRsp_BuildCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // repeated int32 builded = 2;
  inline int builded_size() const;
  inline void clear_builded();
  static const int kBuildedFieldNumber = 2;
  inline ::google::protobuf::int32 builded(int index) const;
  inline void set_builded(int index, ::google::protobuf::int32 value);
  inline void add_builded(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      builded() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_builded();

  // @@protoc_insertion_point(class_scope:BuildRsp.BuildCity)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > builded_;
  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static BuildRsp_BuildCity* default_instance_;
};
// -------------------------------------------------------------------

class BuildRsp_BuildIsland : public ::google::protobuf::Message {
 public:
  BuildRsp_BuildIsland();
  virtual ~BuildRsp_BuildIsland();

  BuildRsp_BuildIsland(const BuildRsp_BuildIsland& from);

  inline BuildRsp_BuildIsland& operator=(const BuildRsp_BuildIsland& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildRsp_BuildIsland& default_instance();

  void Swap(BuildRsp_BuildIsland* other);

  // implements Message ----------------------------------------------

  BuildRsp_BuildIsland* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildRsp_BuildIsland& from);
  void MergeFrom(const BuildRsp_BuildIsland& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // required int32 builded = 2;
  inline bool has_builded() const;
  inline void clear_builded();
  static const int kBuildedFieldNumber = 2;
  inline ::google::protobuf::int32 builded() const;
  inline void set_builded(::google::protobuf::int32 value);

  // repeated int32 up_grid_list = 3;
  inline int up_grid_list_size() const;
  inline void clear_up_grid_list();
  static const int kUpGridListFieldNumber = 3;
  inline ::google::protobuf::int32 up_grid_list(int index) const;
  inline void set_up_grid_list(int index, ::google::protobuf::int32 value);
  inline void add_up_grid_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      up_grid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_up_grid_list();

  // @@protoc_insertion_point(class_scope:BuildRsp.BuildIsland)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_builded();
  inline void clear_has_builded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grid_index_;
  ::google::protobuf::int32 builded_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > up_grid_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static BuildRsp_BuildIsland* default_instance_;
};
// -------------------------------------------------------------------

class BuildRsp : public ::google::protobuf::Message {
 public:
  BuildRsp();
  virtual ~BuildRsp();

  BuildRsp(const BuildRsp& from);

  inline BuildRsp& operator=(const BuildRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildRsp& default_instance();

  void Swap(BuildRsp* other);

  // implements Message ----------------------------------------------

  BuildRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildRsp& from);
  void MergeFrom(const BuildRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BuildRsp_BuildCity BuildCity;
  typedef BuildRsp_BuildIsland BuildIsland;

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .BuildRsp.BuildCity build_city = 2;
  inline bool has_build_city() const;
  inline void clear_build_city();
  static const int kBuildCityFieldNumber = 2;
  inline const ::BuildRsp_BuildCity& build_city() const;
  inline ::BuildRsp_BuildCity* mutable_build_city();
  inline ::BuildRsp_BuildCity* release_build_city();
  inline void set_allocated_build_city(::BuildRsp_BuildCity* build_city);

  // optional .BuildRsp.BuildIsland build_island = 3;
  inline bool has_build_island() const;
  inline void clear_build_island();
  static const int kBuildIslandFieldNumber = 3;
  inline const ::BuildRsp_BuildIsland& build_island() const;
  inline ::BuildRsp_BuildIsland* mutable_build_island();
  inline ::BuildRsp_BuildIsland* release_build_island();
  inline void set_allocated_build_island(::BuildRsp_BuildIsland* build_island);

  // @@protoc_insertion_point(class_scope:BuildRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_build_city();
  inline void clear_has_build_city();
  inline void set_has_build_island();
  inline void clear_has_build_island();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::BuildRsp_BuildCity* build_city_;
  ::BuildRsp_BuildIsland* build_island_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static BuildRsp* default_instance_;
};
// -------------------------------------------------------------------

class HoldPeakRsp : public ::google::protobuf::Message {
 public:
  HoldPeakRsp();
  virtual ~HoldPeakRsp();

  HoldPeakRsp(const HoldPeakRsp& from);

  inline HoldPeakRsp& operator=(const HoldPeakRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HoldPeakRsp& default_instance();

  void Swap(HoldPeakRsp* other);

  // implements Message ----------------------------------------------

  HoldPeakRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HoldPeakRsp& from);
  void MergeFrom(const HoldPeakRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hold_index = 1;
  inline bool has_hold_index() const;
  inline void clear_hold_index();
  static const int kHoldIndexFieldNumber = 1;
  inline ::google::protobuf::int32 hold_index() const;
  inline void set_hold_index(::google::protobuf::int32 value);

  // optional int32 last_hold = 2;
  inline bool has_last_hold() const;
  inline void clear_last_hold();
  static const int kLastHoldFieldNumber = 2;
  inline ::google::protobuf::int32 last_hold() const;
  inline void set_last_hold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HoldPeakRsp)
 private:
  inline void set_has_hold_index();
  inline void clear_has_hold_index();
  inline void set_has_last_hold();
  inline void clear_has_last_hold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hold_index_;
  ::google::protobuf::int32 last_hold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static HoldPeakRsp* default_instance_;
};
// -------------------------------------------------------------------

class CoinThrowRsp : public ::google::protobuf::Message {
 public:
  CoinThrowRsp();
  virtual ~CoinThrowRsp();

  CoinThrowRsp(const CoinThrowRsp& from);

  inline CoinThrowRsp& operator=(const CoinThrowRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinThrowRsp& default_instance();

  void Swap(CoinThrowRsp* other);

  // implements Message ----------------------------------------------

  CoinThrowRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoinThrowRsp& from);
  void MergeFrom(const CoinThrowRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required int32 res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);

  // required int32 side = 3;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 3;
  inline ::google::protobuf::int32 side() const;
  inline void set_side(::google::protobuf::int32 value);

  // optional int32 win_money = 4;
  inline bool has_win_money() const;
  inline void clear_win_money();
  static const int kWinMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 win_money() const;
  inline void set_win_money(::google::protobuf::int32 value);

  // required int32 throw_kill = 5;
  inline bool has_throw_kill() const;
  inline void clear_throw_kill();
  static const int kThrowKillFieldNumber = 5;
  inline ::google::protobuf::int32 throw_kill() const;
  inline void set_throw_kill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CoinThrowRsp)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_win_money();
  inline void clear_has_win_money();
  inline void set_has_throw_kill();
  inline void clear_has_throw_kill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 res_;
  ::google::protobuf::int32 side_;
  ::google::protobuf::int32 win_money_;
  ::google::protobuf::int32 throw_kill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static CoinThrowRsp* default_instance_;
};
// -------------------------------------------------------------------

class PurchaseRsp : public ::google::protobuf::Message {
 public:
  PurchaseRsp();
  virtual ~PurchaseRsp();

  PurchaseRsp(const PurchaseRsp& from);

  inline PurchaseRsp& operator=(const PurchaseRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PurchaseRsp& default_instance();

  void Swap(PurchaseRsp* other);

  // implements Message ----------------------------------------------

  PurchaseRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PurchaseRsp& from);
  void MergeFrom(const PurchaseRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // optional .BuildCity buld_city = 2;
  inline bool has_buld_city() const;
  inline void clear_buld_city();
  static const int kBuldCityFieldNumber = 2;
  inline const ::BuildCity& buld_city() const;
  inline ::BuildCity* mutable_buld_city();
  inline ::BuildCity* release_buld_city();
  inline void set_allocated_buld_city(::BuildCity* buld_city);

  // @@protoc_insertion_point(class_scope:PurchaseRsp)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_buld_city();
  inline void clear_has_buld_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::BuildCity* buld_city_;
  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static PurchaseRsp* default_instance_;
};
// -------------------------------------------------------------------

class FlyRsp : public ::google::protobuf::Message {
 public:
  FlyRsp();
  virtual ~FlyRsp();

  FlyRsp(const FlyRsp& from);

  inline FlyRsp& operator=(const FlyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlyRsp& default_instance();

  void Swap(FlyRsp* other);

  // implements Message ----------------------------------------------

  FlyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlyRsp& from);
  void MergeFrom(const FlyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GridOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline const ::GridOper& oper() const;
  inline ::GridOper* mutable_oper();
  inline ::GridOper* release_oper();
  inline void set_allocated_oper(::GridOper* oper);

  // @@protoc_insertion_point(class_scope:FlyRsp)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GridOper* oper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static FlyRsp* default_instance_;
};
// -------------------------------------------------------------------

class StartPointRsp : public ::google::protobuf::Message {
 public:
  StartPointRsp();
  virtual ~StartPointRsp();

  StartPointRsp(const StartPointRsp& from);

  inline StartPointRsp& operator=(const StartPointRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartPointRsp& default_instance();

  void Swap(StartPointRsp* other);

  // implements Message ----------------------------------------------

  StartPointRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartPointRsp& from);
  void MergeFrom(const StartPointRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GridOper oper = 1;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 1;
  inline const ::GridOper& oper() const;
  inline ::GridOper* mutable_oper();
  inline ::GridOper* release_oper();
  inline void set_allocated_oper(::GridOper* oper);

  // @@protoc_insertion_point(class_scope:StartPointRsp)
 private:
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GridOper* oper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static StartPointRsp* default_instance_;
};
// -------------------------------------------------------------------

class BankruptRsp : public ::google::protobuf::Message {
 public:
  BankruptRsp();
  virtual ~BankruptRsp();

  BankruptRsp(const BankruptRsp& from);

  inline BankruptRsp& operator=(const BankruptRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankruptRsp& default_instance();

  void Swap(BankruptRsp* other);

  // implements Message ----------------------------------------------

  BankruptRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankruptRsp& from);
  void MergeFrom(const BankruptRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 deal_type = 1;
  inline bool has_deal_type() const;
  inline void clear_deal_type();
  static const int kDealTypeFieldNumber = 1;
  inline ::google::protobuf::int32 deal_type() const;
  inline void set_deal_type(::google::protobuf::int32 value);

  // repeated int32 sale_city_list = 2;
  inline int sale_city_list_size() const;
  inline void clear_sale_city_list();
  static const int kSaleCityListFieldNumber = 2;
  inline ::google::protobuf::int32 sale_city_list(int index) const;
  inline void set_sale_city_list(int index, ::google::protobuf::int32 value);
  inline void add_sale_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sale_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sale_city_list();

  // required int32 toll_type = 3;
  inline bool has_toll_type() const;
  inline void clear_toll_type();
  static const int kTollTypeFieldNumber = 3;
  inline ::google::protobuf::int32 toll_type() const;
  inline void set_toll_type(::google::protobuf::int32 value);

  // required uint32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BankruptRsp)
 private:
  inline void set_has_deal_type();
  inline void clear_has_deal_type();
  inline void set_has_toll_type();
  inline void clear_has_toll_type();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sale_city_list_;
  ::google::protobuf::int32 deal_type_;
  ::google::protobuf::int32 toll_type_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static BankruptRsp* default_instance_;
};
// -------------------------------------------------------------------

class UseCardRsp : public ::google::protobuf::Message {
 public:
  UseCardRsp();
  virtual ~UseCardRsp();

  UseCardRsp(const UseCardRsp& from);

  inline UseCardRsp& operator=(const UseCardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseCardRsp& default_instance();

  void Swap(UseCardRsp* other);

  // implements Message ----------------------------------------------

  UseCardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseCardRsp& from);
  void MergeFrom(const UseCardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 use_card_type = 1;
  inline bool has_use_card_type() const;
  inline void clear_use_card_type();
  static const int kUseCardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 use_card_type() const;
  inline void set_use_card_type(::google::protobuf::int32 value);

  // repeated int32 grid_list = 2;
  inline int grid_list_size() const;
  inline void clear_grid_list();
  static const int kGridListFieldNumber = 2;
  inline ::google::protobuf::int32 grid_list(int index) const;
  inline void set_grid_list(int index, ::google::protobuf::int32 value);
  inline void add_grid_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      grid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_grid_list();

  // optional .GridOper oper = 3;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 3;
  inline const ::GridOper& oper() const;
  inline ::GridOper* mutable_oper();
  inline ::GridOper* release_oper();
  inline void set_allocated_oper(::GridOper* oper);

  // @@protoc_insertion_point(class_scope:UseCardRsp)
 private:
  inline void set_has_use_card_type();
  inline void clear_has_use_card_type();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > grid_list_;
  ::GridOper* oper_;
  ::google::protobuf::int32 use_card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static UseCardRsp* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_IslandInfo : public ::google::protobuf::Message {
 public:
  RandEventRsp_IslandInfo();
  virtual ~RandEventRsp_IslandInfo();

  RandEventRsp_IslandInfo(const RandEventRsp_IslandInfo& from);

  inline RandEventRsp_IslandInfo& operator=(const RandEventRsp_IslandInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_IslandInfo& default_instance();

  void Swap(RandEventRsp_IslandInfo* other);

  // implements Message ----------------------------------------------

  RandEventRsp_IslandInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_IslandInfo& from);
  void MergeFrom(const RandEventRsp_IslandInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // required int32 lvl = 2;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::int32 lvl() const;
  inline void set_lvl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventRsp.IslandInfo)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_lvl();
  inline void clear_has_lvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grid_index_;
  ::google::protobuf::int32 lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_IslandInfo* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_CmdCardOperRes_MoveCmd : public ::google::protobuf::Message {
 public:
  RandEventRsp_CmdCardOperRes_MoveCmd();
  virtual ~RandEventRsp_CmdCardOperRes_MoveCmd();

  RandEventRsp_CmdCardOperRes_MoveCmd(const RandEventRsp_CmdCardOperRes_MoveCmd& from);

  inline RandEventRsp_CmdCardOperRes_MoveCmd& operator=(const RandEventRsp_CmdCardOperRes_MoveCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_CmdCardOperRes_MoveCmd& default_instance();

  void Swap(RandEventRsp_CmdCardOperRes_MoveCmd* other);

  // implements Message ----------------------------------------------

  RandEventRsp_CmdCardOperRes_MoveCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_CmdCardOperRes_MoveCmd& from);
  void MergeFrom(const RandEventRsp_CmdCardOperRes_MoveCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 move_posi = 1;
  inline bool has_move_posi() const;
  inline void clear_move_posi();
  static const int kMovePosiFieldNumber = 1;
  inline ::google::protobuf::int32 move_posi() const;
  inline void set_move_posi(::google::protobuf::int32 value);

  // optional .GridOper oper = 2;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 2;
  inline const ::GridOper& oper() const;
  inline ::GridOper* mutable_oper();
  inline ::GridOper* release_oper();
  inline void set_allocated_oper(::GridOper* oper);

  // @@protoc_insertion_point(class_scope:RandEventRsp.CmdCardOperRes.MoveCmd)
 private:
  inline void set_has_move_posi();
  inline void clear_has_move_posi();
  inline void set_has_oper();
  inline void clear_has_oper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GridOper* oper_;
  ::google::protobuf::int32 move_posi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_CmdCardOperRes_MoveCmd* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_CmdCardOperRes : public ::google::protobuf::Message {
 public:
  RandEventRsp_CmdCardOperRes();
  virtual ~RandEventRsp_CmdCardOperRes();

  RandEventRsp_CmdCardOperRes(const RandEventRsp_CmdCardOperRes& from);

  inline RandEventRsp_CmdCardOperRes& operator=(const RandEventRsp_CmdCardOperRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_CmdCardOperRes& default_instance();

  void Swap(RandEventRsp_CmdCardOperRes* other);

  // implements Message ----------------------------------------------

  RandEventRsp_CmdCardOperRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_CmdCardOperRes& from);
  void MergeFrom(const RandEventRsp_CmdCardOperRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEventRsp_CmdCardOperRes_MoveCmd MoveCmd;

  // accessors -------------------------------------------------------

  // optional int32 contribut_city = 1;
  inline bool has_contribut_city() const;
  inline void clear_contribut_city();
  static const int kContributCityFieldNumber = 1;
  inline ::google::protobuf::int32 contribut_city() const;
  inline void set_contribut_city(::google::protobuf::int32 value);

  // optional int32 contribut_role = 2;
  inline bool has_contribut_role() const;
  inline void clear_contribut_role();
  static const int kContributRoleFieldNumber = 2;
  inline ::google::protobuf::int32 contribut_role() const;
  inline void set_contribut_role(::google::protobuf::int32 value);

  // optional .HoldPeakRsp peak_rsp = 3;
  inline bool has_peak_rsp() const;
  inline void clear_peak_rsp();
  static const int kPeakRspFieldNumber = 3;
  inline const ::HoldPeakRsp& peak_rsp() const;
  inline ::HoldPeakRsp* mutable_peak_rsp();
  inline ::HoldPeakRsp* release_peak_rsp();
  inline void set_allocated_peak_rsp(::HoldPeakRsp* peak_rsp);

  // optional .RandEventRsp.CmdCardOperRes.MoveCmd move_cmd = 4;
  inline bool has_move_cmd() const;
  inline void clear_move_cmd();
  static const int kMoveCmdFieldNumber = 4;
  inline const ::RandEventRsp_CmdCardOperRes_MoveCmd& move_cmd() const;
  inline ::RandEventRsp_CmdCardOperRes_MoveCmd* mutable_move_cmd();
  inline ::RandEventRsp_CmdCardOperRes_MoveCmd* release_move_cmd();
  inline void set_allocated_move_cmd(::RandEventRsp_CmdCardOperRes_MoveCmd* move_cmd);

  // @@protoc_insertion_point(class_scope:RandEventRsp.CmdCardOperRes)
 private:
  inline void set_has_contribut_city();
  inline void clear_has_contribut_city();
  inline void set_has_contribut_role();
  inline void clear_has_contribut_role();
  inline void set_has_peak_rsp();
  inline void clear_has_peak_rsp();
  inline void set_has_move_cmd();
  inline void clear_has_move_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 contribut_city_;
  ::google::protobuf::int32 contribut_role_;
  ::HoldPeakRsp* peak_rsp_;
  ::RandEventRsp_CmdCardOperRes_MoveCmd* move_cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_CmdCardOperRes* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_AttackOperRes_ChangeCityRsp : public ::google::protobuf::Message {
 public:
  RandEventRsp_AttackOperRes_ChangeCityRsp();
  virtual ~RandEventRsp_AttackOperRes_ChangeCityRsp();

  RandEventRsp_AttackOperRes_ChangeCityRsp(const RandEventRsp_AttackOperRes_ChangeCityRsp& from);

  inline RandEventRsp_AttackOperRes_ChangeCityRsp& operator=(const RandEventRsp_AttackOperRes_ChangeCityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_AttackOperRes_ChangeCityRsp& default_instance();

  void Swap(RandEventRsp_AttackOperRes_ChangeCityRsp* other);

  // implements Message ----------------------------------------------

  RandEventRsp_AttackOperRes_ChangeCityRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_AttackOperRes_ChangeCityRsp& from);
  void MergeFrom(const RandEventRsp_AttackOperRes_ChangeCityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 my_city_index = 1;
  inline bool has_my_city_index() const;
  inline void clear_my_city_index();
  static const int kMyCityIndexFieldNumber = 1;
  inline ::google::protobuf::int32 my_city_index() const;
  inline void set_my_city_index(::google::protobuf::int32 value);

  // required int32 my_seat_no = 2;
  inline bool has_my_seat_no() const;
  inline void clear_my_seat_no();
  static const int kMySeatNoFieldNumber = 2;
  inline ::google::protobuf::int32 my_seat_no() const;
  inline void set_my_seat_no(::google::protobuf::int32 value);

  // required int32 he_city_index = 3;
  inline bool has_he_city_index() const;
  inline void clear_he_city_index();
  static const int kHeCityIndexFieldNumber = 3;
  inline ::google::protobuf::int32 he_city_index() const;
  inline void set_he_city_index(::google::protobuf::int32 value);

  // required int32 he_seat_no = 4;
  inline bool has_he_seat_no() const;
  inline void clear_he_seat_no();
  static const int kHeSeatNoFieldNumber = 4;
  inline ::google::protobuf::int32 he_seat_no() const;
  inline void set_he_seat_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventRsp.AttackOperRes.ChangeCityRsp)
 private:
  inline void set_has_my_city_index();
  inline void clear_has_my_city_index();
  inline void set_has_my_seat_no();
  inline void clear_has_my_seat_no();
  inline void set_has_he_city_index();
  inline void clear_has_he_city_index();
  inline void set_has_he_seat_no();
  inline void clear_has_he_seat_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 my_city_index_;
  ::google::protobuf::int32 my_seat_no_;
  ::google::protobuf::int32 he_city_index_;
  ::google::protobuf::int32 he_seat_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_AttackOperRes_ChangeCityRsp* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_AttackOperRes_EarthQuakeRsp : public ::google::protobuf::Message {
 public:
  RandEventRsp_AttackOperRes_EarthQuakeRsp();
  virtual ~RandEventRsp_AttackOperRes_EarthQuakeRsp();

  RandEventRsp_AttackOperRes_EarthQuakeRsp(const RandEventRsp_AttackOperRes_EarthQuakeRsp& from);

  inline RandEventRsp_AttackOperRes_EarthQuakeRsp& operator=(const RandEventRsp_AttackOperRes_EarthQuakeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_AttackOperRes_EarthQuakeRsp& default_instance();

  void Swap(RandEventRsp_AttackOperRes_EarthQuakeRsp* other);

  // implements Message ----------------------------------------------

  RandEventRsp_AttackOperRes_EarthQuakeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_AttackOperRes_EarthQuakeRsp& from);
  void MergeFrom(const RandEventRsp_AttackOperRes_EarthQuakeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 quake_lvl = 1;
  inline bool has_quake_lvl() const;
  inline void clear_quake_lvl();
  static const int kQuakeLvlFieldNumber = 1;
  inline ::google::protobuf::int32 quake_lvl() const;
  inline void set_quake_lvl(::google::protobuf::int32 value);

  // required int32 attacked_city = 2;
  inline bool has_attacked_city() const;
  inline void clear_attacked_city();
  static const int kAttackedCityFieldNumber = 2;
  inline ::google::protobuf::int32 attacked_city() const;
  inline void set_attacked_city(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventRsp.AttackOperRes.EarthQuakeRsp)
 private:
  inline void set_has_quake_lvl();
  inline void clear_has_quake_lvl();
  inline void set_has_attacked_city();
  inline void clear_has_attacked_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 quake_lvl_;
  ::google::protobuf::int32 attacked_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_AttackOperRes_EarthQuakeRsp* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_AttackOperRes_UfoRsp : public ::google::protobuf::Message {
 public:
  RandEventRsp_AttackOperRes_UfoRsp();
  virtual ~RandEventRsp_AttackOperRes_UfoRsp();

  RandEventRsp_AttackOperRes_UfoRsp(const RandEventRsp_AttackOperRes_UfoRsp& from);

  inline RandEventRsp_AttackOperRes_UfoRsp& operator=(const RandEventRsp_AttackOperRes_UfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_AttackOperRes_UfoRsp& default_instance();

  void Swap(RandEventRsp_AttackOperRes_UfoRsp* other);

  // implements Message ----------------------------------------------

  RandEventRsp_AttackOperRes_UfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_AttackOperRes_UfoRsp& from);
  void MergeFrom(const RandEventRsp_AttackOperRes_UfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 quake_lvl = 1;
  inline bool has_quake_lvl() const;
  inline void clear_quake_lvl();
  static const int kQuakeLvlFieldNumber = 1;
  inline ::google::protobuf::int32 quake_lvl() const;
  inline void set_quake_lvl(::google::protobuf::int32 value);

  // required int32 attacked_city = 2;
  inline bool has_attacked_city() const;
  inline void clear_attacked_city();
  static const int kAttackedCityFieldNumber = 2;
  inline ::google::protobuf::int32 attacked_city() const;
  inline void set_attacked_city(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventRsp.AttackOperRes.UfoRsp)
 private:
  inline void set_has_quake_lvl();
  inline void clear_has_quake_lvl();
  inline void set_has_attacked_city();
  inline void clear_has_attacked_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 quake_lvl_;
  ::google::protobuf::int32 attacked_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_AttackOperRes_UfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_AttackOperRes_RecoveryInfo : public ::google::protobuf::Message {
 public:
  RandEventRsp_AttackOperRes_RecoveryInfo();
  virtual ~RandEventRsp_AttackOperRes_RecoveryInfo();

  RandEventRsp_AttackOperRes_RecoveryInfo(const RandEventRsp_AttackOperRes_RecoveryInfo& from);

  inline RandEventRsp_AttackOperRes_RecoveryInfo& operator=(const RandEventRsp_AttackOperRes_RecoveryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_AttackOperRes_RecoveryInfo& default_instance();

  void Swap(RandEventRsp_AttackOperRes_RecoveryInfo* other);

  // implements Message ----------------------------------------------

  RandEventRsp_AttackOperRes_RecoveryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_AttackOperRes_RecoveryInfo& from);
  void MergeFrom(const RandEventRsp_AttackOperRes_RecoveryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // required int32 card_type = 2;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // required int32 attacked_city = 3;
  inline bool has_attacked_city() const;
  inline void clear_attacked_city();
  static const int kAttackedCityFieldNumber = 3;
  inline ::google::protobuf::int32 attacked_city() const;
  inline void set_attacked_city(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventRsp.AttackOperRes.RecoveryInfo)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_attacked_city();
  inline void clear_has_attacked_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 attacked_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_AttackOperRes_RecoveryInfo* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp_AttackOperRes : public ::google::protobuf::Message {
 public:
  RandEventRsp_AttackOperRes();
  virtual ~RandEventRsp_AttackOperRes();

  RandEventRsp_AttackOperRes(const RandEventRsp_AttackOperRes& from);

  inline RandEventRsp_AttackOperRes& operator=(const RandEventRsp_AttackOperRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp_AttackOperRes& default_instance();

  void Swap(RandEventRsp_AttackOperRes* other);

  // implements Message ----------------------------------------------

  RandEventRsp_AttackOperRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp_AttackOperRes& from);
  void MergeFrom(const RandEventRsp_AttackOperRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEventRsp_AttackOperRes_ChangeCityRsp ChangeCityRsp;
  typedef RandEventRsp_AttackOperRes_EarthQuakeRsp EarthQuakeRsp;
  typedef RandEventRsp_AttackOperRes_UfoRsp UfoRsp;
  typedef RandEventRsp_AttackOperRes_RecoveryInfo RecoveryInfo;

  // accessors -------------------------------------------------------

  // repeated int32 attacked_city = 1;
  inline int attacked_city_size() const;
  inline void clear_attacked_city();
  static const int kAttackedCityFieldNumber = 1;
  inline ::google::protobuf::int32 attacked_city(int index) const;
  inline void set_attacked_city(int index, ::google::protobuf::int32 value);
  inline void add_attacked_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attacked_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attacked_city();

  // optional .RandEventRsp.AttackOperRes.ChangeCityRsp change_city_rsp = 2;
  inline bool has_change_city_rsp() const;
  inline void clear_change_city_rsp();
  static const int kChangeCityRspFieldNumber = 2;
  inline const ::RandEventRsp_AttackOperRes_ChangeCityRsp& change_city_rsp() const;
  inline ::RandEventRsp_AttackOperRes_ChangeCityRsp* mutable_change_city_rsp();
  inline ::RandEventRsp_AttackOperRes_ChangeCityRsp* release_change_city_rsp();
  inline void set_allocated_change_city_rsp(::RandEventRsp_AttackOperRes_ChangeCityRsp* change_city_rsp);

  // optional .RandEventRsp.AttackOperRes.EarthQuakeRsp quake_rsp = 3;
  inline bool has_quake_rsp() const;
  inline void clear_quake_rsp();
  static const int kQuakeRspFieldNumber = 3;
  inline const ::RandEventRsp_AttackOperRes_EarthQuakeRsp& quake_rsp() const;
  inline ::RandEventRsp_AttackOperRes_EarthQuakeRsp* mutable_quake_rsp();
  inline ::RandEventRsp_AttackOperRes_EarthQuakeRsp* release_quake_rsp();
  inline void set_allocated_quake_rsp(::RandEventRsp_AttackOperRes_EarthQuakeRsp* quake_rsp);

  // repeated .RandEventRsp.AttackOperRes.UfoRsp ufo_rsp = 4;
  inline int ufo_rsp_size() const;
  inline void clear_ufo_rsp();
  static const int kUfoRspFieldNumber = 4;
  inline const ::RandEventRsp_AttackOperRes_UfoRsp& ufo_rsp(int index) const;
  inline ::RandEventRsp_AttackOperRes_UfoRsp* mutable_ufo_rsp(int index);
  inline ::RandEventRsp_AttackOperRes_UfoRsp* add_ufo_rsp();
  inline const ::google::protobuf::RepeatedPtrField< ::RandEventRsp_AttackOperRes_UfoRsp >&
      ufo_rsp() const;
  inline ::google::protobuf::RepeatedPtrField< ::RandEventRsp_AttackOperRes_UfoRsp >*
      mutable_ufo_rsp();

  // optional .RandEventRsp.AttackOperRes.RecoveryInfo recovery_info = 5;
  inline bool has_recovery_info() const;
  inline void clear_recovery_info();
  static const int kRecoveryInfoFieldNumber = 5;
  inline const ::RandEventRsp_AttackOperRes_RecoveryInfo& recovery_info() const;
  inline ::RandEventRsp_AttackOperRes_RecoveryInfo* mutable_recovery_info();
  inline ::RandEventRsp_AttackOperRes_RecoveryInfo* release_recovery_info();
  inline void set_allocated_recovery_info(::RandEventRsp_AttackOperRes_RecoveryInfo* recovery_info);

  // @@protoc_insertion_point(class_scope:RandEventRsp.AttackOperRes)
 private:
  inline void set_has_change_city_rsp();
  inline void clear_has_change_city_rsp();
  inline void set_has_quake_rsp();
  inline void clear_has_quake_rsp();
  inline void set_has_recovery_info();
  inline void clear_has_recovery_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attacked_city_;
  ::RandEventRsp_AttackOperRes_ChangeCityRsp* change_city_rsp_;
  ::RandEventRsp_AttackOperRes_EarthQuakeRsp* quake_rsp_;
  ::google::protobuf::RepeatedPtrField< ::RandEventRsp_AttackOperRes_UfoRsp > ufo_rsp_;
  ::RandEventRsp_AttackOperRes_RecoveryInfo* recovery_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp_AttackOperRes* default_instance_;
};
// -------------------------------------------------------------------

class RandEventRsp : public ::google::protobuf::Message {
 public:
  RandEventRsp();
  virtual ~RandEventRsp();

  RandEventRsp(const RandEventRsp& from);

  inline RandEventRsp& operator=(const RandEventRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventRsp& default_instance();

  void Swap(RandEventRsp* other);

  // implements Message ----------------------------------------------

  RandEventRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventRsp& from);
  void MergeFrom(const RandEventRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEventRsp_IslandInfo IslandInfo;
  typedef RandEventRsp_CmdCardOperRes CmdCardOperRes;
  typedef RandEventRsp_AttackOperRes AttackOperRes;

  // accessors -------------------------------------------------------

  // required int32 card_type = 1;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // required int32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional .RandEventRsp.CmdCardOperRes cmd_card_oper_res = 3;
  inline bool has_cmd_card_oper_res() const;
  inline void clear_cmd_card_oper_res();
  static const int kCmdCardOperResFieldNumber = 3;
  inline const ::RandEventRsp_CmdCardOperRes& cmd_card_oper_res() const;
  inline ::RandEventRsp_CmdCardOperRes* mutable_cmd_card_oper_res();
  inline ::RandEventRsp_CmdCardOperRes* release_cmd_card_oper_res();
  inline void set_allocated_cmd_card_oper_res(::RandEventRsp_CmdCardOperRes* cmd_card_oper_res);

  // optional .RandEventRsp.AttackOperRes attack_card_oper_res = 4;
  inline bool has_attack_card_oper_res() const;
  inline void clear_attack_card_oper_res();
  static const int kAttackCardOperResFieldNumber = 4;
  inline const ::RandEventRsp_AttackOperRes& attack_card_oper_res() const;
  inline ::RandEventRsp_AttackOperRes* mutable_attack_card_oper_res();
  inline ::RandEventRsp_AttackOperRes* release_attack_card_oper_res();
  inline void set_allocated_attack_card_oper_res(::RandEventRsp_AttackOperRes* attack_card_oper_res);

  // repeated .RandEventRsp.IslandInfo island_info = 5;
  inline int island_info_size() const;
  inline void clear_island_info();
  static const int kIslandInfoFieldNumber = 5;
  inline const ::RandEventRsp_IslandInfo& island_info(int index) const;
  inline ::RandEventRsp_IslandInfo* mutable_island_info(int index);
  inline ::RandEventRsp_IslandInfo* add_island_info();
  inline const ::google::protobuf::RepeatedPtrField< ::RandEventRsp_IslandInfo >&
      island_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::RandEventRsp_IslandInfo >*
      mutable_island_info();

  // @@protoc_insertion_point(class_scope:RandEventRsp)
 private:
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_cmd_card_oper_res();
  inline void clear_has_cmd_card_oper_res();
  inline void set_has_attack_card_oper_res();
  inline void clear_has_attack_card_oper_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 event_id_;
  ::RandEventRsp_CmdCardOperRes* cmd_card_oper_res_;
  ::RandEventRsp_AttackOperRes* attack_card_oper_res_;
  ::google::protobuf::RepeatedPtrField< ::RandEventRsp_IslandInfo > island_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static RandEventRsp* default_instance_;
};
// -------------------------------------------------------------------

class PlayerResult : public ::google::protobuf::Message {
 public:
  PlayerResult();
  virtual ~PlayerResult();

  PlayerResult(const PlayerResult& from);

  inline PlayerResult& operator=(const PlayerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerResult& default_instance();

  void Swap(PlayerResult* other);

  // implements Message ----------------------------------------------

  PlayerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerResult& from);
  void MergeFrom(const PlayerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_no = 1;
  inline bool has_seat_no() const;
  inline void clear_seat_no();
  static const int kSeatNoFieldNumber = 1;
  inline ::google::protobuf::int32 seat_no() const;
  inline void set_seat_no(::google::protobuf::int32 value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 gold_res = 3;
  inline bool has_gold_res() const;
  inline void clear_gold_res();
  static const int kGoldResFieldNumber = 3;
  inline ::google::protobuf::int32 gold_res() const;
  inline void set_gold_res(::google::protobuf::int32 value);

  // required int32 exp_res = 4;
  inline bool has_exp_res() const;
  inline void clear_exp_res();
  static const int kExpResFieldNumber = 4;
  inline ::google::protobuf::int32 exp_res() const;
  inline void set_exp_res(::google::protobuf::int32 value);

  // required int32 score_res = 5;
  inline bool has_score_res() const;
  inline void clear_score_res();
  static const int kScoreResFieldNumber = 5;
  inline ::google::protobuf::int32 score_res() const;
  inline void set_score_res(::google::protobuf::int32 value);

  // required bool is_mvp = 6;
  inline bool has_is_mvp() const;
  inline void clear_is_mvp();
  static const int kIsMvpFieldNumber = 6;
  inline bool is_mvp() const;
  inline void set_is_mvp(bool value);

  // optional int32 win_type = 7;
  inline bool has_win_type() const;
  inline void clear_win_type();
  static const int kWinTypeFieldNumber = 7;
  inline ::google::protobuf::int32 win_type() const;
  inline void set_win_type(::google::protobuf::int32 value);

  // required int32 lvl_reward = 8;
  inline bool has_lvl_reward() const;
  inline void clear_lvl_reward();
  static const int kLvlRewardFieldNumber = 8;
  inline ::google::protobuf::int32 lvl_reward() const;
  inline void set_lvl_reward(::google::protobuf::int32 value);

  // required int32 can_continue = 9;
  inline bool has_can_continue() const;
  inline void clear_can_continue();
  static const int kCanContinueFieldNumber = 9;
  inline ::google::protobuf::int32 can_continue() const;
  inline void set_can_continue(::google::protobuf::int32 value);

  // optional int32 offset_gold_cost = 10;
  inline bool has_offset_gold_cost() const;
  inline void clear_offset_gold_cost();
  static const int kOffsetGoldCostFieldNumber = 10;
  inline ::google::protobuf::int32 offset_gold_cost() const;
  inline void set_offset_gold_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerResult)
 private:
  inline void set_has_seat_no();
  inline void clear_has_seat_no();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gold_res();
  inline void clear_has_gold_res();
  inline void set_has_exp_res();
  inline void clear_has_exp_res();
  inline void set_has_score_res();
  inline void clear_has_score_res();
  inline void set_has_is_mvp();
  inline void clear_has_is_mvp();
  inline void set_has_win_type();
  inline void clear_has_win_type();
  inline void set_has_lvl_reward();
  inline void clear_has_lvl_reward();
  inline void set_has_can_continue();
  inline void clear_has_can_continue();
  inline void set_has_offset_gold_cost();
  inline void clear_has_offset_gold_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_no_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gold_res_;
  ::google::protobuf::int32 exp_res_;
  ::google::protobuf::int32 score_res_;
  bool is_mvp_;
  ::google::protobuf::int32 win_type_;
  ::google::protobuf::int32 lvl_reward_;
  ::google::protobuf::int32 can_continue_;
  ::google::protobuf::int32 offset_gold_cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static PlayerResult* default_instance_;
};
// -------------------------------------------------------------------

class GridInfo_AttackState : public ::google::protobuf::Message {
 public:
  GridInfo_AttackState();
  virtual ~GridInfo_AttackState();

  GridInfo_AttackState(const GridInfo_AttackState& from);

  inline GridInfo_AttackState& operator=(const GridInfo_AttackState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridInfo_AttackState& default_instance();

  void Swap(GridInfo_AttackState* other);

  // implements Message ----------------------------------------------

  GridInfo_AttackState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridInfo_AttackState& from);
  void MergeFrom(const GridInfo_AttackState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 round = 2;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 2;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GridInfo.AttackState)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_round();
  inline void clear_has_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 round_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GridInfo_AttackState* default_instance_;
};
// -------------------------------------------------------------------

class GridInfo : public ::google::protobuf::Message {
 public:
  GridInfo();
  virtual ~GridInfo();

  GridInfo(const GridInfo& from);

  inline GridInfo& operator=(const GridInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridInfo& default_instance();

  void Swap(GridInfo* other);

  // implements Message ----------------------------------------------

  GridInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridInfo& from);
  void MergeFrom(const GridInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GridInfo_AttackState AttackState;

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 owner_id = 2;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  inline ::google::protobuf::int32 owner_id() const;
  inline void set_owner_id(::google::protobuf::int32 value);

  // optional int32 double = 3;
  inline bool has_double_() const;
  inline void clear_double_();
  static const int kDoubleFieldNumber = 3;
  inline ::google::protobuf::int32 double_() const;
  inline void set_double_(::google::protobuf::int32 value);

  // repeated int32 builded_info = 4;
  inline int builded_info_size() const;
  inline void clear_builded_info();
  static const int kBuildedInfoFieldNumber = 4;
  inline ::google::protobuf::int32 builded_info(int index) const;
  inline void set_builded_info(int index, ::google::protobuf::int32 value);
  inline void add_builded_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      builded_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_builded_info();

  // optional int32 lvl = 5;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 5;
  inline ::google::protobuf::int32 lvl() const;
  inline void set_lvl(::google::protobuf::int32 value);

  // optional bool hold_peak = 6;
  inline bool has_hold_peak() const;
  inline void clear_hold_peak();
  static const int kHoldPeakFieldNumber = 6;
  inline bool hold_peak() const;
  inline void set_hold_peak(bool value);

  // optional .GridInfo.AttackState attack_stat = 7;
  inline bool has_attack_stat() const;
  inline void clear_attack_stat();
  static const int kAttackStatFieldNumber = 7;
  inline const ::GridInfo_AttackState& attack_stat() const;
  inline ::GridInfo_AttackState* mutable_attack_stat();
  inline ::GridInfo_AttackState* release_attack_stat();
  inline void set_allocated_attack_stat(::GridInfo_AttackState* attack_stat);

  // optional bool is_occupy = 8;
  inline bool has_is_occupy() const;
  inline void clear_is_occupy();
  static const int kIsOccupyFieldNumber = 8;
  inline bool is_occupy() const;
  inline void set_is_occupy(bool value);

  // optional int32 base_toll = 9;
  inline bool has_base_toll() const;
  inline void clear_base_toll();
  static const int kBaseTollFieldNumber = 9;
  inline ::google::protobuf::int32 base_toll() const;
  inline void set_base_toll(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GridInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_double_();
  inline void clear_has_double_();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_hold_peak();
  inline void clear_has_hold_peak();
  inline void set_has_attack_stat();
  inline void clear_has_attack_stat();
  inline void set_has_is_occupy();
  inline void clear_has_is_occupy();
  inline void set_has_base_toll();
  inline void clear_has_base_toll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 owner_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > builded_info_;
  ::google::protobuf::int32 double__;
  ::google::protobuf::int32 lvl_;
  ::GridInfo_AttackState* attack_stat_;
  bool hold_peak_;
  bool is_occupy_;
  ::google::protobuf::int32 base_toll_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GridInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerGameInfo : public ::google::protobuf::Message {
 public:
  PlayerGameInfo();
  virtual ~PlayerGameInfo();

  PlayerGameInfo(const PlayerGameInfo& from);

  inline PlayerGameInfo& operator=(const PlayerGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGameInfo& default_instance();

  void Swap(PlayerGameInfo* other);

  // implements Message ----------------------------------------------

  PlayerGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerGameInfo& from);
  void MergeFrom(const PlayerGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rold_id = 1;
  inline bool has_rold_id() const;
  inline void clear_rold_id();
  static const int kRoldIdFieldNumber = 1;
  inline ::google::protobuf::int32 rold_id() const;
  inline void set_rold_id(::google::protobuf::int32 value);

  // required int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // required int32 game_money = 3;
  inline bool has_game_money() const;
  inline void clear_game_money();
  static const int kGameMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 game_money() const;
  inline void set_game_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerGameInfo)
 private:
  inline void set_has_rold_id();
  inline void clear_has_rold_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_game_money();
  inline void clear_has_game_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rold_id_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 game_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static PlayerGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameInfoChange : public ::google::protobuf::Message {
 public:
  GameInfoChange();
  virtual ~GameInfoChange();

  GameInfoChange(const GameInfoChange& from);

  inline GameInfoChange& operator=(const GameInfoChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfoChange& default_instance();

  void Swap(GameInfoChange* other);

  // implements Message ----------------------------------------------

  GameInfoChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfoChange& from);
  void MergeFrom(const GameInfoChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 estate_change = 2;
  inline bool has_estate_change() const;
  inline void clear_estate_change();
  static const int kEstateChangeFieldNumber = 2;
  inline ::google::protobuf::int32 estate_change() const;
  inline void set_estate_change(::google::protobuf::int32 value);

  // optional int32 money_change = 3;
  inline bool has_money_change() const;
  inline void clear_money_change();
  static const int kMoneyChangeFieldNumber = 3;
  inline ::google::protobuf::int32 money_change() const;
  inline void set_money_change(::google::protobuf::int32 value);

  // optional int32 money_change_type = 4;
  inline bool has_money_change_type() const;
  inline void clear_money_change_type();
  static const int kMoneyChangeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 money_change_type() const;
  inline void set_money_change_type(::google::protobuf::int32 value);

  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional bool double_toll = 6;
  inline bool has_double_toll() const;
  inline void clear_double_toll();
  static const int kDoubleTollFieldNumber = 6;
  inline bool double_toll() const;
  inline void set_double_toll(bool value);

  // optional int32 curr_money = 7;
  inline bool has_curr_money() const;
  inline void clear_curr_money();
  static const int kCurrMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 curr_money() const;
  inline void set_curr_money(::google::protobuf::int32 value);

  // optional int32 curr_estate = 8;
  inline bool has_curr_estate() const;
  inline void clear_curr_estate();
  static const int kCurrEstateFieldNumber = 8;
  inline ::google::protobuf::int32 curr_estate() const;
  inline void set_curr_estate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameInfoChange)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_estate_change();
  inline void clear_has_estate_change();
  inline void set_has_money_change();
  inline void clear_has_money_change();
  inline void set_has_money_change_type();
  inline void clear_has_money_change_type();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_double_toll();
  inline void clear_has_double_toll();
  inline void set_has_curr_money();
  inline void clear_has_curr_money();
  inline void set_has_curr_estate();
  inline void clear_has_curr_estate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 estate_change_;
  ::google::protobuf::int32 money_change_;
  ::google::protobuf::int32 money_change_type_;
  ::google::protobuf::int32 rank_;
  bool double_toll_;
  ::google::protobuf::int32 curr_money_;
  ::google::protobuf::int32 curr_estate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static GameInfoChange* default_instance_;
};
// -------------------------------------------------------------------

class OccupyWarn_LastOccupy : public ::google::protobuf::Message {
 public:
  OccupyWarn_LastOccupy();
  virtual ~OccupyWarn_LastOccupy();

  OccupyWarn_LastOccupy(const OccupyWarn_LastOccupy& from);

  inline OccupyWarn_LastOccupy& operator=(const OccupyWarn_LastOccupy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupyWarn_LastOccupy& default_instance();

  void Swap(OccupyWarn_LastOccupy* other);

  // implements Message ----------------------------------------------

  OccupyWarn_LastOccupy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OccupyWarn_LastOccupy& from);
  void MergeFrom(const OccupyWarn_LastOccupy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 occupy_list = 1;
  inline int occupy_list_size() const;
  inline void clear_occupy_list();
  static const int kOccupyListFieldNumber = 1;
  inline ::google::protobuf::int32 occupy_list(int index) const;
  inline void set_occupy_list(int index, ::google::protobuf::int32 value);
  inline void add_occupy_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      occupy_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_occupy_list();

  // optional int32 last_grid = 2;
  inline bool has_last_grid() const;
  inline void clear_last_grid();
  static const int kLastGridFieldNumber = 2;
  inline ::google::protobuf::int32 last_grid() const;
  inline void set_last_grid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OccupyWarn.LastOccupy)
 private:
  inline void set_has_last_grid();
  inline void clear_has_last_grid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > occupy_list_;
  ::google::protobuf::int32 last_grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static OccupyWarn_LastOccupy* default_instance_;
};
// -------------------------------------------------------------------

class OccupyWarn_ThreeColor : public ::google::protobuf::Message {
 public:
  OccupyWarn_ThreeColor();
  virtual ~OccupyWarn_ThreeColor();

  OccupyWarn_ThreeColor(const OccupyWarn_ThreeColor& from);

  inline OccupyWarn_ThreeColor& operator=(const OccupyWarn_ThreeColor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupyWarn_ThreeColor& default_instance();

  void Swap(OccupyWarn_ThreeColor* other);

  // implements Message ----------------------------------------------

  OccupyWarn_ThreeColor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OccupyWarn_ThreeColor& from);
  void MergeFrom(const OccupyWarn_ThreeColor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 occupy_color1_list = 1;
  inline int occupy_color1_list_size() const;
  inline void clear_occupy_color1_list();
  static const int kOccupyColor1ListFieldNumber = 1;
  inline ::google::protobuf::int32 occupy_color1_list(int index) const;
  inline void set_occupy_color1_list(int index, ::google::protobuf::int32 value);
  inline void add_occupy_color1_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      occupy_color1_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_occupy_color1_list();

  // repeated int32 occupy_color2_list = 2;
  inline int occupy_color2_list_size() const;
  inline void clear_occupy_color2_list();
  static const int kOccupyColor2ListFieldNumber = 2;
  inline ::google::protobuf::int32 occupy_color2_list(int index) const;
  inline void set_occupy_color2_list(int index, ::google::protobuf::int32 value);
  inline void add_occupy_color2_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      occupy_color2_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_occupy_color2_list();

  // repeated .OccupyWarn.LastOccupy last_occupy = 3;
  inline int last_occupy_size() const;
  inline void clear_last_occupy();
  static const int kLastOccupyFieldNumber = 3;
  inline const ::OccupyWarn_LastOccupy& last_occupy(int index) const;
  inline ::OccupyWarn_LastOccupy* mutable_last_occupy(int index);
  inline ::OccupyWarn_LastOccupy* add_last_occupy();
  inline const ::google::protobuf::RepeatedPtrField< ::OccupyWarn_LastOccupy >&
      last_occupy() const;
  inline ::google::protobuf::RepeatedPtrField< ::OccupyWarn_LastOccupy >*
      mutable_last_occupy();

  // @@protoc_insertion_point(class_scope:OccupyWarn.ThreeColor)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > occupy_color1_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > occupy_color2_list_;
  ::google::protobuf::RepeatedPtrField< ::OccupyWarn_LastOccupy > last_occupy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static OccupyWarn_ThreeColor* default_instance_;
};
// -------------------------------------------------------------------

class OccupyWarn : public ::google::protobuf::Message {
 public:
  OccupyWarn();
  virtual ~OccupyWarn();

  OccupyWarn(const OccupyWarn& from);

  inline OccupyWarn& operator=(const OccupyWarn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupyWarn& default_instance();

  void Swap(OccupyWarn* other);

  // implements Message ----------------------------------------------

  OccupyWarn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OccupyWarn& from);
  void MergeFrom(const OccupyWarn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OccupyWarn_LastOccupy LastOccupy;
  typedef OccupyWarn_ThreeColor ThreeColor;

  // accessors -------------------------------------------------------

  // required int32 warn_type = 1;
  inline bool has_warn_type() const;
  inline void clear_warn_type();
  static const int kWarnTypeFieldNumber = 1;
  inline ::google::protobuf::int32 warn_type() const;
  inline void set_warn_type(::google::protobuf::int32 value);

  // required int32 warn_flag = 2;
  inline bool has_warn_flag() const;
  inline void clear_warn_flag();
  static const int kWarnFlagFieldNumber = 2;
  inline ::google::protobuf::int32 warn_flag() const;
  inline void set_warn_flag(::google::protobuf::int32 value);

  // optional .OccupyWarn.ThreeColor three_color_occupy = 3;
  inline bool has_three_color_occupy() const;
  inline void clear_three_color_occupy();
  static const int kThreeColorOccupyFieldNumber = 3;
  inline const ::OccupyWarn_ThreeColor& three_color_occupy() const;
  inline ::OccupyWarn_ThreeColor* mutable_three_color_occupy();
  inline ::OccupyWarn_ThreeColor* release_three_color_occupy();
  inline void set_allocated_three_color_occupy(::OccupyWarn_ThreeColor* three_color_occupy);

  // optional .OccupyWarn.LastOccupy row_occupy = 4;
  inline bool has_row_occupy() const;
  inline void clear_row_occupy();
  static const int kRowOccupyFieldNumber = 4;
  inline const ::OccupyWarn_LastOccupy& row_occupy() const;
  inline ::OccupyWarn_LastOccupy* mutable_row_occupy();
  inline ::OccupyWarn_LastOccupy* release_row_occupy();
  inline void set_allocated_row_occupy(::OccupyWarn_LastOccupy* row_occupy);

  // optional .OccupyWarn.LastOccupy sightsee_occupy = 5;
  inline bool has_sightsee_occupy() const;
  inline void clear_sightsee_occupy();
  static const int kSightseeOccupyFieldNumber = 5;
  inline const ::OccupyWarn_LastOccupy& sightsee_occupy() const;
  inline ::OccupyWarn_LastOccupy* mutable_sightsee_occupy();
  inline ::OccupyWarn_LastOccupy* release_sightsee_occupy();
  inline void set_allocated_sightsee_occupy(::OccupyWarn_LastOccupy* sightsee_occupy);

  // repeated int32 winner_list = 6;
  inline int winner_list_size() const;
  inline void clear_winner_list();
  static const int kWinnerListFieldNumber = 6;
  inline ::google::protobuf::int32 winner_list(int index) const;
  inline void set_winner_list(int index, ::google::protobuf::int32 value);
  inline void add_winner_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winner_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winner_list();

  // @@protoc_insertion_point(class_scope:OccupyWarn)
 private:
  inline void set_has_warn_type();
  inline void clear_has_warn_type();
  inline void set_has_warn_flag();
  inline void clear_has_warn_flag();
  inline void set_has_three_color_occupy();
  inline void clear_has_three_color_occupy();
  inline void set_has_row_occupy();
  inline void clear_has_row_occupy();
  inline void set_has_sightsee_occupy();
  inline void clear_has_sightsee_occupy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 warn_type_;
  ::google::protobuf::int32 warn_flag_;
  ::OccupyWarn_ThreeColor* three_color_occupy_;
  ::OccupyWarn_LastOccupy* row_occupy_;
  ::OccupyWarn_LastOccupy* sightsee_occupy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winner_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static OccupyWarn* default_instance_;
};
// -------------------------------------------------------------------

class NextOper : public ::google::protobuf::Message {
 public:
  NextOper();
  virtual ~NextOper();

  NextOper(const NextOper& from);

  inline NextOper& operator=(const NextOper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NextOper& default_instance();

  void Swap(NextOper* other);

  // implements Message ----------------------------------------------

  NextOper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NextOper& from);
  void MergeFrom(const NextOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 next_ctrl_seatid = 1;
  inline bool has_next_ctrl_seatid() const;
  inline void clear_next_ctrl_seatid();
  static const int kNextCtrlSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 next_ctrl_seatid() const;
  inline void set_next_ctrl_seatid(::google::protobuf::int32 value);

  // required int32 next_ctrl_oper = 2;
  inline bool has_next_ctrl_oper() const;
  inline void clear_next_ctrl_oper();
  static const int kNextCtrlOperFieldNumber = 2;
  inline ::google::protobuf::int32 next_ctrl_oper() const;
  inline void set_next_ctrl_oper(::google::protobuf::int32 value);

  // optional int32 esc_island_oper = 3;
  inline bool has_esc_island_oper() const;
  inline void clear_esc_island_oper();
  static const int kEscIslandOperFieldNumber = 3;
  inline ::google::protobuf::int32 esc_island_oper() const;
  inline void set_esc_island_oper(::google::protobuf::int32 value);

  // optional int32 esc_island_cost = 4;
  inline bool has_esc_island_cost() const;
  inline void clear_esc_island_cost();
  static const int kEscIslandCostFieldNumber = 4;
  inline ::google::protobuf::int32 esc_island_cost() const;
  inline void set_esc_island_cost(::google::protobuf::int32 value);

  // repeated int32 can_fly_city = 5;
  inline int can_fly_city_size() const;
  inline void clear_can_fly_city();
  static const int kCanFlyCityFieldNumber = 5;
  inline ::google::protobuf::int32 can_fly_city(int index) const;
  inline void set_can_fly_city(int index, ::google::protobuf::int32 value);
  inline void add_can_fly_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      can_fly_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_can_fly_city();

  // optional bool no_money_fly = 6;
  inline bool has_no_money_fly() const;
  inline void clear_no_money_fly();
  static const int kNoMoneyFlyFieldNumber = 6;
  inline bool no_money_fly() const;
  inline void set_no_money_fly(bool value);

  // @@protoc_insertion_point(class_scope:NextOper)
 private:
  inline void set_has_next_ctrl_seatid();
  inline void clear_has_next_ctrl_seatid();
  inline void set_has_next_ctrl_oper();
  inline void clear_has_next_ctrl_oper();
  inline void set_has_esc_island_oper();
  inline void clear_has_esc_island_oper();
  inline void set_has_esc_island_cost();
  inline void clear_has_esc_island_cost();
  inline void set_has_no_money_fly();
  inline void clear_has_no_money_fly();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 next_ctrl_seatid_;
  ::google::protobuf::int32 next_ctrl_oper_;
  ::google::protobuf::int32 esc_island_oper_;
  ::google::protobuf::int32 esc_island_cost_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > can_fly_city_;
  bool no_money_fly_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static NextOper* default_instance_;
};
// -------------------------------------------------------------------

class S2C_SenceInfo : public ::google::protobuf::Message {
 public:
  S2C_SenceInfo();
  virtual ~S2C_SenceInfo();

  S2C_SenceInfo(const S2C_SenceInfo& from);

  inline S2C_SenceInfo& operator=(const S2C_SenceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_SenceInfo& default_instance();

  void Swap(S2C_SenceInfo* other);

  // implements Message ----------------------------------------------

  S2C_SenceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_SenceInfo& from);
  void MergeFrom(const S2C_SenceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional bool is_reconnect = 2;
  inline bool has_is_reconnect() const;
  inline void clear_is_reconnect();
  static const int kIsReconnectFieldNumber = 2;
  inline bool is_reconnect() const;
  inline void set_is_reconnect(bool value);

  // optional .NextOper next_oper = 3;
  inline bool has_next_oper() const;
  inline void clear_next_oper();
  static const int kNextOperFieldNumber = 3;
  inline const ::NextOper& next_oper() const;
  inline ::NextOper* mutable_next_oper();
  inline ::NextOper* release_next_oper();
  inline void set_allocated_next_oper(::NextOper* next_oper);

  // optional .SelectedFirstCard select_card = 5;
  inline bool has_select_card() const;
  inline void clear_select_card();
  static const int kSelectCardFieldNumber = 5;
  inline const ::SelectedFirstCard& select_card() const;
  inline ::SelectedFirstCard* mutable_select_card();
  inline ::SelectedFirstCard* release_select_card();
  inline void set_allocated_select_card(::SelectedFirstCard* select_card);

  // repeated int32 cere_city = 6;
  inline int cere_city_size() const;
  inline void clear_cere_city();
  static const int kCereCityFieldNumber = 6;
  inline ::google::protobuf::int32 cere_city(int index) const;
  inline void set_cere_city(int index, ::google::protobuf::int32 value);
  inline void add_cere_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cere_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cere_city();

  // optional .FirstCardInfo first_card = 7;
  inline bool has_first_card() const;
  inline void clear_first_card();
  static const int kFirstCardFieldNumber = 7;
  inline const ::FirstCardInfo& first_card() const;
  inline ::FirstCardInfo* mutable_first_card();
  inline ::FirstCardInfo* release_first_card();
  inline void set_allocated_first_card(::FirstCardInfo* first_card);

  // optional .DicingResult dicing_res = 8;
  inline bool has_dicing_res() const;
  inline void clear_dicing_res();
  static const int kDicingResFieldNumber = 8;
  inline const ::DicingResult& dicing_res() const;
  inline ::DicingResult* mutable_dicing_res();
  inline ::DicingResult* release_dicing_res();
  inline void set_allocated_dicing_res(::DicingResult* dicing_res);

  // optional .ActionResult action_res = 9;
  inline bool has_action_res() const;
  inline void clear_action_res();
  static const int kActionResFieldNumber = 9;
  inline const ::ActionResult& action_res() const;
  inline ::ActionResult* mutable_action_res();
  inline ::ActionResult* release_action_res();
  inline void set_allocated_action_res(::ActionResult* action_res);

  // repeated .GameInfoChange info_change = 10;
  inline int info_change_size() const;
  inline void clear_info_change();
  static const int kInfoChangeFieldNumber = 10;
  inline const ::GameInfoChange& info_change(int index) const;
  inline ::GameInfoChange* mutable_info_change(int index);
  inline ::GameInfoChange* add_info_change();
  inline const ::google::protobuf::RepeatedPtrField< ::GameInfoChange >&
      info_change() const;
  inline ::google::protobuf::RepeatedPtrField< ::GameInfoChange >*
      mutable_info_change();

  // repeated .GridInfo grid_info = 11;
  inline int grid_info_size() const;
  inline void clear_grid_info();
  static const int kGridInfoFieldNumber = 11;
  inline const ::GridInfo& grid_info(int index) const;
  inline ::GridInfo* mutable_grid_info(int index);
  inline ::GridInfo* add_grid_info();
  inline const ::google::protobuf::RepeatedPtrField< ::GridInfo >&
      grid_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::GridInfo >*
      mutable_grid_info();

  // repeated .OccupyWarn occupy_warn = 12;
  inline int occupy_warn_size() const;
  inline void clear_occupy_warn();
  static const int kOccupyWarnFieldNumber = 12;
  inline const ::OccupyWarn& occupy_warn(int index) const;
  inline ::OccupyWarn* mutable_occupy_warn(int index);
  inline ::OccupyWarn* add_occupy_warn();
  inline const ::google::protobuf::RepeatedPtrField< ::OccupyWarn >&
      occupy_warn() const;
  inline ::google::protobuf::RepeatedPtrField< ::OccupyWarn >*
      mutable_occupy_warn();

  // optional .AllPlayerInfo player_info = 13;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 13;
  inline const ::AllPlayerInfo& player_info() const;
  inline ::AllPlayerInfo* mutable_player_info();
  inline ::AllPlayerInfo* release_player_info();
  inline void set_allocated_player_info(::AllPlayerInfo* player_info);

  // repeated .PlayerResult game_res = 14;
  inline int game_res_size() const;
  inline void clear_game_res();
  static const int kGameResFieldNumber = 14;
  inline const ::PlayerResult& game_res(int index) const;
  inline ::PlayerResult* mutable_game_res(int index);
  inline ::PlayerResult* add_game_res();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerResult >&
      game_res() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerResult >*
      mutable_game_res();

  // optional .RoomInfo room_info = 15;
  inline bool has_room_info() const;
  inline void clear_room_info();
  static const int kRoomInfoFieldNumber = 15;
  inline const ::RoomInfo& room_info() const;
  inline ::RoomInfo* mutable_room_info();
  inline ::RoomInfo* release_room_info();
  inline void set_allocated_room_info(::RoomInfo* room_info);

  // repeated int32 players_rank = 16;
  inline int players_rank_size() const;
  inline void clear_players_rank();
  static const int kPlayersRankFieldNumber = 16;
  inline ::google::protobuf::int32 players_rank(int index) const;
  inline void set_players_rank(int index, ::google::protobuf::int32 value);
  inline void add_players_rank(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      players_rank() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_players_rank();

  // @@protoc_insertion_point(class_scope:S2C_SenceInfo)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_is_reconnect();
  inline void clear_has_is_reconnect();
  inline void set_has_next_oper();
  inline void clear_has_next_oper();
  inline void set_has_select_card();
  inline void clear_has_select_card();
  inline void set_has_first_card();
  inline void clear_has_first_card();
  inline void set_has_dicing_res();
  inline void clear_has_dicing_res();
  inline void set_has_action_res();
  inline void clear_has_action_res();
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_room_info();
  inline void clear_has_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_;
  bool is_reconnect_;
  ::NextOper* next_oper_;
  ::SelectedFirstCard* select_card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cere_city_;
  ::FirstCardInfo* first_card_;
  ::DicingResult* dicing_res_;
  ::ActionResult* action_res_;
  ::google::protobuf::RepeatedPtrField< ::GameInfoChange > info_change_;
  ::google::protobuf::RepeatedPtrField< ::GridInfo > grid_info_;
  ::google::protobuf::RepeatedPtrField< ::OccupyWarn > occupy_warn_;
  ::AllPlayerInfo* player_info_;
  ::google::protobuf::RepeatedPtrField< ::PlayerResult > game_res_;
  ::RoomInfo* room_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > players_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static S2C_SenceInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2S_InviteReq : public ::google::protobuf::Message {
 public:
  C2S_InviteReq();
  virtual ~C2S_InviteReq();

  C2S_InviteReq(const C2S_InviteReq& from);

  inline C2S_InviteReq& operator=(const C2S_InviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_InviteReq& default_instance();

  void Swap(C2S_InviteReq* other);

  // implements Message ----------------------------------------------

  C2S_InviteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_InviteReq& from);
  void MergeFrom(const C2S_InviteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_InviteReq)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static C2S_InviteReq* default_instance_;
};
// -------------------------------------------------------------------

class S2C_NitifyPlayerInvite : public ::google::protobuf::Message {
 public:
  S2C_NitifyPlayerInvite();
  virtual ~S2C_NitifyPlayerInvite();

  S2C_NitifyPlayerInvite(const S2C_NitifyPlayerInvite& from);

  inline S2C_NitifyPlayerInvite& operator=(const S2C_NitifyPlayerInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_NitifyPlayerInvite& default_instance();

  void Swap(S2C_NitifyPlayerInvite* other);

  // implements Message ----------------------------------------------

  S2C_NitifyPlayerInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_NitifyPlayerInvite& from);
  void MergeFrom(const S2C_NitifyPlayerInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // required int32 grid_index = 2;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_NitifyPlayerInvite)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static S2C_NitifyPlayerInvite* default_instance_;
};
// -------------------------------------------------------------------

class C2S_AutoReq : public ::google::protobuf::Message {
 public:
  C2S_AutoReq();
  virtual ~C2S_AutoReq();

  C2S_AutoReq(const C2S_AutoReq& from);

  inline C2S_AutoReq& operator=(const C2S_AutoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_AutoReq& default_instance();

  void Swap(C2S_AutoReq* other);

  // implements Message ----------------------------------------------

  C2S_AutoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_AutoReq& from);
  void MergeFrom(const C2S_AutoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_AutoReq)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static C2S_AutoReq* default_instance_;
};
// -------------------------------------------------------------------

class S2C_NotifyPlayerAuto : public ::google::protobuf::Message {
 public:
  S2C_NotifyPlayerAuto();
  virtual ~S2C_NotifyPlayerAuto();

  S2C_NotifyPlayerAuto(const S2C_NotifyPlayerAuto& from);

  inline S2C_NotifyPlayerAuto& operator=(const S2C_NotifyPlayerAuto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_NotifyPlayerAuto& default_instance();

  void Swap(S2C_NotifyPlayerAuto* other);

  // implements Message ----------------------------------------------

  S2C_NotifyPlayerAuto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_NotifyPlayerAuto& from);
  void MergeFrom(const S2C_NotifyPlayerAuto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // required int32 stat = 2;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 2;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_NotifyPlayerAuto)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static S2C_NotifyPlayerAuto* default_instance_;
};
// -------------------------------------------------------------------

class C2S_OffsetSocreReq : public ::google::protobuf::Message {
 public:
  C2S_OffsetSocreReq();
  virtual ~C2S_OffsetSocreReq();

  C2S_OffsetSocreReq(const C2S_OffsetSocreReq& from);

  inline C2S_OffsetSocreReq& operator=(const C2S_OffsetSocreReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_OffsetSocreReq& default_instance();

  void Swap(C2S_OffsetSocreReq* other);

  // implements Message ----------------------------------------------

  C2S_OffsetSocreReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_OffsetSocreReq& from);
  void MergeFrom(const C2S_OffsetSocreReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:C2S_OffsetSocreReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static C2S_OffsetSocreReq* default_instance_;
};
// -------------------------------------------------------------------

class S2C_OffsetSocreRsp : public ::google::protobuf::Message {
 public:
  S2C_OffsetSocreRsp();
  virtual ~S2C_OffsetSocreRsp();

  S2C_OffsetSocreRsp(const S2C_OffsetSocreRsp& from);

  inline S2C_OffsetSocreRsp& operator=(const S2C_OffsetSocreRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_OffsetSocreRsp& default_instance();

  void Swap(S2C_OffsetSocreRsp* other);

  // implements Message ----------------------------------------------

  S2C_OffsetSocreRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_OffsetSocreRsp& from);
  void MergeFrom(const S2C_OffsetSocreRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2C_OffsetSocreRsp)
 private:
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static S2C_OffsetSocreRsp* default_instance_;
};
// -------------------------------------------------------------------

class C2S_SendSmsInRoom : public ::google::protobuf::Message {
 public:
  C2S_SendSmsInRoom();
  virtual ~C2S_SendSmsInRoom();

  C2S_SendSmsInRoom(const C2S_SendSmsInRoom& from);

  inline C2S_SendSmsInRoom& operator=(const C2S_SendSmsInRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_SendSmsInRoom& default_instance();

  void Swap(C2S_SendSmsInRoom* other);

  // implements Message ----------------------------------------------

  C2S_SendSmsInRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_SendSmsInRoom& from);
  void MergeFrom(const C2S_SendSmsInRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:C2S_SendSmsInRoom)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static C2S_SendSmsInRoom* default_instance_;
};
// -------------------------------------------------------------------

class S2C_NotifySms : public ::google::protobuf::Message {
 public:
  S2C_NotifySms();
  virtual ~S2C_NotifySms();

  S2C_NotifySms(const S2C_NotifySms& from);

  inline S2C_NotifySms& operator=(const S2C_NotifySms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_NotifySms& default_instance();

  void Swap(S2C_NotifySms* other);

  // implements Message ----------------------------------------------

  S2C_NotifySms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_NotifySms& from);
  void MergeFrom(const S2C_NotifySms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_no = 1;
  inline bool has_seat_no() const;
  inline void clear_seat_no();
  static const int kSeatNoFieldNumber = 1;
  inline ::google::protobuf::int32 seat_no() const;
  inline void set_seat_no(::google::protobuf::int32 value);

  // required bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:S2C_NotifySms)
 private:
  inline void set_has_seat_no();
  inline void clear_has_seat_no();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 seat_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_5fdesk_2eproto();
  friend void protobuf_AssignDesc_game_5fdesk_2eproto();
  friend void protobuf_ShutdownFile_game_5fdesk_2eproto();

  void InitAsDefaultInstance();
  static S2C_NotifySms* default_instance_;
};
// ===================================================================


// ===================================================================

// C2S_SelectFirstCard

// required int32 index = 1;
inline bool C2S_SelectFirstCard::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_SelectFirstCard::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_SelectFirstCard::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_SelectFirstCard::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 C2S_SelectFirstCard::index() const {
  return index_;
}
inline void C2S_SelectFirstCard::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// SelectedFirstCard

// required int32 seat_id = 1;
inline bool SelectedFirstCard::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectedFirstCard::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectedFirstCard::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectedFirstCard::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 SelectedFirstCard::seat_id() const {
  return seat_id_;
}
inline void SelectedFirstCard::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// required int32 index = 2;
inline bool SelectedFirstCard::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectedFirstCard::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectedFirstCard::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectedFirstCard::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SelectedFirstCard::index() const {
  return index_;
}
inline void SelectedFirstCard::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// FirstCardInfo

// required int32 index = 1;
inline bool FirstCardInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstCardInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstCardInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstCardInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 FirstCardInfo::index() const {
  return index_;
}
inline void FirstCardInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 seat_no = 2;
inline bool FirstCardInfo::has_seat_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FirstCardInfo::set_has_seat_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FirstCardInfo::clear_has_seat_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FirstCardInfo::clear_seat_no() {
  seat_no_ = 0;
  clear_has_seat_no();
}
inline ::google::protobuf::int32 FirstCardInfo::seat_no() const {
  return seat_no_;
}
inline void FirstCardInfo::set_seat_no(::google::protobuf::int32 value) {
  set_has_seat_no();
  seat_no_ = value;
}

// repeated int32 player_sort = 3;
inline int FirstCardInfo::player_sort_size() const {
  return player_sort_.size();
}
inline void FirstCardInfo::clear_player_sort() {
  player_sort_.Clear();
}
inline ::google::protobuf::int32 FirstCardInfo::player_sort(int index) const {
  return player_sort_.Get(index);
}
inline void FirstCardInfo::set_player_sort(int index, ::google::protobuf::int32 value) {
  player_sort_.Set(index, value);
}
inline void FirstCardInfo::add_player_sort(::google::protobuf::int32 value) {
  player_sort_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FirstCardInfo::player_sort() const {
  return player_sort_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FirstCardInfo::mutable_player_sort() {
  return &player_sort_;
}

// -------------------------------------------------------------------

// DicingResult_ThreeSamePoint

// optional bool three_point_same = 1;
inline bool DicingResult_ThreeSamePoint::has_three_point_same() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DicingResult_ThreeSamePoint::set_has_three_point_same() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DicingResult_ThreeSamePoint::clear_has_three_point_same() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DicingResult_ThreeSamePoint::clear_three_point_same() {
  three_point_same_ = false;
  clear_has_three_point_same();
}
inline bool DicingResult_ThreeSamePoint::three_point_same() const {
  return three_point_same_;
}
inline void DicingResult_ThreeSamePoint::set_three_point_same(bool value) {
  set_has_three_point_same();
  three_point_same_ = value;
}

// optional int32 posi = 2;
inline bool DicingResult_ThreeSamePoint::has_posi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DicingResult_ThreeSamePoint::set_has_posi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DicingResult_ThreeSamePoint::clear_has_posi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DicingResult_ThreeSamePoint::clear_posi() {
  posi_ = 0;
  clear_has_posi();
}
inline ::google::protobuf::int32 DicingResult_ThreeSamePoint::posi() const {
  return posi_;
}
inline void DicingResult_ThreeSamePoint::set_posi(::google::protobuf::int32 value) {
  set_has_posi();
  posi_ = value;
}

// -------------------------------------------------------------------

// DicingResult

// required int32 seat_id = 1;
inline bool DicingResult::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DicingResult::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DicingResult::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DicingResult::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 DicingResult::seat_id() const {
  return seat_id_;
}
inline void DicingResult::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 first_point = 2;
inline bool DicingResult::has_first_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DicingResult::set_has_first_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DicingResult::clear_has_first_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DicingResult::clear_first_point() {
  first_point_ = 0;
  clear_has_first_point();
}
inline ::google::protobuf::int32 DicingResult::first_point() const {
  return first_point_;
}
inline void DicingResult::set_first_point(::google::protobuf::int32 value) {
  set_has_first_point();
  first_point_ = value;
}

// optional int32 second_point = 3;
inline bool DicingResult::has_second_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DicingResult::set_has_second_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DicingResult::clear_has_second_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DicingResult::clear_second_point() {
  second_point_ = 0;
  clear_has_second_point();
}
inline ::google::protobuf::int32 DicingResult::second_point() const {
  return second_point_;
}
inline void DicingResult::set_second_point(::google::protobuf::int32 value) {
  set_has_second_point();
  second_point_ = value;
}

// optional int32 has_dice_ctrl = 4;
inline bool DicingResult::has_has_dice_ctrl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DicingResult::set_has_has_dice_ctrl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DicingResult::clear_has_has_dice_ctrl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DicingResult::clear_has_dice_ctrl() {
  has_dice_ctrl_ = 0;
  clear_has_has_dice_ctrl();
}
inline ::google::protobuf::int32 DicingResult::has_dice_ctrl() const {
  return has_dice_ctrl_;
}
inline void DicingResult::set_has_dice_ctrl(::google::protobuf::int32 value) {
  set_has_has_dice_ctrl();
  has_dice_ctrl_ = value;
}

// optional bool pass_start = 5;
inline bool DicingResult::has_pass_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DicingResult::set_has_pass_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DicingResult::clear_has_pass_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DicingResult::clear_pass_start() {
  pass_start_ = false;
  clear_has_pass_start();
}
inline bool DicingResult::pass_start() const {
  return pass_start_;
}
inline void DicingResult::set_pass_start(bool value) {
  set_has_pass_start();
  pass_start_ = value;
}

// optional bool can_move = 6;
inline bool DicingResult::has_can_move() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DicingResult::set_has_can_move() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DicingResult::clear_has_can_move() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DicingResult::clear_can_move() {
  can_move_ = false;
  clear_has_can_move();
}
inline bool DicingResult::can_move() const {
  return can_move_;
}
inline void DicingResult::set_can_move(bool value) {
  set_has_can_move();
  can_move_ = value;
}

// optional .DicingResult.ThreeSamePoint three_same_point = 7;
inline bool DicingResult::has_three_same_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DicingResult::set_has_three_same_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DicingResult::clear_has_three_same_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DicingResult::clear_three_same_point() {
  if (three_same_point_ != NULL) three_same_point_->::DicingResult_ThreeSamePoint::Clear();
  clear_has_three_same_point();
}
inline const ::DicingResult_ThreeSamePoint& DicingResult::three_same_point() const {
  return three_same_point_ != NULL ? *three_same_point_ : *default_instance_->three_same_point_;
}
inline ::DicingResult_ThreeSamePoint* DicingResult::mutable_three_same_point() {
  set_has_three_same_point();
  if (three_same_point_ == NULL) three_same_point_ = new ::DicingResult_ThreeSamePoint;
  return three_same_point_;
}
inline ::DicingResult_ThreeSamePoint* DicingResult::release_three_same_point() {
  clear_has_three_same_point();
  ::DicingResult_ThreeSamePoint* temp = three_same_point_;
  three_same_point_ = NULL;
  return temp;
}
inline void DicingResult::set_allocated_three_same_point(::DicingResult_ThreeSamePoint* three_same_point) {
  delete three_same_point_;
  three_same_point_ = three_same_point;
  if (three_same_point) {
    set_has_three_same_point();
  } else {
    clear_has_three_same_point();
  }
}

// optional int32 total_round = 8;
inline bool DicingResult::has_total_round() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DicingResult::set_has_total_round() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DicingResult::clear_has_total_round() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DicingResult::clear_total_round() {
  total_round_ = 0;
  clear_has_total_round();
}
inline ::google::protobuf::int32 DicingResult::total_round() const {
  return total_round_;
}
inline void DicingResult::set_total_round(::google::protobuf::int32 value) {
  set_has_total_round();
  total_round_ = value;
}

// optional int32 target_posi = 9;
inline bool DicingResult::has_target_posi() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DicingResult::set_has_target_posi() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DicingResult::clear_has_target_posi() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DicingResult::clear_target_posi() {
  target_posi_ = 0;
  clear_has_target_posi();
}
inline ::google::protobuf::int32 DicingResult::target_posi() const {
  return target_posi_;
}
inline void DicingResult::set_target_posi(::google::protobuf::int32 value) {
  set_has_target_posi();
  target_posi_ = value;
}

// optional int32 user_prop = 10;
inline bool DicingResult::has_user_prop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DicingResult::set_has_user_prop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DicingResult::clear_has_user_prop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DicingResult::clear_user_prop() {
  user_prop_ = 0;
  clear_has_user_prop();
}
inline ::google::protobuf::int32 DicingResult::user_prop() const {
  return user_prop_;
}
inline void DicingResult::set_user_prop(::google::protobuf::int32 value) {
  set_has_user_prop();
  user_prop_ = value;
}

// optional .GridOper grid_oper = 11;
inline bool DicingResult::has_grid_oper() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DicingResult::set_has_grid_oper() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DicingResult::clear_has_grid_oper() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DicingResult::clear_grid_oper() {
  if (grid_oper_ != NULL) grid_oper_->::GridOper::Clear();
  clear_has_grid_oper();
}
inline const ::GridOper& DicingResult::grid_oper() const {
  return grid_oper_ != NULL ? *grid_oper_ : *default_instance_->grid_oper_;
}
inline ::GridOper* DicingResult::mutable_grid_oper() {
  set_has_grid_oper();
  if (grid_oper_ == NULL) grid_oper_ = new ::GridOper;
  return grid_oper_;
}
inline ::GridOper* DicingResult::release_grid_oper() {
  clear_has_grid_oper();
  ::GridOper* temp = grid_oper_;
  grid_oper_ = NULL;
  return temp;
}
inline void DicingResult::set_allocated_grid_oper(::GridOper* grid_oper) {
  delete grid_oper_;
  grid_oper_ = grid_oper;
  if (grid_oper) {
    set_has_grid_oper();
  } else {
    clear_has_grid_oper();
  }
}

// -------------------------------------------------------------------

// GridOper

// required int32 opra_type = 1;
inline bool GridOper::has_opra_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridOper::set_has_opra_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridOper::clear_has_opra_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridOper::clear_opra_type() {
  opra_type_ = 0;
  clear_has_opra_type();
}
inline ::google::protobuf::int32 GridOper::opra_type() const {
  return opra_type_;
}
inline void GridOper::set_opra_type(::google::protobuf::int32 value) {
  set_has_opra_type();
  opra_type_ = value;
}

// optional int32 opra_grid = 2;
inline bool GridOper::has_opra_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridOper::set_has_opra_grid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridOper::clear_has_opra_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridOper::clear_opra_grid() {
  opra_grid_ = 0;
  clear_has_opra_grid();
}
inline ::google::protobuf::int32 GridOper::opra_grid() const {
  return opra_grid_;
}
inline void GridOper::set_opra_grid(::google::protobuf::int32 value) {
  set_has_opra_grid();
  opra_grid_ = value;
}

// optional .BuildCity build = 3;
inline bool GridOper::has_build() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridOper::set_has_build() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridOper::clear_has_build() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridOper::clear_build() {
  if (build_ != NULL) build_->::BuildCity::Clear();
  clear_has_build();
}
inline const ::BuildCity& GridOper::build() const {
  return build_ != NULL ? *build_ : *default_instance_->build_;
}
inline ::BuildCity* GridOper::mutable_build() {
  set_has_build();
  if (build_ == NULL) build_ = new ::BuildCity;
  return build_;
}
inline ::BuildCity* GridOper::release_build() {
  clear_has_build();
  ::BuildCity* temp = build_;
  build_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_build(::BuildCity* build) {
  delete build_;
  build_ = build;
  if (build) {
    set_has_build();
  } else {
    clear_has_build();
  }
}

// optional .GiveToll toll = 4;
inline bool GridOper::has_toll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridOper::set_has_toll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridOper::clear_has_toll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridOper::clear_toll() {
  if (toll_ != NULL) toll_->::GiveToll::Clear();
  clear_has_toll();
}
inline const ::GiveToll& GridOper::toll() const {
  return toll_ != NULL ? *toll_ : *default_instance_->toll_;
}
inline ::GiveToll* GridOper::mutable_toll() {
  set_has_toll();
  if (toll_ == NULL) toll_ = new ::GiveToll;
  return toll_;
}
inline ::GiveToll* GridOper::release_toll() {
  clear_has_toll();
  ::GiveToll* temp = toll_;
  toll_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_toll(::GiveToll* toll) {
  delete toll_;
  toll_ = toll;
  if (toll) {
    set_has_toll();
  } else {
    clear_has_toll();
  }
}

// optional .Coin coin = 5;
inline bool GridOper::has_coin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridOper::set_has_coin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridOper::clear_has_coin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridOper::clear_coin() {
  if (coin_ != NULL) coin_->::Coin::Clear();
  clear_has_coin();
}
inline const ::Coin& GridOper::coin() const {
  return coin_ != NULL ? *coin_ : *default_instance_->coin_;
}
inline ::Coin* GridOper::mutable_coin() {
  set_has_coin();
  if (coin_ == NULL) coin_ = new ::Coin;
  return coin_;
}
inline ::Coin* GridOper::release_coin() {
  clear_has_coin();
  ::Coin* temp = coin_;
  coin_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_coin(::Coin* coin) {
  delete coin_;
  coin_ = coin;
  if (coin) {
    set_has_coin();
  } else {
    clear_has_coin();
  }
}

// optional .BuildIsland build_island = 6;
inline bool GridOper::has_build_island() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GridOper::set_has_build_island() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GridOper::clear_has_build_island() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GridOper::clear_build_island() {
  if (build_island_ != NULL) build_island_->::BuildIsland::Clear();
  clear_has_build_island();
}
inline const ::BuildIsland& GridOper::build_island() const {
  return build_island_ != NULL ? *build_island_ : *default_instance_->build_island_;
}
inline ::BuildIsland* GridOper::mutable_build_island() {
  set_has_build_island();
  if (build_island_ == NULL) build_island_ = new ::BuildIsland;
  return build_island_;
}
inline ::BuildIsland* GridOper::release_build_island() {
  clear_has_build_island();
  ::BuildIsland* temp = build_island_;
  build_island_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_build_island(::BuildIsland* build_island) {
  delete build_island_;
  build_island_ = build_island;
  if (build_island) {
    set_has_build_island();
  } else {
    clear_has_build_island();
  }
}

// optional .HoldPeak peak = 7;
inline bool GridOper::has_peak() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GridOper::set_has_peak() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GridOper::clear_has_peak() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GridOper::clear_peak() {
  if (peak_ != NULL) peak_->::HoldPeak::Clear();
  clear_has_peak();
}
inline const ::HoldPeak& GridOper::peak() const {
  return peak_ != NULL ? *peak_ : *default_instance_->peak_;
}
inline ::HoldPeak* GridOper::mutable_peak() {
  set_has_peak();
  if (peak_ == NULL) peak_ = new ::HoldPeak;
  return peak_;
}
inline ::HoldPeak* GridOper::release_peak() {
  clear_has_peak();
  ::HoldPeak* temp = peak_;
  peak_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_peak(::HoldPeak* peak) {
  delete peak_;
  peak_ = peak;
  if (peak) {
    set_has_peak();
  } else {
    clear_has_peak();
  }
}

// optional .Tollage tollage = 8;
inline bool GridOper::has_tollage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GridOper::set_has_tollage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GridOper::clear_has_tollage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GridOper::clear_tollage() {
  if (tollage_ != NULL) tollage_->::Tollage::Clear();
  clear_has_tollage();
}
inline const ::Tollage& GridOper::tollage() const {
  return tollage_ != NULL ? *tollage_ : *default_instance_->tollage_;
}
inline ::Tollage* GridOper::mutable_tollage() {
  set_has_tollage();
  if (tollage_ == NULL) tollage_ = new ::Tollage;
  return tollage_;
}
inline ::Tollage* GridOper::release_tollage() {
  clear_has_tollage();
  ::Tollage* temp = tollage_;
  tollage_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_tollage(::Tollage* tollage) {
  delete tollage_;
  tollage_ = tollage;
  if (tollage) {
    set_has_tollage();
  } else {
    clear_has_tollage();
  }
}

// optional .RandEvent event = 9;
inline bool GridOper::has_event() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GridOper::set_has_event() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GridOper::clear_has_event() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GridOper::clear_event() {
  if (event_ != NULL) event_->::RandEvent::Clear();
  clear_has_event();
}
inline const ::RandEvent& GridOper::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::RandEvent* GridOper::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::RandEvent;
  return event_;
}
inline ::RandEvent* GridOper::release_event() {
  clear_has_event();
  ::RandEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_event(::RandEvent* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
}

// optional .Start start = 10;
inline bool GridOper::has_start() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GridOper::set_has_start() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GridOper::clear_has_start() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GridOper::clear_start() {
  if (start_ != NULL) start_->::Start::Clear();
  clear_has_start();
}
inline const ::Start& GridOper::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::Start* GridOper::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::Start;
  return start_;
}
inline ::Start* GridOper::release_start() {
  clear_has_start();
  ::Start* temp = start_;
  start_ = NULL;
  return temp;
}
inline void GridOper::set_allocated_start(::Start* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
}

// -------------------------------------------------------------------

// SellOffCity

// required int32 index = 1;
inline bool SellOffCity::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SellOffCity::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SellOffCity::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SellOffCity::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SellOffCity::index() const {
  return index_;
}
inline void SellOffCity::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 worth = 2;
inline bool SellOffCity::has_worth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SellOffCity::set_has_worth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SellOffCity::clear_has_worth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SellOffCity::clear_worth() {
  worth_ = 0u;
  clear_has_worth();
}
inline ::google::protobuf::uint32 SellOffCity::worth() const {
  return worth_;
}
inline void SellOffCity::set_worth(::google::protobuf::uint32 value) {
  set_has_worth();
  worth_ = value;
}

// -------------------------------------------------------------------

// Bankrupt

// required int32 bk_type = 1;
inline bool Bankrupt::has_bk_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bankrupt::set_has_bk_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bankrupt::clear_has_bk_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bankrupt::clear_bk_type() {
  bk_type_ = 0;
  clear_has_bk_type();
}
inline ::google::protobuf::int32 Bankrupt::bk_type() const {
  return bk_type_;
}
inline void Bankrupt::set_bk_type(::google::protobuf::int32 value) {
  set_has_bk_type();
  bk_type_ = value;
}

// repeated .SellOffCity sell_off_city = 2;
inline int Bankrupt::sell_off_city_size() const {
  return sell_off_city_.size();
}
inline void Bankrupt::clear_sell_off_city() {
  sell_off_city_.Clear();
}
inline const ::SellOffCity& Bankrupt::sell_off_city(int index) const {
  return sell_off_city_.Get(index);
}
inline ::SellOffCity* Bankrupt::mutable_sell_off_city(int index) {
  return sell_off_city_.Mutable(index);
}
inline ::SellOffCity* Bankrupt::add_sell_off_city() {
  return sell_off_city_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SellOffCity >&
Bankrupt::sell_off_city() const {
  return sell_off_city_;
}
inline ::google::protobuf::RepeatedPtrField< ::SellOffCity >*
Bankrupt::mutable_sell_off_city() {
  return &sell_off_city_;
}

// optional int32 cost_credit_gold = 3;
inline bool Bankrupt::has_cost_credit_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bankrupt::set_has_cost_credit_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bankrupt::clear_has_cost_credit_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bankrupt::clear_cost_credit_gold() {
  cost_credit_gold_ = 0;
  clear_has_cost_credit_gold();
}
inline ::google::protobuf::int32 Bankrupt::cost_credit_gold() const {
  return cost_credit_gold_;
}
inline void Bankrupt::set_cost_credit_gold(::google::protobuf::int32 value) {
  set_has_cost_credit_gold();
  cost_credit_gold_ = value;
}

// optional int32 credit_money = 4;
inline bool Bankrupt::has_credit_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bankrupt::set_has_credit_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bankrupt::clear_has_credit_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bankrupt::clear_credit_money() {
  credit_money_ = 0;
  clear_has_credit_money();
}
inline ::google::protobuf::int32 Bankrupt::credit_money() const {
  return credit_money_;
}
inline void Bankrupt::set_credit_money(::google::protobuf::int32 value) {
  set_has_credit_money();
  credit_money_ = value;
}

// repeated int32 close_city = 5;
inline int Bankrupt::close_city_size() const {
  return close_city_.size();
}
inline void Bankrupt::clear_close_city() {
  close_city_.Clear();
}
inline ::google::protobuf::int32 Bankrupt::close_city(int index) const {
  return close_city_.Get(index);
}
inline void Bankrupt::set_close_city(int index, ::google::protobuf::int32 value) {
  close_city_.Set(index, value);
}
inline void Bankrupt::add_close_city(::google::protobuf::int32 value) {
  close_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Bankrupt::close_city() const {
  return close_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Bankrupt::mutable_close_city() {
  return &close_city_;
}

// -------------------------------------------------------------------

// BuildCity

// required int32 opre_res = 1;
inline bool BuildCity::has_opre_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildCity::set_has_opre_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildCity::clear_has_opre_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildCity::clear_opre_res() {
  opre_res_ = 0;
  clear_has_opre_res();
}
inline ::google::protobuf::int32 BuildCity::opre_res() const {
  return opre_res_;
}
inline void BuildCity::set_opre_res(::google::protobuf::int32 value) {
  set_has_opre_res();
  opre_res_ = value;
}

// optional int32 higth_lvl = 3;
inline bool BuildCity::has_higth_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildCity::set_has_higth_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildCity::clear_has_higth_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildCity::clear_higth_lvl() {
  higth_lvl_ = 0;
  clear_has_higth_lvl();
}
inline ::google::protobuf::int32 BuildCity::higth_lvl() const {
  return higth_lvl_;
}
inline void BuildCity::set_higth_lvl(::google::protobuf::int32 value) {
  set_has_higth_lvl();
  higth_lvl_ = value;
}

// repeated int32 can_build = 4;
inline int BuildCity::can_build_size() const {
  return can_build_.size();
}
inline void BuildCity::clear_can_build() {
  can_build_.Clear();
}
inline ::google::protobuf::int32 BuildCity::can_build(int index) const {
  return can_build_.Get(index);
}
inline void BuildCity::set_can_build(int index, ::google::protobuf::int32 value) {
  can_build_.Set(index, value);
}
inline void BuildCity::add_can_build(::google::protobuf::int32 value) {
  can_build_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildCity::can_build() const {
  return can_build_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildCity::mutable_can_build() {
  return &can_build_;
}

// repeated int32 build_cost = 5;
inline int BuildCity::build_cost_size() const {
  return build_cost_.size();
}
inline void BuildCity::clear_build_cost() {
  build_cost_.Clear();
}
inline ::google::protobuf::int32 BuildCity::build_cost(int index) const {
  return build_cost_.Get(index);
}
inline void BuildCity::set_build_cost(int index, ::google::protobuf::int32 value) {
  build_cost_.Set(index, value);
}
inline void BuildCity::add_build_cost(::google::protobuf::int32 value) {
  build_cost_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildCity::build_cost() const {
  return build_cost_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildCity::mutable_build_cost() {
  return &build_cost_;
}

// repeated int32 has_build = 6;
inline int BuildCity::has_build_size() const {
  return has_build_.size();
}
inline void BuildCity::clear_has_build() {
  has_build_.Clear();
}
inline ::google::protobuf::int32 BuildCity::has_build(int index) const {
  return has_build_.Get(index);
}
inline void BuildCity::set_has_build(int index, ::google::protobuf::int32 value) {
  has_build_.Set(index, value);
}
inline void BuildCity::add_has_build(::google::protobuf::int32 value) {
  has_build_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildCity::has_build() const {
  return has_build_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildCity::mutable_has_build() {
  return &has_build_;
}

// -------------------------------------------------------------------

// GiveToll_Purch

// required bool can_purch = 1;
inline bool GiveToll_Purch::has_can_purch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveToll_Purch::set_has_can_purch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveToll_Purch::clear_has_can_purch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveToll_Purch::clear_can_purch() {
  can_purch_ = false;
  clear_has_can_purch();
}
inline bool GiveToll_Purch::can_purch() const {
  return can_purch_;
}
inline void GiveToll_Purch::set_can_purch(bool value) {
  set_has_can_purch();
  can_purch_ = value;
}

// optional uint32 purch_cost = 2;
inline bool GiveToll_Purch::has_purch_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveToll_Purch::set_has_purch_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveToll_Purch::clear_has_purch_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveToll_Purch::clear_purch_cost() {
  purch_cost_ = 0u;
  clear_has_purch_cost();
}
inline ::google::protobuf::uint32 GiveToll_Purch::purch_cost() const {
  return purch_cost_;
}
inline void GiveToll_Purch::set_purch_cost(::google::protobuf::uint32 value) {
  set_has_purch_cost();
  purch_cost_ = value;
}

// -------------------------------------------------------------------

// GiveToll_Toll

// required int32 hald_type = 1;
inline bool GiveToll_Toll::has_hald_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveToll_Toll::set_has_hald_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveToll_Toll::clear_has_hald_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveToll_Toll::clear_hald_type() {
  hald_type_ = 0;
  clear_has_hald_type();
}
inline ::google::protobuf::int32 GiveToll_Toll::hald_type() const {
  return hald_type_;
}
inline void GiveToll_Toll::set_hald_type(::google::protobuf::int32 value) {
  set_has_hald_type();
  hald_type_ = value;
}

// optional int32 card_type = 2;
inline bool GiveToll_Toll::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveToll_Toll::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveToll_Toll::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveToll_Toll::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 GiveToll_Toll::card_type() const {
  return card_type_;
}
inline void GiveToll_Toll::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// required uint32 money = 3;
inline bool GiveToll_Toll::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiveToll_Toll::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiveToll_Toll::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiveToll_Toll::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 GiveToll_Toll::money() const {
  return money_;
}
inline void GiveToll_Toll::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional .Bankrupt bk = 4;
inline bool GiveToll_Toll::has_bk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiveToll_Toll::set_has_bk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiveToll_Toll::clear_has_bk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiveToll_Toll::clear_bk() {
  if (bk_ != NULL) bk_->::Bankrupt::Clear();
  clear_has_bk();
}
inline const ::Bankrupt& GiveToll_Toll::bk() const {
  return bk_ != NULL ? *bk_ : *default_instance_->bk_;
}
inline ::Bankrupt* GiveToll_Toll::mutable_bk() {
  set_has_bk();
  if (bk_ == NULL) bk_ = new ::Bankrupt;
  return bk_;
}
inline ::Bankrupt* GiveToll_Toll::release_bk() {
  clear_has_bk();
  ::Bankrupt* temp = bk_;
  bk_ = NULL;
  return temp;
}
inline void GiveToll_Toll::set_allocated_bk(::Bankrupt* bk) {
  delete bk_;
  bk_ = bk;
  if (bk) {
    set_has_bk();
  } else {
    clear_has_bk();
  }
}

// optional .BuildIsland build_island = 5;
inline bool GiveToll_Toll::has_build_island() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GiveToll_Toll::set_has_build_island() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GiveToll_Toll::clear_has_build_island() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GiveToll_Toll::clear_build_island() {
  if (build_island_ != NULL) build_island_->::BuildIsland::Clear();
  clear_has_build_island();
}
inline const ::BuildIsland& GiveToll_Toll::build_island() const {
  return build_island_ != NULL ? *build_island_ : *default_instance_->build_island_;
}
inline ::BuildIsland* GiveToll_Toll::mutable_build_island() {
  set_has_build_island();
  if (build_island_ == NULL) build_island_ = new ::BuildIsland;
  return build_island_;
}
inline ::BuildIsland* GiveToll_Toll::release_build_island() {
  clear_has_build_island();
  ::BuildIsland* temp = build_island_;
  build_island_ = NULL;
  return temp;
}
inline void GiveToll_Toll::set_allocated_build_island(::BuildIsland* build_island) {
  delete build_island_;
  build_island_ = build_island;
  if (build_island) {
    set_has_build_island();
  } else {
    clear_has_build_island();
  }
}

// -------------------------------------------------------------------

// GiveToll

// optional .GiveToll.Toll toll = 1;
inline bool GiveToll::has_toll() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveToll::set_has_toll() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveToll::clear_has_toll() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveToll::clear_toll() {
  if (toll_ != NULL) toll_->::GiveToll_Toll::Clear();
  clear_has_toll();
}
inline const ::GiveToll_Toll& GiveToll::toll() const {
  return toll_ != NULL ? *toll_ : *default_instance_->toll_;
}
inline ::GiveToll_Toll* GiveToll::mutable_toll() {
  set_has_toll();
  if (toll_ == NULL) toll_ = new ::GiveToll_Toll;
  return toll_;
}
inline ::GiveToll_Toll* GiveToll::release_toll() {
  clear_has_toll();
  ::GiveToll_Toll* temp = toll_;
  toll_ = NULL;
  return temp;
}
inline void GiveToll::set_allocated_toll(::GiveToll_Toll* toll) {
  delete toll_;
  toll_ = toll;
  if (toll) {
    set_has_toll();
  } else {
    clear_has_toll();
  }
}

// optional .GiveToll.Purch purch = 2;
inline bool GiveToll::has_purch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveToll::set_has_purch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveToll::clear_has_purch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveToll::clear_purch() {
  if (purch_ != NULL) purch_->::GiveToll_Purch::Clear();
  clear_has_purch();
}
inline const ::GiveToll_Purch& GiveToll::purch() const {
  return purch_ != NULL ? *purch_ : *default_instance_->purch_;
}
inline ::GiveToll_Purch* GiveToll::mutable_purch() {
  set_has_purch();
  if (purch_ == NULL) purch_ = new ::GiveToll_Purch;
  return purch_;
}
inline ::GiveToll_Purch* GiveToll::release_purch() {
  clear_has_purch();
  ::GiveToll_Purch* temp = purch_;
  purch_ = NULL;
  return temp;
}
inline void GiveToll::set_allocated_purch(::GiveToll_Purch* purch) {
  delete purch_;
  purch_ = purch;
  if (purch) {
    set_has_purch();
  } else {
    clear_has_purch();
  }
}

// -------------------------------------------------------------------

// Coin

// required int32 ret = 1;
inline bool Coin::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Coin::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Coin::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Coin::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Coin::ret() const {
  return ret_;
}
inline void Coin::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int32 stake = 2;
inline int Coin::stake_size() const {
  return stake_.size();
}
inline void Coin::clear_stake() {
  stake_.Clear();
}
inline ::google::protobuf::int32 Coin::stake(int index) const {
  return stake_.Get(index);
}
inline void Coin::set_stake(int index, ::google::protobuf::int32 value) {
  stake_.Set(index, value);
}
inline void Coin::add_stake(::google::protobuf::int32 value) {
  stake_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Coin::stake() const {
  return stake_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Coin::mutable_stake() {
  return &stake_;
}

// repeated int32 result_list = 3;
inline int Coin::result_list_size() const {
  return result_list_.size();
}
inline void Coin::clear_result_list() {
  result_list_.Clear();
}
inline ::google::protobuf::int32 Coin::result_list(int index) const {
  return result_list_.Get(index);
}
inline void Coin::set_result_list(int index, ::google::protobuf::int32 value) {
  result_list_.Set(index, value);
}
inline void Coin::add_result_list(::google::protobuf::int32 value) {
  result_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Coin::result_list() const {
  return result_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Coin::mutable_result_list() {
  return &result_list_;
}

// -------------------------------------------------------------------

// BuildIsland

// required int32 opre_res = 1;
inline bool BuildIsland::has_opre_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildIsland::set_has_opre_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildIsland::clear_has_opre_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildIsland::clear_opre_res() {
  opre_res_ = 0;
  clear_has_opre_res();
}
inline ::google::protobuf::int32 BuildIsland::opre_res() const {
  return opre_res_;
}
inline void BuildIsland::set_opre_res(::google::protobuf::int32 value) {
  set_has_opre_res();
  opre_res_ = value;
}

// optional uint32 money = 2;
inline bool BuildIsland::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildIsland::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildIsland::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildIsland::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 BuildIsland::money() const {
  return money_;
}
inline void BuildIsland::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 lvl = 3;
inline bool BuildIsland::has_lvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildIsland::set_has_lvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildIsland::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildIsland::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline ::google::protobuf::int32 BuildIsland::lvl() const {
  return lvl_;
}
inline void BuildIsland::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
}

// repeated int32 grid_index = 4;
inline int BuildIsland::grid_index_size() const {
  return grid_index_.size();
}
inline void BuildIsland::clear_grid_index() {
  grid_index_.Clear();
}
inline ::google::protobuf::int32 BuildIsland::grid_index(int index) const {
  return grid_index_.Get(index);
}
inline void BuildIsland::set_grid_index(int index, ::google::protobuf::int32 value) {
  grid_index_.Set(index, value);
}
inline void BuildIsland::add_grid_index(::google::protobuf::int32 value) {
  grid_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildIsland::grid_index() const {
  return grid_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildIsland::mutable_grid_index() {
  return &grid_index_;
}

// -------------------------------------------------------------------

// HoldPeak

// required int32 result = 1;
inline bool HoldPeak::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HoldPeak::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HoldPeak::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HoldPeak::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 HoldPeak::result() const {
  return result_;
}
inline void HoldPeak::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 money = 2;
inline bool HoldPeak::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HoldPeak::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HoldPeak::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HoldPeak::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 HoldPeak::money() const {
  return money_;
}
inline void HoldPeak::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// repeated int32 can_hold_grid = 3;
inline int HoldPeak::can_hold_grid_size() const {
  return can_hold_grid_.size();
}
inline void HoldPeak::clear_can_hold_grid() {
  can_hold_grid_.Clear();
}
inline ::google::protobuf::int32 HoldPeak::can_hold_grid(int index) const {
  return can_hold_grid_.Get(index);
}
inline void HoldPeak::set_can_hold_grid(int index, ::google::protobuf::int32 value) {
  can_hold_grid_.Set(index, value);
}
inline void HoldPeak::add_can_hold_grid(::google::protobuf::int32 value) {
  can_hold_grid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HoldPeak::can_hold_grid() const {
  return can_hold_grid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HoldPeak::mutable_can_hold_grid() {
  return &can_hold_grid_;
}

// -------------------------------------------------------------------

// Tollage

// required int32 hald_type = 1;
inline bool Tollage::has_hald_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tollage::set_has_hald_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tollage::clear_has_hald_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tollage::clear_hald_type() {
  hald_type_ = 0;
  clear_has_hald_type();
}
inline ::google::protobuf::int32 Tollage::hald_type() const {
  return hald_type_;
}
inline void Tollage::set_hald_type(::google::protobuf::int32 value) {
  set_has_hald_type();
  hald_type_ = value;
}

// optional int32 card_type = 2;
inline bool Tollage::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tollage::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tollage::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tollage::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 Tollage::card_type() const {
  return card_type_;
}
inline void Tollage::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// required uint32 base_price = 3;
inline bool Tollage::has_base_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tollage::set_has_base_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tollage::clear_has_base_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tollage::clear_base_price() {
  base_price_ = 0u;
  clear_has_base_price();
}
inline ::google::protobuf::uint32 Tollage::base_price() const {
  return base_price_;
}
inline void Tollage::set_base_price(::google::protobuf::uint32 value) {
  set_has_base_price();
  base_price_ = value;
}

// required uint32 sale_price = 4;
inline bool Tollage::has_sale_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tollage::set_has_sale_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tollage::clear_has_sale_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tollage::clear_sale_price() {
  sale_price_ = 0u;
  clear_has_sale_price();
}
inline ::google::protobuf::uint32 Tollage::sale_price() const {
  return sale_price_;
}
inline void Tollage::set_sale_price(::google::protobuf::uint32 value) {
  set_has_sale_price();
  sale_price_ = value;
}

// optional .Bankrupt bk = 5;
inline bool Tollage::has_bk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tollage::set_has_bk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tollage::clear_has_bk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tollage::clear_bk() {
  if (bk_ != NULL) bk_->::Bankrupt::Clear();
  clear_has_bk();
}
inline const ::Bankrupt& Tollage::bk() const {
  return bk_ != NULL ? *bk_ : *default_instance_->bk_;
}
inline ::Bankrupt* Tollage::mutable_bk() {
  set_has_bk();
  if (bk_ == NULL) bk_ = new ::Bankrupt;
  return bk_;
}
inline ::Bankrupt* Tollage::release_bk() {
  clear_has_bk();
  ::Bankrupt* temp = bk_;
  bk_ = NULL;
  return temp;
}
inline void Tollage::set_allocated_bk(::Bankrupt* bk) {
  delete bk_;
  bk_ = bk;
  if (bk) {
    set_has_bk();
  } else {
    clear_has_bk();
  }
}

// -------------------------------------------------------------------

// RandEvent_CmdCardOper

// repeated int32 contribut_city_list = 1;
inline int RandEvent_CmdCardOper::contribut_city_list_size() const {
  return contribut_city_list_.size();
}
inline void RandEvent_CmdCardOper::clear_contribut_city_list() {
  contribut_city_list_.Clear();
}
inline ::google::protobuf::int32 RandEvent_CmdCardOper::contribut_city_list(int index) const {
  return contribut_city_list_.Get(index);
}
inline void RandEvent_CmdCardOper::set_contribut_city_list(int index, ::google::protobuf::int32 value) {
  contribut_city_list_.Set(index, value);
}
inline void RandEvent_CmdCardOper::add_contribut_city_list(::google::protobuf::int32 value) {
  contribut_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEvent_CmdCardOper::contribut_city_list() const {
  return contribut_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEvent_CmdCardOper::mutable_contribut_city_list() {
  return &contribut_city_list_;
}

// repeated int32 contribut_role_list = 2;
inline int RandEvent_CmdCardOper::contribut_role_list_size() const {
  return contribut_role_list_.size();
}
inline void RandEvent_CmdCardOper::clear_contribut_role_list() {
  contribut_role_list_.Clear();
}
inline ::google::protobuf::int32 RandEvent_CmdCardOper::contribut_role_list(int index) const {
  return contribut_role_list_.Get(index);
}
inline void RandEvent_CmdCardOper::set_contribut_role_list(int index, ::google::protobuf::int32 value) {
  contribut_role_list_.Set(index, value);
}
inline void RandEvent_CmdCardOper::add_contribut_role_list(::google::protobuf::int32 value) {
  contribut_role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEvent_CmdCardOper::contribut_role_list() const {
  return contribut_role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEvent_CmdCardOper::mutable_contribut_role_list() {
  return &contribut_role_list_;
}

// repeated int32 hold_peak_city_list = 3;
inline int RandEvent_CmdCardOper::hold_peak_city_list_size() const {
  return hold_peak_city_list_.size();
}
inline void RandEvent_CmdCardOper::clear_hold_peak_city_list() {
  hold_peak_city_list_.Clear();
}
inline ::google::protobuf::int32 RandEvent_CmdCardOper::hold_peak_city_list(int index) const {
  return hold_peak_city_list_.Get(index);
}
inline void RandEvent_CmdCardOper::set_hold_peak_city_list(int index, ::google::protobuf::int32 value) {
  hold_peak_city_list_.Set(index, value);
}
inline void RandEvent_CmdCardOper::add_hold_peak_city_list(::google::protobuf::int32 value) {
  hold_peak_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEvent_CmdCardOper::hold_peak_city_list() const {
  return hold_peak_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEvent_CmdCardOper::mutable_hold_peak_city_list() {
  return &hold_peak_city_list_;
}

// optional int32 curr_hold_peak_city = 4;
inline bool RandEvent_CmdCardOper::has_curr_hold_peak_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandEvent_CmdCardOper::set_has_curr_hold_peak_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandEvent_CmdCardOper::clear_has_curr_hold_peak_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandEvent_CmdCardOper::clear_curr_hold_peak_city() {
  curr_hold_peak_city_ = 0;
  clear_has_curr_hold_peak_city();
}
inline ::google::protobuf::int32 RandEvent_CmdCardOper::curr_hold_peak_city() const {
  return curr_hold_peak_city_;
}
inline void RandEvent_CmdCardOper::set_curr_hold_peak_city(::google::protobuf::int32 value) {
  set_has_curr_hold_peak_city();
  curr_hold_peak_city_ = value;
}

// -------------------------------------------------------------------

// RandEvent_AttackOper_ChangeCity

// repeated int32 self_city_list = 1;
inline int RandEvent_AttackOper_ChangeCity::self_city_list_size() const {
  return self_city_list_.size();
}
inline void RandEvent_AttackOper_ChangeCity::clear_self_city_list() {
  self_city_list_.Clear();
}
inline ::google::protobuf::int32 RandEvent_AttackOper_ChangeCity::self_city_list(int index) const {
  return self_city_list_.Get(index);
}
inline void RandEvent_AttackOper_ChangeCity::set_self_city_list(int index, ::google::protobuf::int32 value) {
  self_city_list_.Set(index, value);
}
inline void RandEvent_AttackOper_ChangeCity::add_self_city_list(::google::protobuf::int32 value) {
  self_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEvent_AttackOper_ChangeCity::self_city_list() const {
  return self_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEvent_AttackOper_ChangeCity::mutable_self_city_list() {
  return &self_city_list_;
}

// repeated int32 enemy_city_list = 2;
inline int RandEvent_AttackOper_ChangeCity::enemy_city_list_size() const {
  return enemy_city_list_.size();
}
inline void RandEvent_AttackOper_ChangeCity::clear_enemy_city_list() {
  enemy_city_list_.Clear();
}
inline ::google::protobuf::int32 RandEvent_AttackOper_ChangeCity::enemy_city_list(int index) const {
  return enemy_city_list_.Get(index);
}
inline void RandEvent_AttackOper_ChangeCity::set_enemy_city_list(int index, ::google::protobuf::int32 value) {
  enemy_city_list_.Set(index, value);
}
inline void RandEvent_AttackOper_ChangeCity::add_enemy_city_list(::google::protobuf::int32 value) {
  enemy_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEvent_AttackOper_ChangeCity::enemy_city_list() const {
  return enemy_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEvent_AttackOper_ChangeCity::mutable_enemy_city_list() {
  return &enemy_city_list_;
}

// -------------------------------------------------------------------

// RandEvent_AttackOper

// repeated int32 can_attack_city_list = 1;
inline int RandEvent_AttackOper::can_attack_city_list_size() const {
  return can_attack_city_list_.size();
}
inline void RandEvent_AttackOper::clear_can_attack_city_list() {
  can_attack_city_list_.Clear();
}
inline ::google::protobuf::int32 RandEvent_AttackOper::can_attack_city_list(int index) const {
  return can_attack_city_list_.Get(index);
}
inline void RandEvent_AttackOper::set_can_attack_city_list(int index, ::google::protobuf::int32 value) {
  can_attack_city_list_.Set(index, value);
}
inline void RandEvent_AttackOper::add_can_attack_city_list(::google::protobuf::int32 value) {
  can_attack_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEvent_AttackOper::can_attack_city_list() const {
  return can_attack_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEvent_AttackOper::mutable_can_attack_city_list() {
  return &can_attack_city_list_;
}

// optional .RandEvent.AttackOper.ChangeCity change_city_list = 2;
inline bool RandEvent_AttackOper::has_change_city_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEvent_AttackOper::set_has_change_city_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEvent_AttackOper::clear_has_change_city_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEvent_AttackOper::clear_change_city_list() {
  if (change_city_list_ != NULL) change_city_list_->::RandEvent_AttackOper_ChangeCity::Clear();
  clear_has_change_city_list();
}
inline const ::RandEvent_AttackOper_ChangeCity& RandEvent_AttackOper::change_city_list() const {
  return change_city_list_ != NULL ? *change_city_list_ : *default_instance_->change_city_list_;
}
inline ::RandEvent_AttackOper_ChangeCity* RandEvent_AttackOper::mutable_change_city_list() {
  set_has_change_city_list();
  if (change_city_list_ == NULL) change_city_list_ = new ::RandEvent_AttackOper_ChangeCity;
  return change_city_list_;
}
inline ::RandEvent_AttackOper_ChangeCity* RandEvent_AttackOper::release_change_city_list() {
  clear_has_change_city_list();
  ::RandEvent_AttackOper_ChangeCity* temp = change_city_list_;
  change_city_list_ = NULL;
  return temp;
}
inline void RandEvent_AttackOper::set_allocated_change_city_list(::RandEvent_AttackOper_ChangeCity* change_city_list) {
  delete change_city_list_;
  change_city_list_ = change_city_list;
  if (change_city_list) {
    set_has_change_city_list();
  } else {
    clear_has_change_city_list();
  }
}

// -------------------------------------------------------------------

// RandEvent

// required int32 card_type = 1;
inline bool RandEvent::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEvent::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEvent::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEvent::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 RandEvent::card_type() const {
  return card_type_;
}
inline void RandEvent::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// required int32 event_id = 2;
inline bool RandEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEvent::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 RandEvent::event_id() const {
  return event_id_;
}
inline void RandEvent::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// required bool is_trigger_skill = 3;
inline bool RandEvent::has_is_trigger_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEvent::set_has_is_trigger_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEvent::clear_has_is_trigger_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEvent::clear_is_trigger_skill() {
  is_trigger_skill_ = false;
  clear_has_is_trigger_skill();
}
inline bool RandEvent::is_trigger_skill() const {
  return is_trigger_skill_;
}
inline void RandEvent::set_is_trigger_skill(bool value) {
  set_has_is_trigger_skill();
  is_trigger_skill_ = value;
}

// optional .RandEvent.CmdCardOper cmd_card_oper = 4;
inline bool RandEvent::has_cmd_card_oper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandEvent::set_has_cmd_card_oper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandEvent::clear_has_cmd_card_oper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandEvent::clear_cmd_card_oper() {
  if (cmd_card_oper_ != NULL) cmd_card_oper_->::RandEvent_CmdCardOper::Clear();
  clear_has_cmd_card_oper();
}
inline const ::RandEvent_CmdCardOper& RandEvent::cmd_card_oper() const {
  return cmd_card_oper_ != NULL ? *cmd_card_oper_ : *default_instance_->cmd_card_oper_;
}
inline ::RandEvent_CmdCardOper* RandEvent::mutable_cmd_card_oper() {
  set_has_cmd_card_oper();
  if (cmd_card_oper_ == NULL) cmd_card_oper_ = new ::RandEvent_CmdCardOper;
  return cmd_card_oper_;
}
inline ::RandEvent_CmdCardOper* RandEvent::release_cmd_card_oper() {
  clear_has_cmd_card_oper();
  ::RandEvent_CmdCardOper* temp = cmd_card_oper_;
  cmd_card_oper_ = NULL;
  return temp;
}
inline void RandEvent::set_allocated_cmd_card_oper(::RandEvent_CmdCardOper* cmd_card_oper) {
  delete cmd_card_oper_;
  cmd_card_oper_ = cmd_card_oper;
  if (cmd_card_oper) {
    set_has_cmd_card_oper();
  } else {
    clear_has_cmd_card_oper();
  }
}

// optional .RandEvent.AttackOper attack_card_oper = 5;
inline bool RandEvent::has_attack_card_oper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RandEvent::set_has_attack_card_oper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RandEvent::clear_has_attack_card_oper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RandEvent::clear_attack_card_oper() {
  if (attack_card_oper_ != NULL) attack_card_oper_->::RandEvent_AttackOper::Clear();
  clear_has_attack_card_oper();
}
inline const ::RandEvent_AttackOper& RandEvent::attack_card_oper() const {
  return attack_card_oper_ != NULL ? *attack_card_oper_ : *default_instance_->attack_card_oper_;
}
inline ::RandEvent_AttackOper* RandEvent::mutable_attack_card_oper() {
  set_has_attack_card_oper();
  if (attack_card_oper_ == NULL) attack_card_oper_ = new ::RandEvent_AttackOper;
  return attack_card_oper_;
}
inline ::RandEvent_AttackOper* RandEvent::release_attack_card_oper() {
  clear_has_attack_card_oper();
  ::RandEvent_AttackOper* temp = attack_card_oper_;
  attack_card_oper_ = NULL;
  return temp;
}
inline void RandEvent::set_allocated_attack_card_oper(::RandEvent_AttackOper* attack_card_oper) {
  delete attack_card_oper_;
  attack_card_oper_ = attack_card_oper;
  if (attack_card_oper) {
    set_has_attack_card_oper();
  } else {
    clear_has_attack_card_oper();
  }
}

// -------------------------------------------------------------------

// Start

// repeated int32 up_grid = 1;
inline int Start::up_grid_size() const {
  return up_grid_.size();
}
inline void Start::clear_up_grid() {
  up_grid_.Clear();
}
inline ::google::protobuf::int32 Start::up_grid(int index) const {
  return up_grid_.Get(index);
}
inline void Start::set_up_grid(int index, ::google::protobuf::int32 value) {
  up_grid_.Set(index, value);
}
inline void Start::add_up_grid(::google::protobuf::int32 value) {
  up_grid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Start::up_grid() const {
  return up_grid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Start::mutable_up_grid() {
  return &up_grid_;
}

// -------------------------------------------------------------------

// ActionResult

// required int32 action_seat_id = 1;
inline bool ActionResult::has_action_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionResult::set_has_action_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionResult::clear_has_action_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionResult::clear_action_seat_id() {
  action_seat_id_ = 0;
  clear_has_action_seat_id();
}
inline ::google::protobuf::int32 ActionResult::action_seat_id() const {
  return action_seat_id_;
}
inline void ActionResult::set_action_seat_id(::google::protobuf::int32 value) {
  set_has_action_seat_id();
  action_seat_id_ = value;
}

// required int32 action_type = 2;
inline bool ActionResult::has_action_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionResult::set_has_action_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionResult::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionResult::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::google::protobuf::int32 ActionResult::action_type() const {
  return action_type_;
}
inline void ActionResult::set_action_type(::google::protobuf::int32 value) {
  set_has_action_type();
  action_type_ = value;
}

// required int32 action_res = 3;
inline bool ActionResult::has_action_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionResult::set_has_action_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionResult::clear_has_action_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionResult::clear_action_res() {
  action_res_ = 0;
  clear_has_action_res();
}
inline ::google::protobuf::int32 ActionResult::action_res() const {
  return action_res_;
}
inline void ActionResult::set_action_res(::google::protobuf::int32 value) {
  set_has_action_res();
  action_res_ = value;
}

// optional .BuildRsp build_rsp = 4;
inline bool ActionResult::has_build_rsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionResult::set_has_build_rsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionResult::clear_has_build_rsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionResult::clear_build_rsp() {
  if (build_rsp_ != NULL) build_rsp_->::BuildRsp::Clear();
  clear_has_build_rsp();
}
inline const ::BuildRsp& ActionResult::build_rsp() const {
  return build_rsp_ != NULL ? *build_rsp_ : *default_instance_->build_rsp_;
}
inline ::BuildRsp* ActionResult::mutable_build_rsp() {
  set_has_build_rsp();
  if (build_rsp_ == NULL) build_rsp_ = new ::BuildRsp;
  return build_rsp_;
}
inline ::BuildRsp* ActionResult::release_build_rsp() {
  clear_has_build_rsp();
  ::BuildRsp* temp = build_rsp_;
  build_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_build_rsp(::BuildRsp* build_rsp) {
  delete build_rsp_;
  build_rsp_ = build_rsp;
  if (build_rsp) {
    set_has_build_rsp();
  } else {
    clear_has_build_rsp();
  }
}

// optional .CoinThrowRsp coin_throw_rsp = 5;
inline bool ActionResult::has_coin_throw_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActionResult::set_has_coin_throw_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActionResult::clear_has_coin_throw_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActionResult::clear_coin_throw_rsp() {
  if (coin_throw_rsp_ != NULL) coin_throw_rsp_->::CoinThrowRsp::Clear();
  clear_has_coin_throw_rsp();
}
inline const ::CoinThrowRsp& ActionResult::coin_throw_rsp() const {
  return coin_throw_rsp_ != NULL ? *coin_throw_rsp_ : *default_instance_->coin_throw_rsp_;
}
inline ::CoinThrowRsp* ActionResult::mutable_coin_throw_rsp() {
  set_has_coin_throw_rsp();
  if (coin_throw_rsp_ == NULL) coin_throw_rsp_ = new ::CoinThrowRsp;
  return coin_throw_rsp_;
}
inline ::CoinThrowRsp* ActionResult::release_coin_throw_rsp() {
  clear_has_coin_throw_rsp();
  ::CoinThrowRsp* temp = coin_throw_rsp_;
  coin_throw_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_coin_throw_rsp(::CoinThrowRsp* coin_throw_rsp) {
  delete coin_throw_rsp_;
  coin_throw_rsp_ = coin_throw_rsp;
  if (coin_throw_rsp) {
    set_has_coin_throw_rsp();
  } else {
    clear_has_coin_throw_rsp();
  }
}

// optional .HoldPeakRsp hold_peak_rsp = 6;
inline bool ActionResult::has_hold_peak_rsp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActionResult::set_has_hold_peak_rsp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActionResult::clear_has_hold_peak_rsp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActionResult::clear_hold_peak_rsp() {
  if (hold_peak_rsp_ != NULL) hold_peak_rsp_->::HoldPeakRsp::Clear();
  clear_has_hold_peak_rsp();
}
inline const ::HoldPeakRsp& ActionResult::hold_peak_rsp() const {
  return hold_peak_rsp_ != NULL ? *hold_peak_rsp_ : *default_instance_->hold_peak_rsp_;
}
inline ::HoldPeakRsp* ActionResult::mutable_hold_peak_rsp() {
  set_has_hold_peak_rsp();
  if (hold_peak_rsp_ == NULL) hold_peak_rsp_ = new ::HoldPeakRsp;
  return hold_peak_rsp_;
}
inline ::HoldPeakRsp* ActionResult::release_hold_peak_rsp() {
  clear_has_hold_peak_rsp();
  ::HoldPeakRsp* temp = hold_peak_rsp_;
  hold_peak_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_hold_peak_rsp(::HoldPeakRsp* hold_peak_rsp) {
  delete hold_peak_rsp_;
  hold_peak_rsp_ = hold_peak_rsp;
  if (hold_peak_rsp) {
    set_has_hold_peak_rsp();
  } else {
    clear_has_hold_peak_rsp();
  }
}

// optional .PurchaseRsp purchase = 7;
inline bool ActionResult::has_purchase() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActionResult::set_has_purchase() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActionResult::clear_has_purchase() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActionResult::clear_purchase() {
  if (purchase_ != NULL) purchase_->::PurchaseRsp::Clear();
  clear_has_purchase();
}
inline const ::PurchaseRsp& ActionResult::purchase() const {
  return purchase_ != NULL ? *purchase_ : *default_instance_->purchase_;
}
inline ::PurchaseRsp* ActionResult::mutable_purchase() {
  set_has_purchase();
  if (purchase_ == NULL) purchase_ = new ::PurchaseRsp;
  return purchase_;
}
inline ::PurchaseRsp* ActionResult::release_purchase() {
  clear_has_purchase();
  ::PurchaseRsp* temp = purchase_;
  purchase_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_purchase(::PurchaseRsp* purchase) {
  delete purchase_;
  purchase_ = purchase;
  if (purchase) {
    set_has_purchase();
  } else {
    clear_has_purchase();
  }
}

// optional .FlyRsp fly_rsp = 8;
inline bool ActionResult::has_fly_rsp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActionResult::set_has_fly_rsp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ActionResult::clear_has_fly_rsp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ActionResult::clear_fly_rsp() {
  if (fly_rsp_ != NULL) fly_rsp_->::FlyRsp::Clear();
  clear_has_fly_rsp();
}
inline const ::FlyRsp& ActionResult::fly_rsp() const {
  return fly_rsp_ != NULL ? *fly_rsp_ : *default_instance_->fly_rsp_;
}
inline ::FlyRsp* ActionResult::mutable_fly_rsp() {
  set_has_fly_rsp();
  if (fly_rsp_ == NULL) fly_rsp_ = new ::FlyRsp;
  return fly_rsp_;
}
inline ::FlyRsp* ActionResult::release_fly_rsp() {
  clear_has_fly_rsp();
  ::FlyRsp* temp = fly_rsp_;
  fly_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_fly_rsp(::FlyRsp* fly_rsp) {
  delete fly_rsp_;
  fly_rsp_ = fly_rsp;
  if (fly_rsp) {
    set_has_fly_rsp();
  } else {
    clear_has_fly_rsp();
  }
}

// optional .BankruptRsp bankrupt_rsp = 9;
inline bool ActionResult::has_bankrupt_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ActionResult::set_has_bankrupt_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ActionResult::clear_has_bankrupt_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ActionResult::clear_bankrupt_rsp() {
  if (bankrupt_rsp_ != NULL) bankrupt_rsp_->::BankruptRsp::Clear();
  clear_has_bankrupt_rsp();
}
inline const ::BankruptRsp& ActionResult::bankrupt_rsp() const {
  return bankrupt_rsp_ != NULL ? *bankrupt_rsp_ : *default_instance_->bankrupt_rsp_;
}
inline ::BankruptRsp* ActionResult::mutable_bankrupt_rsp() {
  set_has_bankrupt_rsp();
  if (bankrupt_rsp_ == NULL) bankrupt_rsp_ = new ::BankruptRsp;
  return bankrupt_rsp_;
}
inline ::BankruptRsp* ActionResult::release_bankrupt_rsp() {
  clear_has_bankrupt_rsp();
  ::BankruptRsp* temp = bankrupt_rsp_;
  bankrupt_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_bankrupt_rsp(::BankruptRsp* bankrupt_rsp) {
  delete bankrupt_rsp_;
  bankrupt_rsp_ = bankrupt_rsp;
  if (bankrupt_rsp) {
    set_has_bankrupt_rsp();
  } else {
    clear_has_bankrupt_rsp();
  }
}

// optional .RandEventRsp rand_event_rsp = 10;
inline bool ActionResult::has_rand_event_rsp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActionResult::set_has_rand_event_rsp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ActionResult::clear_has_rand_event_rsp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ActionResult::clear_rand_event_rsp() {
  if (rand_event_rsp_ != NULL) rand_event_rsp_->::RandEventRsp::Clear();
  clear_has_rand_event_rsp();
}
inline const ::RandEventRsp& ActionResult::rand_event_rsp() const {
  return rand_event_rsp_ != NULL ? *rand_event_rsp_ : *default_instance_->rand_event_rsp_;
}
inline ::RandEventRsp* ActionResult::mutable_rand_event_rsp() {
  set_has_rand_event_rsp();
  if (rand_event_rsp_ == NULL) rand_event_rsp_ = new ::RandEventRsp;
  return rand_event_rsp_;
}
inline ::RandEventRsp* ActionResult::release_rand_event_rsp() {
  clear_has_rand_event_rsp();
  ::RandEventRsp* temp = rand_event_rsp_;
  rand_event_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_rand_event_rsp(::RandEventRsp* rand_event_rsp) {
  delete rand_event_rsp_;
  rand_event_rsp_ = rand_event_rsp;
  if (rand_event_rsp) {
    set_has_rand_event_rsp();
  } else {
    clear_has_rand_event_rsp();
  }
}

// optional .UseCardRsp user_card_rsp = 11;
inline bool ActionResult::has_user_card_rsp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ActionResult::set_has_user_card_rsp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ActionResult::clear_has_user_card_rsp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ActionResult::clear_user_card_rsp() {
  if (user_card_rsp_ != NULL) user_card_rsp_->::UseCardRsp::Clear();
  clear_has_user_card_rsp();
}
inline const ::UseCardRsp& ActionResult::user_card_rsp() const {
  return user_card_rsp_ != NULL ? *user_card_rsp_ : *default_instance_->user_card_rsp_;
}
inline ::UseCardRsp* ActionResult::mutable_user_card_rsp() {
  set_has_user_card_rsp();
  if (user_card_rsp_ == NULL) user_card_rsp_ = new ::UseCardRsp;
  return user_card_rsp_;
}
inline ::UseCardRsp* ActionResult::release_user_card_rsp() {
  clear_has_user_card_rsp();
  ::UseCardRsp* temp = user_card_rsp_;
  user_card_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_user_card_rsp(::UseCardRsp* user_card_rsp) {
  delete user_card_rsp_;
  user_card_rsp_ = user_card_rsp;
  if (user_card_rsp) {
    set_has_user_card_rsp();
  } else {
    clear_has_user_card_rsp();
  }
}

// optional .StartPointRsp start_point_rsp = 12;
inline bool ActionResult::has_start_point_rsp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ActionResult::set_has_start_point_rsp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ActionResult::clear_has_start_point_rsp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ActionResult::clear_start_point_rsp() {
  if (start_point_rsp_ != NULL) start_point_rsp_->::StartPointRsp::Clear();
  clear_has_start_point_rsp();
}
inline const ::StartPointRsp& ActionResult::start_point_rsp() const {
  return start_point_rsp_ != NULL ? *start_point_rsp_ : *default_instance_->start_point_rsp_;
}
inline ::StartPointRsp* ActionResult::mutable_start_point_rsp() {
  set_has_start_point_rsp();
  if (start_point_rsp_ == NULL) start_point_rsp_ = new ::StartPointRsp;
  return start_point_rsp_;
}
inline ::StartPointRsp* ActionResult::release_start_point_rsp() {
  clear_has_start_point_rsp();
  ::StartPointRsp* temp = start_point_rsp_;
  start_point_rsp_ = NULL;
  return temp;
}
inline void ActionResult::set_allocated_start_point_rsp(::StartPointRsp* start_point_rsp) {
  delete start_point_rsp_;
  start_point_rsp_ = start_point_rsp;
  if (start_point_rsp) {
    set_has_start_point_rsp();
  } else {
    clear_has_start_point_rsp();
  }
}

// -------------------------------------------------------------------

// BuildRsp_BuildCity

// required int32 grid_index = 1;
inline bool BuildRsp_BuildCity::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildRsp_BuildCity::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildRsp_BuildCity::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildRsp_BuildCity::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 BuildRsp_BuildCity::grid_index() const {
  return grid_index_;
}
inline void BuildRsp_BuildCity::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// repeated int32 builded = 2;
inline int BuildRsp_BuildCity::builded_size() const {
  return builded_.size();
}
inline void BuildRsp_BuildCity::clear_builded() {
  builded_.Clear();
}
inline ::google::protobuf::int32 BuildRsp_BuildCity::builded(int index) const {
  return builded_.Get(index);
}
inline void BuildRsp_BuildCity::set_builded(int index, ::google::protobuf::int32 value) {
  builded_.Set(index, value);
}
inline void BuildRsp_BuildCity::add_builded(::google::protobuf::int32 value) {
  builded_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildRsp_BuildCity::builded() const {
  return builded_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildRsp_BuildCity::mutable_builded() {
  return &builded_;
}

// -------------------------------------------------------------------

// BuildRsp_BuildIsland

// required int32 grid_index = 1;
inline bool BuildRsp_BuildIsland::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildRsp_BuildIsland::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildRsp_BuildIsland::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildRsp_BuildIsland::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 BuildRsp_BuildIsland::grid_index() const {
  return grid_index_;
}
inline void BuildRsp_BuildIsland::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required int32 builded = 2;
inline bool BuildRsp_BuildIsland::has_builded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildRsp_BuildIsland::set_has_builded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildRsp_BuildIsland::clear_has_builded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildRsp_BuildIsland::clear_builded() {
  builded_ = 0;
  clear_has_builded();
}
inline ::google::protobuf::int32 BuildRsp_BuildIsland::builded() const {
  return builded_;
}
inline void BuildRsp_BuildIsland::set_builded(::google::protobuf::int32 value) {
  set_has_builded();
  builded_ = value;
}

// repeated int32 up_grid_list = 3;
inline int BuildRsp_BuildIsland::up_grid_list_size() const {
  return up_grid_list_.size();
}
inline void BuildRsp_BuildIsland::clear_up_grid_list() {
  up_grid_list_.Clear();
}
inline ::google::protobuf::int32 BuildRsp_BuildIsland::up_grid_list(int index) const {
  return up_grid_list_.Get(index);
}
inline void BuildRsp_BuildIsland::set_up_grid_list(int index, ::google::protobuf::int32 value) {
  up_grid_list_.Set(index, value);
}
inline void BuildRsp_BuildIsland::add_up_grid_list(::google::protobuf::int32 value) {
  up_grid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildRsp_BuildIsland::up_grid_list() const {
  return up_grid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildRsp_BuildIsland::mutable_up_grid_list() {
  return &up_grid_list_;
}

// -------------------------------------------------------------------

// BuildRsp

// required int32 type = 1;
inline bool BuildRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuildRsp::type() const {
  return type_;
}
inline void BuildRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .BuildRsp.BuildCity build_city = 2;
inline bool BuildRsp::has_build_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildRsp::set_has_build_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildRsp::clear_has_build_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildRsp::clear_build_city() {
  if (build_city_ != NULL) build_city_->::BuildRsp_BuildCity::Clear();
  clear_has_build_city();
}
inline const ::BuildRsp_BuildCity& BuildRsp::build_city() const {
  return build_city_ != NULL ? *build_city_ : *default_instance_->build_city_;
}
inline ::BuildRsp_BuildCity* BuildRsp::mutable_build_city() {
  set_has_build_city();
  if (build_city_ == NULL) build_city_ = new ::BuildRsp_BuildCity;
  return build_city_;
}
inline ::BuildRsp_BuildCity* BuildRsp::release_build_city() {
  clear_has_build_city();
  ::BuildRsp_BuildCity* temp = build_city_;
  build_city_ = NULL;
  return temp;
}
inline void BuildRsp::set_allocated_build_city(::BuildRsp_BuildCity* build_city) {
  delete build_city_;
  build_city_ = build_city;
  if (build_city) {
    set_has_build_city();
  } else {
    clear_has_build_city();
  }
}

// optional .BuildRsp.BuildIsland build_island = 3;
inline bool BuildRsp::has_build_island() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildRsp::set_has_build_island() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildRsp::clear_has_build_island() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildRsp::clear_build_island() {
  if (build_island_ != NULL) build_island_->::BuildRsp_BuildIsland::Clear();
  clear_has_build_island();
}
inline const ::BuildRsp_BuildIsland& BuildRsp::build_island() const {
  return build_island_ != NULL ? *build_island_ : *default_instance_->build_island_;
}
inline ::BuildRsp_BuildIsland* BuildRsp::mutable_build_island() {
  set_has_build_island();
  if (build_island_ == NULL) build_island_ = new ::BuildRsp_BuildIsland;
  return build_island_;
}
inline ::BuildRsp_BuildIsland* BuildRsp::release_build_island() {
  clear_has_build_island();
  ::BuildRsp_BuildIsland* temp = build_island_;
  build_island_ = NULL;
  return temp;
}
inline void BuildRsp::set_allocated_build_island(::BuildRsp_BuildIsland* build_island) {
  delete build_island_;
  build_island_ = build_island;
  if (build_island) {
    set_has_build_island();
  } else {
    clear_has_build_island();
  }
}

// -------------------------------------------------------------------

// HoldPeakRsp

// optional int32 hold_index = 1;
inline bool HoldPeakRsp::has_hold_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HoldPeakRsp::set_has_hold_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HoldPeakRsp::clear_has_hold_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HoldPeakRsp::clear_hold_index() {
  hold_index_ = 0;
  clear_has_hold_index();
}
inline ::google::protobuf::int32 HoldPeakRsp::hold_index() const {
  return hold_index_;
}
inline void HoldPeakRsp::set_hold_index(::google::protobuf::int32 value) {
  set_has_hold_index();
  hold_index_ = value;
}

// optional int32 last_hold = 2;
inline bool HoldPeakRsp::has_last_hold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HoldPeakRsp::set_has_last_hold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HoldPeakRsp::clear_has_last_hold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HoldPeakRsp::clear_last_hold() {
  last_hold_ = 0;
  clear_has_last_hold();
}
inline ::google::protobuf::int32 HoldPeakRsp::last_hold() const {
  return last_hold_;
}
inline void HoldPeakRsp::set_last_hold(::google::protobuf::int32 value) {
  set_has_last_hold();
  last_hold_ = value;
}

// -------------------------------------------------------------------

// CoinThrowRsp

// required int32 time = 1;
inline bool CoinThrowRsp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoinThrowRsp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoinThrowRsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoinThrowRsp::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 CoinThrowRsp::time() const {
  return time_;
}
inline void CoinThrowRsp::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required int32 res = 2;
inline bool CoinThrowRsp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoinThrowRsp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoinThrowRsp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoinThrowRsp::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 CoinThrowRsp::res() const {
  return res_;
}
inline void CoinThrowRsp::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// required int32 side = 3;
inline bool CoinThrowRsp::has_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CoinThrowRsp::set_has_side() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CoinThrowRsp::clear_has_side() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CoinThrowRsp::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline ::google::protobuf::int32 CoinThrowRsp::side() const {
  return side_;
}
inline void CoinThrowRsp::set_side(::google::protobuf::int32 value) {
  set_has_side();
  side_ = value;
}

// optional int32 win_money = 4;
inline bool CoinThrowRsp::has_win_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CoinThrowRsp::set_has_win_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CoinThrowRsp::clear_has_win_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CoinThrowRsp::clear_win_money() {
  win_money_ = 0;
  clear_has_win_money();
}
inline ::google::protobuf::int32 CoinThrowRsp::win_money() const {
  return win_money_;
}
inline void CoinThrowRsp::set_win_money(::google::protobuf::int32 value) {
  set_has_win_money();
  win_money_ = value;
}

// required int32 throw_kill = 5;
inline bool CoinThrowRsp::has_throw_kill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CoinThrowRsp::set_has_throw_kill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CoinThrowRsp::clear_has_throw_kill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CoinThrowRsp::clear_throw_kill() {
  throw_kill_ = 0;
  clear_has_throw_kill();
}
inline ::google::protobuf::int32 CoinThrowRsp::throw_kill() const {
  return throw_kill_;
}
inline void CoinThrowRsp::set_throw_kill(::google::protobuf::int32 value) {
  set_has_throw_kill();
  throw_kill_ = value;
}

// -------------------------------------------------------------------

// PurchaseRsp

// required int32 grid_index = 1;
inline bool PurchaseRsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PurchaseRsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PurchaseRsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PurchaseRsp::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 PurchaseRsp::grid_index() const {
  return grid_index_;
}
inline void PurchaseRsp::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// optional .BuildCity buld_city = 2;
inline bool PurchaseRsp::has_buld_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PurchaseRsp::set_has_buld_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PurchaseRsp::clear_has_buld_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PurchaseRsp::clear_buld_city() {
  if (buld_city_ != NULL) buld_city_->::BuildCity::Clear();
  clear_has_buld_city();
}
inline const ::BuildCity& PurchaseRsp::buld_city() const {
  return buld_city_ != NULL ? *buld_city_ : *default_instance_->buld_city_;
}
inline ::BuildCity* PurchaseRsp::mutable_buld_city() {
  set_has_buld_city();
  if (buld_city_ == NULL) buld_city_ = new ::BuildCity;
  return buld_city_;
}
inline ::BuildCity* PurchaseRsp::release_buld_city() {
  clear_has_buld_city();
  ::BuildCity* temp = buld_city_;
  buld_city_ = NULL;
  return temp;
}
inline void PurchaseRsp::set_allocated_buld_city(::BuildCity* buld_city) {
  delete buld_city_;
  buld_city_ = buld_city;
  if (buld_city) {
    set_has_buld_city();
  } else {
    clear_has_buld_city();
  }
}

// -------------------------------------------------------------------

// FlyRsp

// optional .GridOper oper = 1;
inline bool FlyRsp::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlyRsp::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlyRsp::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlyRsp::clear_oper() {
  if (oper_ != NULL) oper_->::GridOper::Clear();
  clear_has_oper();
}
inline const ::GridOper& FlyRsp::oper() const {
  return oper_ != NULL ? *oper_ : *default_instance_->oper_;
}
inline ::GridOper* FlyRsp::mutable_oper() {
  set_has_oper();
  if (oper_ == NULL) oper_ = new ::GridOper;
  return oper_;
}
inline ::GridOper* FlyRsp::release_oper() {
  clear_has_oper();
  ::GridOper* temp = oper_;
  oper_ = NULL;
  return temp;
}
inline void FlyRsp::set_allocated_oper(::GridOper* oper) {
  delete oper_;
  oper_ = oper;
  if (oper) {
    set_has_oper();
  } else {
    clear_has_oper();
  }
}

// -------------------------------------------------------------------

// StartPointRsp

// optional .GridOper oper = 1;
inline bool StartPointRsp::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartPointRsp::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartPointRsp::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartPointRsp::clear_oper() {
  if (oper_ != NULL) oper_->::GridOper::Clear();
  clear_has_oper();
}
inline const ::GridOper& StartPointRsp::oper() const {
  return oper_ != NULL ? *oper_ : *default_instance_->oper_;
}
inline ::GridOper* StartPointRsp::mutable_oper() {
  set_has_oper();
  if (oper_ == NULL) oper_ = new ::GridOper;
  return oper_;
}
inline ::GridOper* StartPointRsp::release_oper() {
  clear_has_oper();
  ::GridOper* temp = oper_;
  oper_ = NULL;
  return temp;
}
inline void StartPointRsp::set_allocated_oper(::GridOper* oper) {
  delete oper_;
  oper_ = oper;
  if (oper) {
    set_has_oper();
  } else {
    clear_has_oper();
  }
}

// -------------------------------------------------------------------

// BankruptRsp

// required int32 deal_type = 1;
inline bool BankruptRsp::has_deal_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankruptRsp::set_has_deal_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankruptRsp::clear_has_deal_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankruptRsp::clear_deal_type() {
  deal_type_ = 0;
  clear_has_deal_type();
}
inline ::google::protobuf::int32 BankruptRsp::deal_type() const {
  return deal_type_;
}
inline void BankruptRsp::set_deal_type(::google::protobuf::int32 value) {
  set_has_deal_type();
  deal_type_ = value;
}

// repeated int32 sale_city_list = 2;
inline int BankruptRsp::sale_city_list_size() const {
  return sale_city_list_.size();
}
inline void BankruptRsp::clear_sale_city_list() {
  sale_city_list_.Clear();
}
inline ::google::protobuf::int32 BankruptRsp::sale_city_list(int index) const {
  return sale_city_list_.Get(index);
}
inline void BankruptRsp::set_sale_city_list(int index, ::google::protobuf::int32 value) {
  sale_city_list_.Set(index, value);
}
inline void BankruptRsp::add_sale_city_list(::google::protobuf::int32 value) {
  sale_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BankruptRsp::sale_city_list() const {
  return sale_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BankruptRsp::mutable_sale_city_list() {
  return &sale_city_list_;
}

// required int32 toll_type = 3;
inline bool BankruptRsp::has_toll_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankruptRsp::set_has_toll_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankruptRsp::clear_has_toll_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankruptRsp::clear_toll_type() {
  toll_type_ = 0;
  clear_has_toll_type();
}
inline ::google::protobuf::int32 BankruptRsp::toll_type() const {
  return toll_type_;
}
inline void BankruptRsp::set_toll_type(::google::protobuf::int32 value) {
  set_has_toll_type();
  toll_type_ = value;
}

// required uint32 money = 4;
inline bool BankruptRsp::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BankruptRsp::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BankruptRsp::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BankruptRsp::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 BankruptRsp::money() const {
  return money_;
}
inline void BankruptRsp::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// UseCardRsp

// required int32 use_card_type = 1;
inline bool UseCardRsp::has_use_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseCardRsp::set_has_use_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseCardRsp::clear_has_use_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseCardRsp::clear_use_card_type() {
  use_card_type_ = 0;
  clear_has_use_card_type();
}
inline ::google::protobuf::int32 UseCardRsp::use_card_type() const {
  return use_card_type_;
}
inline void UseCardRsp::set_use_card_type(::google::protobuf::int32 value) {
  set_has_use_card_type();
  use_card_type_ = value;
}

// repeated int32 grid_list = 2;
inline int UseCardRsp::grid_list_size() const {
  return grid_list_.size();
}
inline void UseCardRsp::clear_grid_list() {
  grid_list_.Clear();
}
inline ::google::protobuf::int32 UseCardRsp::grid_list(int index) const {
  return grid_list_.Get(index);
}
inline void UseCardRsp::set_grid_list(int index, ::google::protobuf::int32 value) {
  grid_list_.Set(index, value);
}
inline void UseCardRsp::add_grid_list(::google::protobuf::int32 value) {
  grid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UseCardRsp::grid_list() const {
  return grid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UseCardRsp::mutable_grid_list() {
  return &grid_list_;
}

// optional .GridOper oper = 3;
inline bool UseCardRsp::has_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseCardRsp::set_has_oper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseCardRsp::clear_has_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseCardRsp::clear_oper() {
  if (oper_ != NULL) oper_->::GridOper::Clear();
  clear_has_oper();
}
inline const ::GridOper& UseCardRsp::oper() const {
  return oper_ != NULL ? *oper_ : *default_instance_->oper_;
}
inline ::GridOper* UseCardRsp::mutable_oper() {
  set_has_oper();
  if (oper_ == NULL) oper_ = new ::GridOper;
  return oper_;
}
inline ::GridOper* UseCardRsp::release_oper() {
  clear_has_oper();
  ::GridOper* temp = oper_;
  oper_ = NULL;
  return temp;
}
inline void UseCardRsp::set_allocated_oper(::GridOper* oper) {
  delete oper_;
  oper_ = oper;
  if (oper) {
    set_has_oper();
  } else {
    clear_has_oper();
  }
}

// -------------------------------------------------------------------

// RandEventRsp_IslandInfo

// required int32 grid_index = 1;
inline bool RandEventRsp_IslandInfo::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_IslandInfo::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_IslandInfo::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_IslandInfo::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 RandEventRsp_IslandInfo::grid_index() const {
  return grid_index_;
}
inline void RandEventRsp_IslandInfo::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required int32 lvl = 2;
inline bool RandEventRsp_IslandInfo::has_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_IslandInfo::set_has_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_IslandInfo::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_IslandInfo::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline ::google::protobuf::int32 RandEventRsp_IslandInfo::lvl() const {
  return lvl_;
}
inline void RandEventRsp_IslandInfo::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
}

// -------------------------------------------------------------------

// RandEventRsp_CmdCardOperRes_MoveCmd

// required int32 move_posi = 1;
inline bool RandEventRsp_CmdCardOperRes_MoveCmd::has_move_posi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::set_has_move_posi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::clear_has_move_posi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::clear_move_posi() {
  move_posi_ = 0;
  clear_has_move_posi();
}
inline ::google::protobuf::int32 RandEventRsp_CmdCardOperRes_MoveCmd::move_posi() const {
  return move_posi_;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::set_move_posi(::google::protobuf::int32 value) {
  set_has_move_posi();
  move_posi_ = value;
}

// optional .GridOper oper = 2;
inline bool RandEventRsp_CmdCardOperRes_MoveCmd::has_oper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::set_has_oper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::clear_has_oper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::clear_oper() {
  if (oper_ != NULL) oper_->::GridOper::Clear();
  clear_has_oper();
}
inline const ::GridOper& RandEventRsp_CmdCardOperRes_MoveCmd::oper() const {
  return oper_ != NULL ? *oper_ : *default_instance_->oper_;
}
inline ::GridOper* RandEventRsp_CmdCardOperRes_MoveCmd::mutable_oper() {
  set_has_oper();
  if (oper_ == NULL) oper_ = new ::GridOper;
  return oper_;
}
inline ::GridOper* RandEventRsp_CmdCardOperRes_MoveCmd::release_oper() {
  clear_has_oper();
  ::GridOper* temp = oper_;
  oper_ = NULL;
  return temp;
}
inline void RandEventRsp_CmdCardOperRes_MoveCmd::set_allocated_oper(::GridOper* oper) {
  delete oper_;
  oper_ = oper;
  if (oper) {
    set_has_oper();
  } else {
    clear_has_oper();
  }
}

// -------------------------------------------------------------------

// RandEventRsp_CmdCardOperRes

// optional int32 contribut_city = 1;
inline bool RandEventRsp_CmdCardOperRes::has_contribut_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_CmdCardOperRes::set_has_contribut_city() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_CmdCardOperRes::clear_has_contribut_city() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_CmdCardOperRes::clear_contribut_city() {
  contribut_city_ = 0;
  clear_has_contribut_city();
}
inline ::google::protobuf::int32 RandEventRsp_CmdCardOperRes::contribut_city() const {
  return contribut_city_;
}
inline void RandEventRsp_CmdCardOperRes::set_contribut_city(::google::protobuf::int32 value) {
  set_has_contribut_city();
  contribut_city_ = value;
}

// optional int32 contribut_role = 2;
inline bool RandEventRsp_CmdCardOperRes::has_contribut_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_CmdCardOperRes::set_has_contribut_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_CmdCardOperRes::clear_has_contribut_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_CmdCardOperRes::clear_contribut_role() {
  contribut_role_ = 0;
  clear_has_contribut_role();
}
inline ::google::protobuf::int32 RandEventRsp_CmdCardOperRes::contribut_role() const {
  return contribut_role_;
}
inline void RandEventRsp_CmdCardOperRes::set_contribut_role(::google::protobuf::int32 value) {
  set_has_contribut_role();
  contribut_role_ = value;
}

// optional .HoldPeakRsp peak_rsp = 3;
inline bool RandEventRsp_CmdCardOperRes::has_peak_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventRsp_CmdCardOperRes::set_has_peak_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventRsp_CmdCardOperRes::clear_has_peak_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventRsp_CmdCardOperRes::clear_peak_rsp() {
  if (peak_rsp_ != NULL) peak_rsp_->::HoldPeakRsp::Clear();
  clear_has_peak_rsp();
}
inline const ::HoldPeakRsp& RandEventRsp_CmdCardOperRes::peak_rsp() const {
  return peak_rsp_ != NULL ? *peak_rsp_ : *default_instance_->peak_rsp_;
}
inline ::HoldPeakRsp* RandEventRsp_CmdCardOperRes::mutable_peak_rsp() {
  set_has_peak_rsp();
  if (peak_rsp_ == NULL) peak_rsp_ = new ::HoldPeakRsp;
  return peak_rsp_;
}
inline ::HoldPeakRsp* RandEventRsp_CmdCardOperRes::release_peak_rsp() {
  clear_has_peak_rsp();
  ::HoldPeakRsp* temp = peak_rsp_;
  peak_rsp_ = NULL;
  return temp;
}
inline void RandEventRsp_CmdCardOperRes::set_allocated_peak_rsp(::HoldPeakRsp* peak_rsp) {
  delete peak_rsp_;
  peak_rsp_ = peak_rsp;
  if (peak_rsp) {
    set_has_peak_rsp();
  } else {
    clear_has_peak_rsp();
  }
}

// optional .RandEventRsp.CmdCardOperRes.MoveCmd move_cmd = 4;
inline bool RandEventRsp_CmdCardOperRes::has_move_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandEventRsp_CmdCardOperRes::set_has_move_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandEventRsp_CmdCardOperRes::clear_has_move_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandEventRsp_CmdCardOperRes::clear_move_cmd() {
  if (move_cmd_ != NULL) move_cmd_->::RandEventRsp_CmdCardOperRes_MoveCmd::Clear();
  clear_has_move_cmd();
}
inline const ::RandEventRsp_CmdCardOperRes_MoveCmd& RandEventRsp_CmdCardOperRes::move_cmd() const {
  return move_cmd_ != NULL ? *move_cmd_ : *default_instance_->move_cmd_;
}
inline ::RandEventRsp_CmdCardOperRes_MoveCmd* RandEventRsp_CmdCardOperRes::mutable_move_cmd() {
  set_has_move_cmd();
  if (move_cmd_ == NULL) move_cmd_ = new ::RandEventRsp_CmdCardOperRes_MoveCmd;
  return move_cmd_;
}
inline ::RandEventRsp_CmdCardOperRes_MoveCmd* RandEventRsp_CmdCardOperRes::release_move_cmd() {
  clear_has_move_cmd();
  ::RandEventRsp_CmdCardOperRes_MoveCmd* temp = move_cmd_;
  move_cmd_ = NULL;
  return temp;
}
inline void RandEventRsp_CmdCardOperRes::set_allocated_move_cmd(::RandEventRsp_CmdCardOperRes_MoveCmd* move_cmd) {
  delete move_cmd_;
  move_cmd_ = move_cmd;
  if (move_cmd) {
    set_has_move_cmd();
  } else {
    clear_has_move_cmd();
  }
}

// -------------------------------------------------------------------

// RandEventRsp_AttackOperRes_ChangeCityRsp

// required int32 my_city_index = 1;
inline bool RandEventRsp_AttackOperRes_ChangeCityRsp::has_my_city_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_has_my_city_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_has_my_city_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_my_city_index() {
  my_city_index_ = 0;
  clear_has_my_city_index();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_ChangeCityRsp::my_city_index() const {
  return my_city_index_;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_my_city_index(::google::protobuf::int32 value) {
  set_has_my_city_index();
  my_city_index_ = value;
}

// required int32 my_seat_no = 2;
inline bool RandEventRsp_AttackOperRes_ChangeCityRsp::has_my_seat_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_has_my_seat_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_has_my_seat_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_my_seat_no() {
  my_seat_no_ = 0;
  clear_has_my_seat_no();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_ChangeCityRsp::my_seat_no() const {
  return my_seat_no_;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_my_seat_no(::google::protobuf::int32 value) {
  set_has_my_seat_no();
  my_seat_no_ = value;
}

// required int32 he_city_index = 3;
inline bool RandEventRsp_AttackOperRes_ChangeCityRsp::has_he_city_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_has_he_city_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_has_he_city_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_he_city_index() {
  he_city_index_ = 0;
  clear_has_he_city_index();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_ChangeCityRsp::he_city_index() const {
  return he_city_index_;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_he_city_index(::google::protobuf::int32 value) {
  set_has_he_city_index();
  he_city_index_ = value;
}

// required int32 he_seat_no = 4;
inline bool RandEventRsp_AttackOperRes_ChangeCityRsp::has_he_seat_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_has_he_seat_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_has_he_seat_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::clear_he_seat_no() {
  he_seat_no_ = 0;
  clear_has_he_seat_no();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_ChangeCityRsp::he_seat_no() const {
  return he_seat_no_;
}
inline void RandEventRsp_AttackOperRes_ChangeCityRsp::set_he_seat_no(::google::protobuf::int32 value) {
  set_has_he_seat_no();
  he_seat_no_ = value;
}

// -------------------------------------------------------------------

// RandEventRsp_AttackOperRes_EarthQuakeRsp

// required int32 quake_lvl = 1;
inline bool RandEventRsp_AttackOperRes_EarthQuakeRsp::has_quake_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::set_has_quake_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::clear_has_quake_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::clear_quake_lvl() {
  quake_lvl_ = 0;
  clear_has_quake_lvl();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_EarthQuakeRsp::quake_lvl() const {
  return quake_lvl_;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::set_quake_lvl(::google::protobuf::int32 value) {
  set_has_quake_lvl();
  quake_lvl_ = value;
}

// required int32 attacked_city = 2;
inline bool RandEventRsp_AttackOperRes_EarthQuakeRsp::has_attacked_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::set_has_attacked_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::clear_has_attacked_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::clear_attacked_city() {
  attacked_city_ = 0;
  clear_has_attacked_city();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_EarthQuakeRsp::attacked_city() const {
  return attacked_city_;
}
inline void RandEventRsp_AttackOperRes_EarthQuakeRsp::set_attacked_city(::google::protobuf::int32 value) {
  set_has_attacked_city();
  attacked_city_ = value;
}

// -------------------------------------------------------------------

// RandEventRsp_AttackOperRes_UfoRsp

// required int32 quake_lvl = 1;
inline bool RandEventRsp_AttackOperRes_UfoRsp::has_quake_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::set_has_quake_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::clear_has_quake_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::clear_quake_lvl() {
  quake_lvl_ = 0;
  clear_has_quake_lvl();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_UfoRsp::quake_lvl() const {
  return quake_lvl_;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::set_quake_lvl(::google::protobuf::int32 value) {
  set_has_quake_lvl();
  quake_lvl_ = value;
}

// required int32 attacked_city = 2;
inline bool RandEventRsp_AttackOperRes_UfoRsp::has_attacked_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::set_has_attacked_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::clear_has_attacked_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::clear_attacked_city() {
  attacked_city_ = 0;
  clear_has_attacked_city();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_UfoRsp::attacked_city() const {
  return attacked_city_;
}
inline void RandEventRsp_AttackOperRes_UfoRsp::set_attacked_city(::google::protobuf::int32 value) {
  set_has_attacked_city();
  attacked_city_ = value;
}

// -------------------------------------------------------------------

// RandEventRsp_AttackOperRes_RecoveryInfo

// required int32 seat_id = 1;
inline bool RandEventRsp_AttackOperRes_RecoveryInfo::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_RecoveryInfo::seat_id() const {
  return seat_id_;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// required int32 card_type = 2;
inline bool RandEventRsp_AttackOperRes_RecoveryInfo::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_RecoveryInfo::card_type() const {
  return card_type_;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// required int32 attacked_city = 3;
inline bool RandEventRsp_AttackOperRes_RecoveryInfo::has_attacked_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::set_has_attacked_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::clear_has_attacked_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::clear_attacked_city() {
  attacked_city_ = 0;
  clear_has_attacked_city();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes_RecoveryInfo::attacked_city() const {
  return attacked_city_;
}
inline void RandEventRsp_AttackOperRes_RecoveryInfo::set_attacked_city(::google::protobuf::int32 value) {
  set_has_attacked_city();
  attacked_city_ = value;
}

// -------------------------------------------------------------------

// RandEventRsp_AttackOperRes

// repeated int32 attacked_city = 1;
inline int RandEventRsp_AttackOperRes::attacked_city_size() const {
  return attacked_city_.size();
}
inline void RandEventRsp_AttackOperRes::clear_attacked_city() {
  attacked_city_.Clear();
}
inline ::google::protobuf::int32 RandEventRsp_AttackOperRes::attacked_city(int index) const {
  return attacked_city_.Get(index);
}
inline void RandEventRsp_AttackOperRes::set_attacked_city(int index, ::google::protobuf::int32 value) {
  attacked_city_.Set(index, value);
}
inline void RandEventRsp_AttackOperRes::add_attacked_city(::google::protobuf::int32 value) {
  attacked_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandEventRsp_AttackOperRes::attacked_city() const {
  return attacked_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandEventRsp_AttackOperRes::mutable_attacked_city() {
  return &attacked_city_;
}

// optional .RandEventRsp.AttackOperRes.ChangeCityRsp change_city_rsp = 2;
inline bool RandEventRsp_AttackOperRes::has_change_city_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp_AttackOperRes::set_has_change_city_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp_AttackOperRes::clear_has_change_city_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp_AttackOperRes::clear_change_city_rsp() {
  if (change_city_rsp_ != NULL) change_city_rsp_->::RandEventRsp_AttackOperRes_ChangeCityRsp::Clear();
  clear_has_change_city_rsp();
}
inline const ::RandEventRsp_AttackOperRes_ChangeCityRsp& RandEventRsp_AttackOperRes::change_city_rsp() const {
  return change_city_rsp_ != NULL ? *change_city_rsp_ : *default_instance_->change_city_rsp_;
}
inline ::RandEventRsp_AttackOperRes_ChangeCityRsp* RandEventRsp_AttackOperRes::mutable_change_city_rsp() {
  set_has_change_city_rsp();
  if (change_city_rsp_ == NULL) change_city_rsp_ = new ::RandEventRsp_AttackOperRes_ChangeCityRsp;
  return change_city_rsp_;
}
inline ::RandEventRsp_AttackOperRes_ChangeCityRsp* RandEventRsp_AttackOperRes::release_change_city_rsp() {
  clear_has_change_city_rsp();
  ::RandEventRsp_AttackOperRes_ChangeCityRsp* temp = change_city_rsp_;
  change_city_rsp_ = NULL;
  return temp;
}
inline void RandEventRsp_AttackOperRes::set_allocated_change_city_rsp(::RandEventRsp_AttackOperRes_ChangeCityRsp* change_city_rsp) {
  delete change_city_rsp_;
  change_city_rsp_ = change_city_rsp;
  if (change_city_rsp) {
    set_has_change_city_rsp();
  } else {
    clear_has_change_city_rsp();
  }
}

// optional .RandEventRsp.AttackOperRes.EarthQuakeRsp quake_rsp = 3;
inline bool RandEventRsp_AttackOperRes::has_quake_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventRsp_AttackOperRes::set_has_quake_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventRsp_AttackOperRes::clear_has_quake_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventRsp_AttackOperRes::clear_quake_rsp() {
  if (quake_rsp_ != NULL) quake_rsp_->::RandEventRsp_AttackOperRes_EarthQuakeRsp::Clear();
  clear_has_quake_rsp();
}
inline const ::RandEventRsp_AttackOperRes_EarthQuakeRsp& RandEventRsp_AttackOperRes::quake_rsp() const {
  return quake_rsp_ != NULL ? *quake_rsp_ : *default_instance_->quake_rsp_;
}
inline ::RandEventRsp_AttackOperRes_EarthQuakeRsp* RandEventRsp_AttackOperRes::mutable_quake_rsp() {
  set_has_quake_rsp();
  if (quake_rsp_ == NULL) quake_rsp_ = new ::RandEventRsp_AttackOperRes_EarthQuakeRsp;
  return quake_rsp_;
}
inline ::RandEventRsp_AttackOperRes_EarthQuakeRsp* RandEventRsp_AttackOperRes::release_quake_rsp() {
  clear_has_quake_rsp();
  ::RandEventRsp_AttackOperRes_EarthQuakeRsp* temp = quake_rsp_;
  quake_rsp_ = NULL;
  return temp;
}
inline void RandEventRsp_AttackOperRes::set_allocated_quake_rsp(::RandEventRsp_AttackOperRes_EarthQuakeRsp* quake_rsp) {
  delete quake_rsp_;
  quake_rsp_ = quake_rsp;
  if (quake_rsp) {
    set_has_quake_rsp();
  } else {
    clear_has_quake_rsp();
  }
}

// repeated .RandEventRsp.AttackOperRes.UfoRsp ufo_rsp = 4;
inline int RandEventRsp_AttackOperRes::ufo_rsp_size() const {
  return ufo_rsp_.size();
}
inline void RandEventRsp_AttackOperRes::clear_ufo_rsp() {
  ufo_rsp_.Clear();
}
inline const ::RandEventRsp_AttackOperRes_UfoRsp& RandEventRsp_AttackOperRes::ufo_rsp(int index) const {
  return ufo_rsp_.Get(index);
}
inline ::RandEventRsp_AttackOperRes_UfoRsp* RandEventRsp_AttackOperRes::mutable_ufo_rsp(int index) {
  return ufo_rsp_.Mutable(index);
}
inline ::RandEventRsp_AttackOperRes_UfoRsp* RandEventRsp_AttackOperRes::add_ufo_rsp() {
  return ufo_rsp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RandEventRsp_AttackOperRes_UfoRsp >&
RandEventRsp_AttackOperRes::ufo_rsp() const {
  return ufo_rsp_;
}
inline ::google::protobuf::RepeatedPtrField< ::RandEventRsp_AttackOperRes_UfoRsp >*
RandEventRsp_AttackOperRes::mutable_ufo_rsp() {
  return &ufo_rsp_;
}

// optional .RandEventRsp.AttackOperRes.RecoveryInfo recovery_info = 5;
inline bool RandEventRsp_AttackOperRes::has_recovery_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RandEventRsp_AttackOperRes::set_has_recovery_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RandEventRsp_AttackOperRes::clear_has_recovery_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RandEventRsp_AttackOperRes::clear_recovery_info() {
  if (recovery_info_ != NULL) recovery_info_->::RandEventRsp_AttackOperRes_RecoveryInfo::Clear();
  clear_has_recovery_info();
}
inline const ::RandEventRsp_AttackOperRes_RecoveryInfo& RandEventRsp_AttackOperRes::recovery_info() const {
  return recovery_info_ != NULL ? *recovery_info_ : *default_instance_->recovery_info_;
}
inline ::RandEventRsp_AttackOperRes_RecoveryInfo* RandEventRsp_AttackOperRes::mutable_recovery_info() {
  set_has_recovery_info();
  if (recovery_info_ == NULL) recovery_info_ = new ::RandEventRsp_AttackOperRes_RecoveryInfo;
  return recovery_info_;
}
inline ::RandEventRsp_AttackOperRes_RecoveryInfo* RandEventRsp_AttackOperRes::release_recovery_info() {
  clear_has_recovery_info();
  ::RandEventRsp_AttackOperRes_RecoveryInfo* temp = recovery_info_;
  recovery_info_ = NULL;
  return temp;
}
inline void RandEventRsp_AttackOperRes::set_allocated_recovery_info(::RandEventRsp_AttackOperRes_RecoveryInfo* recovery_info) {
  delete recovery_info_;
  recovery_info_ = recovery_info;
  if (recovery_info) {
    set_has_recovery_info();
  } else {
    clear_has_recovery_info();
  }
}

// -------------------------------------------------------------------

// RandEventRsp

// required int32 card_type = 1;
inline bool RandEventRsp::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventRsp::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventRsp::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventRsp::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 RandEventRsp::card_type() const {
  return card_type_;
}
inline void RandEventRsp::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// required int32 event_id = 2;
inline bool RandEventRsp::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventRsp::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventRsp::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventRsp::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 RandEventRsp::event_id() const {
  return event_id_;
}
inline void RandEventRsp::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional .RandEventRsp.CmdCardOperRes cmd_card_oper_res = 3;
inline bool RandEventRsp::has_cmd_card_oper_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventRsp::set_has_cmd_card_oper_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventRsp::clear_has_cmd_card_oper_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventRsp::clear_cmd_card_oper_res() {
  if (cmd_card_oper_res_ != NULL) cmd_card_oper_res_->::RandEventRsp_CmdCardOperRes::Clear();
  clear_has_cmd_card_oper_res();
}
inline const ::RandEventRsp_CmdCardOperRes& RandEventRsp::cmd_card_oper_res() const {
  return cmd_card_oper_res_ != NULL ? *cmd_card_oper_res_ : *default_instance_->cmd_card_oper_res_;
}
inline ::RandEventRsp_CmdCardOperRes* RandEventRsp::mutable_cmd_card_oper_res() {
  set_has_cmd_card_oper_res();
  if (cmd_card_oper_res_ == NULL) cmd_card_oper_res_ = new ::RandEventRsp_CmdCardOperRes;
  return cmd_card_oper_res_;
}
inline ::RandEventRsp_CmdCardOperRes* RandEventRsp::release_cmd_card_oper_res() {
  clear_has_cmd_card_oper_res();
  ::RandEventRsp_CmdCardOperRes* temp = cmd_card_oper_res_;
  cmd_card_oper_res_ = NULL;
  return temp;
}
inline void RandEventRsp::set_allocated_cmd_card_oper_res(::RandEventRsp_CmdCardOperRes* cmd_card_oper_res) {
  delete cmd_card_oper_res_;
  cmd_card_oper_res_ = cmd_card_oper_res;
  if (cmd_card_oper_res) {
    set_has_cmd_card_oper_res();
  } else {
    clear_has_cmd_card_oper_res();
  }
}

// optional .RandEventRsp.AttackOperRes attack_card_oper_res = 4;
inline bool RandEventRsp::has_attack_card_oper_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandEventRsp::set_has_attack_card_oper_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandEventRsp::clear_has_attack_card_oper_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandEventRsp::clear_attack_card_oper_res() {
  if (attack_card_oper_res_ != NULL) attack_card_oper_res_->::RandEventRsp_AttackOperRes::Clear();
  clear_has_attack_card_oper_res();
}
inline const ::RandEventRsp_AttackOperRes& RandEventRsp::attack_card_oper_res() const {
  return attack_card_oper_res_ != NULL ? *attack_card_oper_res_ : *default_instance_->attack_card_oper_res_;
}
inline ::RandEventRsp_AttackOperRes* RandEventRsp::mutable_attack_card_oper_res() {
  set_has_attack_card_oper_res();
  if (attack_card_oper_res_ == NULL) attack_card_oper_res_ = new ::RandEventRsp_AttackOperRes;
  return attack_card_oper_res_;
}
inline ::RandEventRsp_AttackOperRes* RandEventRsp::release_attack_card_oper_res() {
  clear_has_attack_card_oper_res();
  ::RandEventRsp_AttackOperRes* temp = attack_card_oper_res_;
  attack_card_oper_res_ = NULL;
  return temp;
}
inline void RandEventRsp::set_allocated_attack_card_oper_res(::RandEventRsp_AttackOperRes* attack_card_oper_res) {
  delete attack_card_oper_res_;
  attack_card_oper_res_ = attack_card_oper_res;
  if (attack_card_oper_res) {
    set_has_attack_card_oper_res();
  } else {
    clear_has_attack_card_oper_res();
  }
}

// repeated .RandEventRsp.IslandInfo island_info = 5;
inline int RandEventRsp::island_info_size() const {
  return island_info_.size();
}
inline void RandEventRsp::clear_island_info() {
  island_info_.Clear();
}
inline const ::RandEventRsp_IslandInfo& RandEventRsp::island_info(int index) const {
  return island_info_.Get(index);
}
inline ::RandEventRsp_IslandInfo* RandEventRsp::mutable_island_info(int index) {
  return island_info_.Mutable(index);
}
inline ::RandEventRsp_IslandInfo* RandEventRsp::add_island_info() {
  return island_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RandEventRsp_IslandInfo >&
RandEventRsp::island_info() const {
  return island_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::RandEventRsp_IslandInfo >*
RandEventRsp::mutable_island_info() {
  return &island_info_;
}

// -------------------------------------------------------------------

// PlayerResult

// required int32 seat_no = 1;
inline bool PlayerResult::has_seat_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerResult::set_has_seat_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerResult::clear_has_seat_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerResult::clear_seat_no() {
  seat_no_ = 0;
  clear_has_seat_no();
}
inline ::google::protobuf::int32 PlayerResult::seat_no() const {
  return seat_no_;
}
inline void PlayerResult::set_seat_no(::google::protobuf::int32 value) {
  set_has_seat_no();
  seat_no_ = value;
}

// required int32 result = 2;
inline bool PlayerResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PlayerResult::result() const {
  return result_;
}
inline void PlayerResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 gold_res = 3;
inline bool PlayerResult::has_gold_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerResult::set_has_gold_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerResult::clear_has_gold_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerResult::clear_gold_res() {
  gold_res_ = 0;
  clear_has_gold_res();
}
inline ::google::protobuf::int32 PlayerResult::gold_res() const {
  return gold_res_;
}
inline void PlayerResult::set_gold_res(::google::protobuf::int32 value) {
  set_has_gold_res();
  gold_res_ = value;
}

// required int32 exp_res = 4;
inline bool PlayerResult::has_exp_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerResult::set_has_exp_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerResult::clear_has_exp_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerResult::clear_exp_res() {
  exp_res_ = 0;
  clear_has_exp_res();
}
inline ::google::protobuf::int32 PlayerResult::exp_res() const {
  return exp_res_;
}
inline void PlayerResult::set_exp_res(::google::protobuf::int32 value) {
  set_has_exp_res();
  exp_res_ = value;
}

// required int32 score_res = 5;
inline bool PlayerResult::has_score_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerResult::set_has_score_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerResult::clear_has_score_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerResult::clear_score_res() {
  score_res_ = 0;
  clear_has_score_res();
}
inline ::google::protobuf::int32 PlayerResult::score_res() const {
  return score_res_;
}
inline void PlayerResult::set_score_res(::google::protobuf::int32 value) {
  set_has_score_res();
  score_res_ = value;
}

// required bool is_mvp = 6;
inline bool PlayerResult::has_is_mvp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerResult::set_has_is_mvp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerResult::clear_has_is_mvp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerResult::clear_is_mvp() {
  is_mvp_ = false;
  clear_has_is_mvp();
}
inline bool PlayerResult::is_mvp() const {
  return is_mvp_;
}
inline void PlayerResult::set_is_mvp(bool value) {
  set_has_is_mvp();
  is_mvp_ = value;
}

// optional int32 win_type = 7;
inline bool PlayerResult::has_win_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerResult::set_has_win_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerResult::clear_has_win_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerResult::clear_win_type() {
  win_type_ = 0;
  clear_has_win_type();
}
inline ::google::protobuf::int32 PlayerResult::win_type() const {
  return win_type_;
}
inline void PlayerResult::set_win_type(::google::protobuf::int32 value) {
  set_has_win_type();
  win_type_ = value;
}

// required int32 lvl_reward = 8;
inline bool PlayerResult::has_lvl_reward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerResult::set_has_lvl_reward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerResult::clear_has_lvl_reward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerResult::clear_lvl_reward() {
  lvl_reward_ = 0;
  clear_has_lvl_reward();
}
inline ::google::protobuf::int32 PlayerResult::lvl_reward() const {
  return lvl_reward_;
}
inline void PlayerResult::set_lvl_reward(::google::protobuf::int32 value) {
  set_has_lvl_reward();
  lvl_reward_ = value;
}

// required int32 can_continue = 9;
inline bool PlayerResult::has_can_continue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerResult::set_has_can_continue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerResult::clear_has_can_continue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerResult::clear_can_continue() {
  can_continue_ = 0;
  clear_has_can_continue();
}
inline ::google::protobuf::int32 PlayerResult::can_continue() const {
  return can_continue_;
}
inline void PlayerResult::set_can_continue(::google::protobuf::int32 value) {
  set_has_can_continue();
  can_continue_ = value;
}

// optional int32 offset_gold_cost = 10;
inline bool PlayerResult::has_offset_gold_cost() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerResult::set_has_offset_gold_cost() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerResult::clear_has_offset_gold_cost() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerResult::clear_offset_gold_cost() {
  offset_gold_cost_ = 0;
  clear_has_offset_gold_cost();
}
inline ::google::protobuf::int32 PlayerResult::offset_gold_cost() const {
  return offset_gold_cost_;
}
inline void PlayerResult::set_offset_gold_cost(::google::protobuf::int32 value) {
  set_has_offset_gold_cost();
  offset_gold_cost_ = value;
}

// -------------------------------------------------------------------

// GridInfo_AttackState

// required int32 state = 1;
inline bool GridInfo_AttackState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridInfo_AttackState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridInfo_AttackState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridInfo_AttackState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GridInfo_AttackState::state() const {
  return state_;
}
inline void GridInfo_AttackState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int32 round = 2;
inline bool GridInfo_AttackState::has_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridInfo_AttackState::set_has_round() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridInfo_AttackState::clear_has_round() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridInfo_AttackState::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 GridInfo_AttackState::round() const {
  return round_;
}
inline void GridInfo_AttackState::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// -------------------------------------------------------------------

// GridInfo

// required int32 index = 1;
inline bool GridInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GridInfo::index() const {
  return index_;
}
inline void GridInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 owner_id = 2;
inline bool GridInfo::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridInfo::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridInfo::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridInfo::clear_owner_id() {
  owner_id_ = 0;
  clear_has_owner_id();
}
inline ::google::protobuf::int32 GridInfo::owner_id() const {
  return owner_id_;
}
inline void GridInfo::set_owner_id(::google::protobuf::int32 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional int32 double = 3;
inline bool GridInfo::has_double_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridInfo::set_has_double_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridInfo::clear_has_double_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridInfo::clear_double_() {
  double__ = 0;
  clear_has_double_();
}
inline ::google::protobuf::int32 GridInfo::double_() const {
  return double__;
}
inline void GridInfo::set_double_(::google::protobuf::int32 value) {
  set_has_double_();
  double__ = value;
}

// repeated int32 builded_info = 4;
inline int GridInfo::builded_info_size() const {
  return builded_info_.size();
}
inline void GridInfo::clear_builded_info() {
  builded_info_.Clear();
}
inline ::google::protobuf::int32 GridInfo::builded_info(int index) const {
  return builded_info_.Get(index);
}
inline void GridInfo::set_builded_info(int index, ::google::protobuf::int32 value) {
  builded_info_.Set(index, value);
}
inline void GridInfo::add_builded_info(::google::protobuf::int32 value) {
  builded_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GridInfo::builded_info() const {
  return builded_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GridInfo::mutable_builded_info() {
  return &builded_info_;
}

// optional int32 lvl = 5;
inline bool GridInfo::has_lvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridInfo::set_has_lvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridInfo::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridInfo::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline ::google::protobuf::int32 GridInfo::lvl() const {
  return lvl_;
}
inline void GridInfo::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional bool hold_peak = 6;
inline bool GridInfo::has_hold_peak() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GridInfo::set_has_hold_peak() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GridInfo::clear_has_hold_peak() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GridInfo::clear_hold_peak() {
  hold_peak_ = false;
  clear_has_hold_peak();
}
inline bool GridInfo::hold_peak() const {
  return hold_peak_;
}
inline void GridInfo::set_hold_peak(bool value) {
  set_has_hold_peak();
  hold_peak_ = value;
}

// optional .GridInfo.AttackState attack_stat = 7;
inline bool GridInfo::has_attack_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GridInfo::set_has_attack_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GridInfo::clear_has_attack_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GridInfo::clear_attack_stat() {
  if (attack_stat_ != NULL) attack_stat_->::GridInfo_AttackState::Clear();
  clear_has_attack_stat();
}
inline const ::GridInfo_AttackState& GridInfo::attack_stat() const {
  return attack_stat_ != NULL ? *attack_stat_ : *default_instance_->attack_stat_;
}
inline ::GridInfo_AttackState* GridInfo::mutable_attack_stat() {
  set_has_attack_stat();
  if (attack_stat_ == NULL) attack_stat_ = new ::GridInfo_AttackState;
  return attack_stat_;
}
inline ::GridInfo_AttackState* GridInfo::release_attack_stat() {
  clear_has_attack_stat();
  ::GridInfo_AttackState* temp = attack_stat_;
  attack_stat_ = NULL;
  return temp;
}
inline void GridInfo::set_allocated_attack_stat(::GridInfo_AttackState* attack_stat) {
  delete attack_stat_;
  attack_stat_ = attack_stat;
  if (attack_stat) {
    set_has_attack_stat();
  } else {
    clear_has_attack_stat();
  }
}

// optional bool is_occupy = 8;
inline bool GridInfo::has_is_occupy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GridInfo::set_has_is_occupy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GridInfo::clear_has_is_occupy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GridInfo::clear_is_occupy() {
  is_occupy_ = false;
  clear_has_is_occupy();
}
inline bool GridInfo::is_occupy() const {
  return is_occupy_;
}
inline void GridInfo::set_is_occupy(bool value) {
  set_has_is_occupy();
  is_occupy_ = value;
}

// optional int32 base_toll = 9;
inline bool GridInfo::has_base_toll() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GridInfo::set_has_base_toll() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GridInfo::clear_has_base_toll() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GridInfo::clear_base_toll() {
  base_toll_ = 0;
  clear_has_base_toll();
}
inline ::google::protobuf::int32 GridInfo::base_toll() const {
  return base_toll_;
}
inline void GridInfo::set_base_toll(::google::protobuf::int32 value) {
  set_has_base_toll();
  base_toll_ = value;
}

// -------------------------------------------------------------------

// PlayerGameInfo

// required int32 rold_id = 1;
inline bool PlayerGameInfo::has_rold_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGameInfo::set_has_rold_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGameInfo::clear_has_rold_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGameInfo::clear_rold_id() {
  rold_id_ = 0;
  clear_has_rold_id();
}
inline ::google::protobuf::int32 PlayerGameInfo::rold_id() const {
  return rold_id_;
}
inline void PlayerGameInfo::set_rold_id(::google::protobuf::int32 value) {
  set_has_rold_id();
  rold_id_ = value;
}

// required int32 position = 2;
inline bool PlayerGameInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGameInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGameInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGameInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 PlayerGameInfo::position() const {
  return position_;
}
inline void PlayerGameInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// required int32 game_money = 3;
inline bool PlayerGameInfo::has_game_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGameInfo::set_has_game_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGameInfo::clear_has_game_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGameInfo::clear_game_money() {
  game_money_ = 0;
  clear_has_game_money();
}
inline ::google::protobuf::int32 PlayerGameInfo::game_money() const {
  return game_money_;
}
inline void PlayerGameInfo::set_game_money(::google::protobuf::int32 value) {
  set_has_game_money();
  game_money_ = value;
}

// -------------------------------------------------------------------

// GameInfoChange

// required int32 seat_id = 1;
inline bool GameInfoChange::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfoChange::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfoChange::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfoChange::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 GameInfoChange::seat_id() const {
  return seat_id_;
}
inline void GameInfoChange::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 estate_change = 2;
inline bool GameInfoChange::has_estate_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfoChange::set_has_estate_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfoChange::clear_has_estate_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfoChange::clear_estate_change() {
  estate_change_ = 0;
  clear_has_estate_change();
}
inline ::google::protobuf::int32 GameInfoChange::estate_change() const {
  return estate_change_;
}
inline void GameInfoChange::set_estate_change(::google::protobuf::int32 value) {
  set_has_estate_change();
  estate_change_ = value;
}

// optional int32 money_change = 3;
inline bool GameInfoChange::has_money_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInfoChange::set_has_money_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInfoChange::clear_has_money_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInfoChange::clear_money_change() {
  money_change_ = 0;
  clear_has_money_change();
}
inline ::google::protobuf::int32 GameInfoChange::money_change() const {
  return money_change_;
}
inline void GameInfoChange::set_money_change(::google::protobuf::int32 value) {
  set_has_money_change();
  money_change_ = value;
}

// optional int32 money_change_type = 4;
inline bool GameInfoChange::has_money_change_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInfoChange::set_has_money_change_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInfoChange::clear_has_money_change_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInfoChange::clear_money_change_type() {
  money_change_type_ = 0;
  clear_has_money_change_type();
}
inline ::google::protobuf::int32 GameInfoChange::money_change_type() const {
  return money_change_type_;
}
inline void GameInfoChange::set_money_change_type(::google::protobuf::int32 value) {
  set_has_money_change_type();
  money_change_type_ = value;
}

// optional int32 rank = 5;
inline bool GameInfoChange::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInfoChange::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInfoChange::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInfoChange::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GameInfoChange::rank() const {
  return rank_;
}
inline void GameInfoChange::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional bool double_toll = 6;
inline bool GameInfoChange::has_double_toll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameInfoChange::set_has_double_toll() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameInfoChange::clear_has_double_toll() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameInfoChange::clear_double_toll() {
  double_toll_ = false;
  clear_has_double_toll();
}
inline bool GameInfoChange::double_toll() const {
  return double_toll_;
}
inline void GameInfoChange::set_double_toll(bool value) {
  set_has_double_toll();
  double_toll_ = value;
}

// optional int32 curr_money = 7;
inline bool GameInfoChange::has_curr_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameInfoChange::set_has_curr_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameInfoChange::clear_has_curr_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameInfoChange::clear_curr_money() {
  curr_money_ = 0;
  clear_has_curr_money();
}
inline ::google::protobuf::int32 GameInfoChange::curr_money() const {
  return curr_money_;
}
inline void GameInfoChange::set_curr_money(::google::protobuf::int32 value) {
  set_has_curr_money();
  curr_money_ = value;
}

// optional int32 curr_estate = 8;
inline bool GameInfoChange::has_curr_estate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameInfoChange::set_has_curr_estate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameInfoChange::clear_has_curr_estate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameInfoChange::clear_curr_estate() {
  curr_estate_ = 0;
  clear_has_curr_estate();
}
inline ::google::protobuf::int32 GameInfoChange::curr_estate() const {
  return curr_estate_;
}
inline void GameInfoChange::set_curr_estate(::google::protobuf::int32 value) {
  set_has_curr_estate();
  curr_estate_ = value;
}

// -------------------------------------------------------------------

// OccupyWarn_LastOccupy

// repeated int32 occupy_list = 1;
inline int OccupyWarn_LastOccupy::occupy_list_size() const {
  return occupy_list_.size();
}
inline void OccupyWarn_LastOccupy::clear_occupy_list() {
  occupy_list_.Clear();
}
inline ::google::protobuf::int32 OccupyWarn_LastOccupy::occupy_list(int index) const {
  return occupy_list_.Get(index);
}
inline void OccupyWarn_LastOccupy::set_occupy_list(int index, ::google::protobuf::int32 value) {
  occupy_list_.Set(index, value);
}
inline void OccupyWarn_LastOccupy::add_occupy_list(::google::protobuf::int32 value) {
  occupy_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OccupyWarn_LastOccupy::occupy_list() const {
  return occupy_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OccupyWarn_LastOccupy::mutable_occupy_list() {
  return &occupy_list_;
}

// optional int32 last_grid = 2;
inline bool OccupyWarn_LastOccupy::has_last_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OccupyWarn_LastOccupy::set_has_last_grid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OccupyWarn_LastOccupy::clear_has_last_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OccupyWarn_LastOccupy::clear_last_grid() {
  last_grid_ = 0;
  clear_has_last_grid();
}
inline ::google::protobuf::int32 OccupyWarn_LastOccupy::last_grid() const {
  return last_grid_;
}
inline void OccupyWarn_LastOccupy::set_last_grid(::google::protobuf::int32 value) {
  set_has_last_grid();
  last_grid_ = value;
}

// -------------------------------------------------------------------

// OccupyWarn_ThreeColor

// repeated int32 occupy_color1_list = 1;
inline int OccupyWarn_ThreeColor::occupy_color1_list_size() const {
  return occupy_color1_list_.size();
}
inline void OccupyWarn_ThreeColor::clear_occupy_color1_list() {
  occupy_color1_list_.Clear();
}
inline ::google::protobuf::int32 OccupyWarn_ThreeColor::occupy_color1_list(int index) const {
  return occupy_color1_list_.Get(index);
}
inline void OccupyWarn_ThreeColor::set_occupy_color1_list(int index, ::google::protobuf::int32 value) {
  occupy_color1_list_.Set(index, value);
}
inline void OccupyWarn_ThreeColor::add_occupy_color1_list(::google::protobuf::int32 value) {
  occupy_color1_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OccupyWarn_ThreeColor::occupy_color1_list() const {
  return occupy_color1_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OccupyWarn_ThreeColor::mutable_occupy_color1_list() {
  return &occupy_color1_list_;
}

// repeated int32 occupy_color2_list = 2;
inline int OccupyWarn_ThreeColor::occupy_color2_list_size() const {
  return occupy_color2_list_.size();
}
inline void OccupyWarn_ThreeColor::clear_occupy_color2_list() {
  occupy_color2_list_.Clear();
}
inline ::google::protobuf::int32 OccupyWarn_ThreeColor::occupy_color2_list(int index) const {
  return occupy_color2_list_.Get(index);
}
inline void OccupyWarn_ThreeColor::set_occupy_color2_list(int index, ::google::protobuf::int32 value) {
  occupy_color2_list_.Set(index, value);
}
inline void OccupyWarn_ThreeColor::add_occupy_color2_list(::google::protobuf::int32 value) {
  occupy_color2_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OccupyWarn_ThreeColor::occupy_color2_list() const {
  return occupy_color2_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OccupyWarn_ThreeColor::mutable_occupy_color2_list() {
  return &occupy_color2_list_;
}

// repeated .OccupyWarn.LastOccupy last_occupy = 3;
inline int OccupyWarn_ThreeColor::last_occupy_size() const {
  return last_occupy_.size();
}
inline void OccupyWarn_ThreeColor::clear_last_occupy() {
  last_occupy_.Clear();
}
inline const ::OccupyWarn_LastOccupy& OccupyWarn_ThreeColor::last_occupy(int index) const {
  return last_occupy_.Get(index);
}
inline ::OccupyWarn_LastOccupy* OccupyWarn_ThreeColor::mutable_last_occupy(int index) {
  return last_occupy_.Mutable(index);
}
inline ::OccupyWarn_LastOccupy* OccupyWarn_ThreeColor::add_last_occupy() {
  return last_occupy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OccupyWarn_LastOccupy >&
OccupyWarn_ThreeColor::last_occupy() const {
  return last_occupy_;
}
inline ::google::protobuf::RepeatedPtrField< ::OccupyWarn_LastOccupy >*
OccupyWarn_ThreeColor::mutable_last_occupy() {
  return &last_occupy_;
}

// -------------------------------------------------------------------

// OccupyWarn

// required int32 warn_type = 1;
inline bool OccupyWarn::has_warn_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OccupyWarn::set_has_warn_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OccupyWarn::clear_has_warn_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OccupyWarn::clear_warn_type() {
  warn_type_ = 0;
  clear_has_warn_type();
}
inline ::google::protobuf::int32 OccupyWarn::warn_type() const {
  return warn_type_;
}
inline void OccupyWarn::set_warn_type(::google::protobuf::int32 value) {
  set_has_warn_type();
  warn_type_ = value;
}

// required int32 warn_flag = 2;
inline bool OccupyWarn::has_warn_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OccupyWarn::set_has_warn_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OccupyWarn::clear_has_warn_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OccupyWarn::clear_warn_flag() {
  warn_flag_ = 0;
  clear_has_warn_flag();
}
inline ::google::protobuf::int32 OccupyWarn::warn_flag() const {
  return warn_flag_;
}
inline void OccupyWarn::set_warn_flag(::google::protobuf::int32 value) {
  set_has_warn_flag();
  warn_flag_ = value;
}

// optional .OccupyWarn.ThreeColor three_color_occupy = 3;
inline bool OccupyWarn::has_three_color_occupy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OccupyWarn::set_has_three_color_occupy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OccupyWarn::clear_has_three_color_occupy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OccupyWarn::clear_three_color_occupy() {
  if (three_color_occupy_ != NULL) three_color_occupy_->::OccupyWarn_ThreeColor::Clear();
  clear_has_three_color_occupy();
}
inline const ::OccupyWarn_ThreeColor& OccupyWarn::three_color_occupy() const {
  return three_color_occupy_ != NULL ? *three_color_occupy_ : *default_instance_->three_color_occupy_;
}
inline ::OccupyWarn_ThreeColor* OccupyWarn::mutable_three_color_occupy() {
  set_has_three_color_occupy();
  if (three_color_occupy_ == NULL) three_color_occupy_ = new ::OccupyWarn_ThreeColor;
  return three_color_occupy_;
}
inline ::OccupyWarn_ThreeColor* OccupyWarn::release_three_color_occupy() {
  clear_has_three_color_occupy();
  ::OccupyWarn_ThreeColor* temp = three_color_occupy_;
  three_color_occupy_ = NULL;
  return temp;
}
inline void OccupyWarn::set_allocated_three_color_occupy(::OccupyWarn_ThreeColor* three_color_occupy) {
  delete three_color_occupy_;
  three_color_occupy_ = three_color_occupy;
  if (three_color_occupy) {
    set_has_three_color_occupy();
  } else {
    clear_has_three_color_occupy();
  }
}

// optional .OccupyWarn.LastOccupy row_occupy = 4;
inline bool OccupyWarn::has_row_occupy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OccupyWarn::set_has_row_occupy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OccupyWarn::clear_has_row_occupy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OccupyWarn::clear_row_occupy() {
  if (row_occupy_ != NULL) row_occupy_->::OccupyWarn_LastOccupy::Clear();
  clear_has_row_occupy();
}
inline const ::OccupyWarn_LastOccupy& OccupyWarn::row_occupy() const {
  return row_occupy_ != NULL ? *row_occupy_ : *default_instance_->row_occupy_;
}
inline ::OccupyWarn_LastOccupy* OccupyWarn::mutable_row_occupy() {
  set_has_row_occupy();
  if (row_occupy_ == NULL) row_occupy_ = new ::OccupyWarn_LastOccupy;
  return row_occupy_;
}
inline ::OccupyWarn_LastOccupy* OccupyWarn::release_row_occupy() {
  clear_has_row_occupy();
  ::OccupyWarn_LastOccupy* temp = row_occupy_;
  row_occupy_ = NULL;
  return temp;
}
inline void OccupyWarn::set_allocated_row_occupy(::OccupyWarn_LastOccupy* row_occupy) {
  delete row_occupy_;
  row_occupy_ = row_occupy;
  if (row_occupy) {
    set_has_row_occupy();
  } else {
    clear_has_row_occupy();
  }
}

// optional .OccupyWarn.LastOccupy sightsee_occupy = 5;
inline bool OccupyWarn::has_sightsee_occupy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OccupyWarn::set_has_sightsee_occupy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OccupyWarn::clear_has_sightsee_occupy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OccupyWarn::clear_sightsee_occupy() {
  if (sightsee_occupy_ != NULL) sightsee_occupy_->::OccupyWarn_LastOccupy::Clear();
  clear_has_sightsee_occupy();
}
inline const ::OccupyWarn_LastOccupy& OccupyWarn::sightsee_occupy() const {
  return sightsee_occupy_ != NULL ? *sightsee_occupy_ : *default_instance_->sightsee_occupy_;
}
inline ::OccupyWarn_LastOccupy* OccupyWarn::mutable_sightsee_occupy() {
  set_has_sightsee_occupy();
  if (sightsee_occupy_ == NULL) sightsee_occupy_ = new ::OccupyWarn_LastOccupy;
  return sightsee_occupy_;
}
inline ::OccupyWarn_LastOccupy* OccupyWarn::release_sightsee_occupy() {
  clear_has_sightsee_occupy();
  ::OccupyWarn_LastOccupy* temp = sightsee_occupy_;
  sightsee_occupy_ = NULL;
  return temp;
}
inline void OccupyWarn::set_allocated_sightsee_occupy(::OccupyWarn_LastOccupy* sightsee_occupy) {
  delete sightsee_occupy_;
  sightsee_occupy_ = sightsee_occupy;
  if (sightsee_occupy) {
    set_has_sightsee_occupy();
  } else {
    clear_has_sightsee_occupy();
  }
}

// repeated int32 winner_list = 6;
inline int OccupyWarn::winner_list_size() const {
  return winner_list_.size();
}
inline void OccupyWarn::clear_winner_list() {
  winner_list_.Clear();
}
inline ::google::protobuf::int32 OccupyWarn::winner_list(int index) const {
  return winner_list_.Get(index);
}
inline void OccupyWarn::set_winner_list(int index, ::google::protobuf::int32 value) {
  winner_list_.Set(index, value);
}
inline void OccupyWarn::add_winner_list(::google::protobuf::int32 value) {
  winner_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OccupyWarn::winner_list() const {
  return winner_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OccupyWarn::mutable_winner_list() {
  return &winner_list_;
}

// -------------------------------------------------------------------

// NextOper

// required int32 next_ctrl_seatid = 1;
inline bool NextOper::has_next_ctrl_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NextOper::set_has_next_ctrl_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NextOper::clear_has_next_ctrl_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NextOper::clear_next_ctrl_seatid() {
  next_ctrl_seatid_ = 0;
  clear_has_next_ctrl_seatid();
}
inline ::google::protobuf::int32 NextOper::next_ctrl_seatid() const {
  return next_ctrl_seatid_;
}
inline void NextOper::set_next_ctrl_seatid(::google::protobuf::int32 value) {
  set_has_next_ctrl_seatid();
  next_ctrl_seatid_ = value;
}

// required int32 next_ctrl_oper = 2;
inline bool NextOper::has_next_ctrl_oper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NextOper::set_has_next_ctrl_oper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NextOper::clear_has_next_ctrl_oper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NextOper::clear_next_ctrl_oper() {
  next_ctrl_oper_ = 0;
  clear_has_next_ctrl_oper();
}
inline ::google::protobuf::int32 NextOper::next_ctrl_oper() const {
  return next_ctrl_oper_;
}
inline void NextOper::set_next_ctrl_oper(::google::protobuf::int32 value) {
  set_has_next_ctrl_oper();
  next_ctrl_oper_ = value;
}

// optional int32 esc_island_oper = 3;
inline bool NextOper::has_esc_island_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NextOper::set_has_esc_island_oper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NextOper::clear_has_esc_island_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NextOper::clear_esc_island_oper() {
  esc_island_oper_ = 0;
  clear_has_esc_island_oper();
}
inline ::google::protobuf::int32 NextOper::esc_island_oper() const {
  return esc_island_oper_;
}
inline void NextOper::set_esc_island_oper(::google::protobuf::int32 value) {
  set_has_esc_island_oper();
  esc_island_oper_ = value;
}

// optional int32 esc_island_cost = 4;
inline bool NextOper::has_esc_island_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NextOper::set_has_esc_island_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NextOper::clear_has_esc_island_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NextOper::clear_esc_island_cost() {
  esc_island_cost_ = 0;
  clear_has_esc_island_cost();
}
inline ::google::protobuf::int32 NextOper::esc_island_cost() const {
  return esc_island_cost_;
}
inline void NextOper::set_esc_island_cost(::google::protobuf::int32 value) {
  set_has_esc_island_cost();
  esc_island_cost_ = value;
}

// repeated int32 can_fly_city = 5;
inline int NextOper::can_fly_city_size() const {
  return can_fly_city_.size();
}
inline void NextOper::clear_can_fly_city() {
  can_fly_city_.Clear();
}
inline ::google::protobuf::int32 NextOper::can_fly_city(int index) const {
  return can_fly_city_.Get(index);
}
inline void NextOper::set_can_fly_city(int index, ::google::protobuf::int32 value) {
  can_fly_city_.Set(index, value);
}
inline void NextOper::add_can_fly_city(::google::protobuf::int32 value) {
  can_fly_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NextOper::can_fly_city() const {
  return can_fly_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NextOper::mutable_can_fly_city() {
  return &can_fly_city_;
}

// optional bool no_money_fly = 6;
inline bool NextOper::has_no_money_fly() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NextOper::set_has_no_money_fly() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NextOper::clear_has_no_money_fly() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NextOper::clear_no_money_fly() {
  no_money_fly_ = false;
  clear_has_no_money_fly();
}
inline bool NextOper::no_money_fly() const {
  return no_money_fly_;
}
inline void NextOper::set_no_money_fly(bool value) {
  set_has_no_money_fly();
  no_money_fly_ = value;
}

// -------------------------------------------------------------------

// S2C_SenceInfo

// required int32 stage = 1;
inline bool S2C_SenceInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_SenceInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_SenceInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_SenceInfo::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 S2C_SenceInfo::stage() const {
  return stage_;
}
inline void S2C_SenceInfo::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// optional bool is_reconnect = 2;
inline bool S2C_SenceInfo::has_is_reconnect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_SenceInfo::set_has_is_reconnect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_SenceInfo::clear_has_is_reconnect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_SenceInfo::clear_is_reconnect() {
  is_reconnect_ = false;
  clear_has_is_reconnect();
}
inline bool S2C_SenceInfo::is_reconnect() const {
  return is_reconnect_;
}
inline void S2C_SenceInfo::set_is_reconnect(bool value) {
  set_has_is_reconnect();
  is_reconnect_ = value;
}

// optional .NextOper next_oper = 3;
inline bool S2C_SenceInfo::has_next_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_SenceInfo::set_has_next_oper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_SenceInfo::clear_has_next_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_SenceInfo::clear_next_oper() {
  if (next_oper_ != NULL) next_oper_->::NextOper::Clear();
  clear_has_next_oper();
}
inline const ::NextOper& S2C_SenceInfo::next_oper() const {
  return next_oper_ != NULL ? *next_oper_ : *default_instance_->next_oper_;
}
inline ::NextOper* S2C_SenceInfo::mutable_next_oper() {
  set_has_next_oper();
  if (next_oper_ == NULL) next_oper_ = new ::NextOper;
  return next_oper_;
}
inline ::NextOper* S2C_SenceInfo::release_next_oper() {
  clear_has_next_oper();
  ::NextOper* temp = next_oper_;
  next_oper_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_next_oper(::NextOper* next_oper) {
  delete next_oper_;
  next_oper_ = next_oper;
  if (next_oper) {
    set_has_next_oper();
  } else {
    clear_has_next_oper();
  }
}

// optional .SelectedFirstCard select_card = 5;
inline bool S2C_SenceInfo::has_select_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2C_SenceInfo::set_has_select_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2C_SenceInfo::clear_has_select_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2C_SenceInfo::clear_select_card() {
  if (select_card_ != NULL) select_card_->::SelectedFirstCard::Clear();
  clear_has_select_card();
}
inline const ::SelectedFirstCard& S2C_SenceInfo::select_card() const {
  return select_card_ != NULL ? *select_card_ : *default_instance_->select_card_;
}
inline ::SelectedFirstCard* S2C_SenceInfo::mutable_select_card() {
  set_has_select_card();
  if (select_card_ == NULL) select_card_ = new ::SelectedFirstCard;
  return select_card_;
}
inline ::SelectedFirstCard* S2C_SenceInfo::release_select_card() {
  clear_has_select_card();
  ::SelectedFirstCard* temp = select_card_;
  select_card_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_select_card(::SelectedFirstCard* select_card) {
  delete select_card_;
  select_card_ = select_card;
  if (select_card) {
    set_has_select_card();
  } else {
    clear_has_select_card();
  }
}

// repeated int32 cere_city = 6;
inline int S2C_SenceInfo::cere_city_size() const {
  return cere_city_.size();
}
inline void S2C_SenceInfo::clear_cere_city() {
  cere_city_.Clear();
}
inline ::google::protobuf::int32 S2C_SenceInfo::cere_city(int index) const {
  return cere_city_.Get(index);
}
inline void S2C_SenceInfo::set_cere_city(int index, ::google::protobuf::int32 value) {
  cere_city_.Set(index, value);
}
inline void S2C_SenceInfo::add_cere_city(::google::protobuf::int32 value) {
  cere_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2C_SenceInfo::cere_city() const {
  return cere_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2C_SenceInfo::mutable_cere_city() {
  return &cere_city_;
}

// optional .FirstCardInfo first_card = 7;
inline bool S2C_SenceInfo::has_first_card() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2C_SenceInfo::set_has_first_card() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2C_SenceInfo::clear_has_first_card() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2C_SenceInfo::clear_first_card() {
  if (first_card_ != NULL) first_card_->::FirstCardInfo::Clear();
  clear_has_first_card();
}
inline const ::FirstCardInfo& S2C_SenceInfo::first_card() const {
  return first_card_ != NULL ? *first_card_ : *default_instance_->first_card_;
}
inline ::FirstCardInfo* S2C_SenceInfo::mutable_first_card() {
  set_has_first_card();
  if (first_card_ == NULL) first_card_ = new ::FirstCardInfo;
  return first_card_;
}
inline ::FirstCardInfo* S2C_SenceInfo::release_first_card() {
  clear_has_first_card();
  ::FirstCardInfo* temp = first_card_;
  first_card_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_first_card(::FirstCardInfo* first_card) {
  delete first_card_;
  first_card_ = first_card;
  if (first_card) {
    set_has_first_card();
  } else {
    clear_has_first_card();
  }
}

// optional .DicingResult dicing_res = 8;
inline bool S2C_SenceInfo::has_dicing_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2C_SenceInfo::set_has_dicing_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2C_SenceInfo::clear_has_dicing_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2C_SenceInfo::clear_dicing_res() {
  if (dicing_res_ != NULL) dicing_res_->::DicingResult::Clear();
  clear_has_dicing_res();
}
inline const ::DicingResult& S2C_SenceInfo::dicing_res() const {
  return dicing_res_ != NULL ? *dicing_res_ : *default_instance_->dicing_res_;
}
inline ::DicingResult* S2C_SenceInfo::mutable_dicing_res() {
  set_has_dicing_res();
  if (dicing_res_ == NULL) dicing_res_ = new ::DicingResult;
  return dicing_res_;
}
inline ::DicingResult* S2C_SenceInfo::release_dicing_res() {
  clear_has_dicing_res();
  ::DicingResult* temp = dicing_res_;
  dicing_res_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_dicing_res(::DicingResult* dicing_res) {
  delete dicing_res_;
  dicing_res_ = dicing_res;
  if (dicing_res) {
    set_has_dicing_res();
  } else {
    clear_has_dicing_res();
  }
}

// optional .ActionResult action_res = 9;
inline bool S2C_SenceInfo::has_action_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S2C_SenceInfo::set_has_action_res() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S2C_SenceInfo::clear_has_action_res() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S2C_SenceInfo::clear_action_res() {
  if (action_res_ != NULL) action_res_->::ActionResult::Clear();
  clear_has_action_res();
}
inline const ::ActionResult& S2C_SenceInfo::action_res() const {
  return action_res_ != NULL ? *action_res_ : *default_instance_->action_res_;
}
inline ::ActionResult* S2C_SenceInfo::mutable_action_res() {
  set_has_action_res();
  if (action_res_ == NULL) action_res_ = new ::ActionResult;
  return action_res_;
}
inline ::ActionResult* S2C_SenceInfo::release_action_res() {
  clear_has_action_res();
  ::ActionResult* temp = action_res_;
  action_res_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_action_res(::ActionResult* action_res) {
  delete action_res_;
  action_res_ = action_res;
  if (action_res) {
    set_has_action_res();
  } else {
    clear_has_action_res();
  }
}

// repeated .GameInfoChange info_change = 10;
inline int S2C_SenceInfo::info_change_size() const {
  return info_change_.size();
}
inline void S2C_SenceInfo::clear_info_change() {
  info_change_.Clear();
}
inline const ::GameInfoChange& S2C_SenceInfo::info_change(int index) const {
  return info_change_.Get(index);
}
inline ::GameInfoChange* S2C_SenceInfo::mutable_info_change(int index) {
  return info_change_.Mutable(index);
}
inline ::GameInfoChange* S2C_SenceInfo::add_info_change() {
  return info_change_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameInfoChange >&
S2C_SenceInfo::info_change() const {
  return info_change_;
}
inline ::google::protobuf::RepeatedPtrField< ::GameInfoChange >*
S2C_SenceInfo::mutable_info_change() {
  return &info_change_;
}

// repeated .GridInfo grid_info = 11;
inline int S2C_SenceInfo::grid_info_size() const {
  return grid_info_.size();
}
inline void S2C_SenceInfo::clear_grid_info() {
  grid_info_.Clear();
}
inline const ::GridInfo& S2C_SenceInfo::grid_info(int index) const {
  return grid_info_.Get(index);
}
inline ::GridInfo* S2C_SenceInfo::mutable_grid_info(int index) {
  return grid_info_.Mutable(index);
}
inline ::GridInfo* S2C_SenceInfo::add_grid_info() {
  return grid_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GridInfo >&
S2C_SenceInfo::grid_info() const {
  return grid_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::GridInfo >*
S2C_SenceInfo::mutable_grid_info() {
  return &grid_info_;
}

// repeated .OccupyWarn occupy_warn = 12;
inline int S2C_SenceInfo::occupy_warn_size() const {
  return occupy_warn_.size();
}
inline void S2C_SenceInfo::clear_occupy_warn() {
  occupy_warn_.Clear();
}
inline const ::OccupyWarn& S2C_SenceInfo::occupy_warn(int index) const {
  return occupy_warn_.Get(index);
}
inline ::OccupyWarn* S2C_SenceInfo::mutable_occupy_warn(int index) {
  return occupy_warn_.Mutable(index);
}
inline ::OccupyWarn* S2C_SenceInfo::add_occupy_warn() {
  return occupy_warn_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OccupyWarn >&
S2C_SenceInfo::occupy_warn() const {
  return occupy_warn_;
}
inline ::google::protobuf::RepeatedPtrField< ::OccupyWarn >*
S2C_SenceInfo::mutable_occupy_warn() {
  return &occupy_warn_;
}

// optional .AllPlayerInfo player_info = 13;
inline bool S2C_SenceInfo::has_player_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void S2C_SenceInfo::set_has_player_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void S2C_SenceInfo::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void S2C_SenceInfo::clear_player_info() {
  if (player_info_ != NULL) player_info_->::AllPlayerInfo::Clear();
  clear_has_player_info();
}
inline const ::AllPlayerInfo& S2C_SenceInfo::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::AllPlayerInfo* S2C_SenceInfo::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::AllPlayerInfo;
  return player_info_;
}
inline ::AllPlayerInfo* S2C_SenceInfo::release_player_info() {
  clear_has_player_info();
  ::AllPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_player_info(::AllPlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated .PlayerResult game_res = 14;
inline int S2C_SenceInfo::game_res_size() const {
  return game_res_.size();
}
inline void S2C_SenceInfo::clear_game_res() {
  game_res_.Clear();
}
inline const ::PlayerResult& S2C_SenceInfo::game_res(int index) const {
  return game_res_.Get(index);
}
inline ::PlayerResult* S2C_SenceInfo::mutable_game_res(int index) {
  return game_res_.Mutable(index);
}
inline ::PlayerResult* S2C_SenceInfo::add_game_res() {
  return game_res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerResult >&
S2C_SenceInfo::game_res() const {
  return game_res_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerResult >*
S2C_SenceInfo::mutable_game_res() {
  return &game_res_;
}

// optional .RoomInfo room_info = 15;
inline bool S2C_SenceInfo::has_room_info() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void S2C_SenceInfo::set_has_room_info() {
  _has_bits_[0] |= 0x00002000u;
}
inline void S2C_SenceInfo::clear_has_room_info() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void S2C_SenceInfo::clear_room_info() {
  if (room_info_ != NULL) room_info_->::RoomInfo::Clear();
  clear_has_room_info();
}
inline const ::RoomInfo& S2C_SenceInfo::room_info() const {
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
}
inline ::RoomInfo* S2C_SenceInfo::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) room_info_ = new ::RoomInfo;
  return room_info_;
}
inline ::RoomInfo* S2C_SenceInfo::release_room_info() {
  clear_has_room_info();
  ::RoomInfo* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
inline void S2C_SenceInfo::set_allocated_room_info(::RoomInfo* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
}

// repeated int32 players_rank = 16;
inline int S2C_SenceInfo::players_rank_size() const {
  return players_rank_.size();
}
inline void S2C_SenceInfo::clear_players_rank() {
  players_rank_.Clear();
}
inline ::google::protobuf::int32 S2C_SenceInfo::players_rank(int index) const {
  return players_rank_.Get(index);
}
inline void S2C_SenceInfo::set_players_rank(int index, ::google::protobuf::int32 value) {
  players_rank_.Set(index, value);
}
inline void S2C_SenceInfo::add_players_rank(::google::protobuf::int32 value) {
  players_rank_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2C_SenceInfo::players_rank() const {
  return players_rank_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2C_SenceInfo::mutable_players_rank() {
  return &players_rank_;
}

// -------------------------------------------------------------------

// C2S_InviteReq

// required int32 grid_index = 1;
inline bool C2S_InviteReq::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_InviteReq::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_InviteReq::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_InviteReq::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 C2S_InviteReq::grid_index() const {
  return grid_index_;
}
inline void C2S_InviteReq::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// S2C_NitifyPlayerInvite

// required int32 seat_id = 1;
inline bool S2C_NitifyPlayerInvite::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_NitifyPlayerInvite::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_NitifyPlayerInvite::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_NitifyPlayerInvite::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 S2C_NitifyPlayerInvite::seat_id() const {
  return seat_id_;
}
inline void S2C_NitifyPlayerInvite::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// required int32 grid_index = 2;
inline bool S2C_NitifyPlayerInvite::has_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_NitifyPlayerInvite::set_has_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_NitifyPlayerInvite::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_NitifyPlayerInvite::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 S2C_NitifyPlayerInvite::grid_index() const {
  return grid_index_;
}
inline void S2C_NitifyPlayerInvite::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// C2S_AutoReq

// required int32 stat = 1;
inline bool C2S_AutoReq::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_AutoReq::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_AutoReq::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_AutoReq::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 C2S_AutoReq::stat() const {
  return stat_;
}
inline void C2S_AutoReq::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
}

// -------------------------------------------------------------------

// S2C_NotifyPlayerAuto

// required int32 seat_id = 1;
inline bool S2C_NotifyPlayerAuto::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_NotifyPlayerAuto::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_NotifyPlayerAuto::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_NotifyPlayerAuto::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 S2C_NotifyPlayerAuto::seat_id() const {
  return seat_id_;
}
inline void S2C_NotifyPlayerAuto::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// required int32 stat = 2;
inline bool S2C_NotifyPlayerAuto::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_NotifyPlayerAuto::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_NotifyPlayerAuto::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_NotifyPlayerAuto::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 S2C_NotifyPlayerAuto::stat() const {
  return stat_;
}
inline void S2C_NotifyPlayerAuto::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
}

// -------------------------------------------------------------------

// C2S_OffsetSocreReq

// -------------------------------------------------------------------

// S2C_OffsetSocreRsp

// required int32 res = 1;
inline bool S2C_OffsetSocreRsp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_OffsetSocreRsp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_OffsetSocreRsp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_OffsetSocreRsp::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 S2C_OffsetSocreRsp::res() const {
  return res_;
}
inline void S2C_OffsetSocreRsp::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// C2S_SendSmsInRoom

// required bytes msg = 1;
inline bool C2S_SendSmsInRoom::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_SendSmsInRoom::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_SendSmsInRoom::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_SendSmsInRoom::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& C2S_SendSmsInRoom::msg() const {
  return *msg_;
}
inline void C2S_SendSmsInRoom::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void C2S_SendSmsInRoom::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void C2S_SendSmsInRoom::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_SendSmsInRoom::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* C2S_SendSmsInRoom::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_SendSmsInRoom::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_NotifySms

// required int32 seat_no = 1;
inline bool S2C_NotifySms::has_seat_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_NotifySms::set_has_seat_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_NotifySms::clear_has_seat_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_NotifySms::clear_seat_no() {
  seat_no_ = 0;
  clear_has_seat_no();
}
inline ::google::protobuf::int32 S2C_NotifySms::seat_no() const {
  return seat_no_;
}
inline void S2C_NotifySms::set_seat_no(::google::protobuf::int32 value) {
  set_has_seat_no();
  seat_no_ = value;
}

// required bytes msg = 2;
inline bool S2C_NotifySms::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_NotifySms::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_NotifySms::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_NotifySms::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& S2C_NotifySms::msg() const {
  return *msg_;
}
inline void S2C_NotifySms::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void S2C_NotifySms::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void S2C_NotifySms::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2C_NotifySms::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* S2C_NotifySms::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2C_NotifySms::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fdesk_2eproto__INCLUDED
