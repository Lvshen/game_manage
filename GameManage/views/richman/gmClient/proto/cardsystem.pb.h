// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cardsystem.proto

#ifndef PROTOBUF_cardsystem_2eproto__INCLUDED
#define PROTOBUF_cardsystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db_cache.pb.h"
// @@protoc_insertion_point(includes)

namespace CARDSYSTEM {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cardsystem_2eproto();
void protobuf_AssignDesc_cardsystem_2eproto();
void protobuf_ShutdownFile_cardsystem_2eproto();

class CardPackage;
class PlayerCardInfo;
class C2S_RequestPlayerCards;
class C2S_RequestStrengthenCard;
class S2C_ReturnStrengthCard;
class S2C_FailStrengthCard;
class C2S_requestcomposecard;
class S2C_ReturnComposeCard;
class S2C_failComposeCard;
class S2C_PlayerCardInfoSet;
class C2S_exchangeEquipmentCard;
class S2C_exchangeEquipmentCardRes;

enum S2C_FailStrengthCard_REASON {
  S2C_FailStrengthCard_REASON_LACK_BASE_CARD = 1,
  S2C_FailStrengthCard_REASON_LACK_METERIAL_CARD = 2,
  S2C_FailStrengthCard_REASON_NOT_ENOUGH_GOLD = 4,
  S2C_FailStrengthCard_REASON_DEC_GOLD_EXCEP = 8,
  S2C_FailStrengthCard_REASON_METERIAL_EQUIP = 16,
  S2C_FailStrengthCard_REASON_DEL_CARD_EXCEP = 32,
  S2C_FailStrengthCard_REASON_SYSTEM_ERROR = 64
};
bool S2C_FailStrengthCard_REASON_IsValid(int value);
const S2C_FailStrengthCard_REASON S2C_FailStrengthCard_REASON_REASON_MIN = S2C_FailStrengthCard_REASON_LACK_BASE_CARD;
const S2C_FailStrengthCard_REASON S2C_FailStrengthCard_REASON_REASON_MAX = S2C_FailStrengthCard_REASON_SYSTEM_ERROR;
const int S2C_FailStrengthCard_REASON_REASON_ARRAYSIZE = S2C_FailStrengthCard_REASON_REASON_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_FailStrengthCard_REASON_descriptor();
inline const ::std::string& S2C_FailStrengthCard_REASON_Name(S2C_FailStrengthCard_REASON value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_FailStrengthCard_REASON_descriptor(), value);
}
inline bool S2C_FailStrengthCard_REASON_Parse(
    const ::std::string& name, S2C_FailStrengthCard_REASON* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_FailStrengthCard_REASON>(
    S2C_FailStrengthCard_REASON_descriptor(), name, value);
}
enum S2C_failComposeCard_REASON {
  S2C_failComposeCard_REASON_LACK_MARBLE = 1,
  S2C_failComposeCard_REASON_NO_CRARDS = 2,
  S2C_failComposeCard_REASON_LOWER_B = 4,
  S2C_failComposeCard_REASON_DEC_MARBLE_EXCEP = 8,
  S2C_failComposeCard_REASON_DEC_CARDS_EXCEP = 16,
  S2C_failComposeCard_REASON_CARD_NUMBER_EXCEP = 32,
  S2C_failComposeCard_REASON_SERIOUS_EXCEP = 64
};
bool S2C_failComposeCard_REASON_IsValid(int value);
const S2C_failComposeCard_REASON S2C_failComposeCard_REASON_REASON_MIN = S2C_failComposeCard_REASON_LACK_MARBLE;
const S2C_failComposeCard_REASON S2C_failComposeCard_REASON_REASON_MAX = S2C_failComposeCard_REASON_SERIOUS_EXCEP;
const int S2C_failComposeCard_REASON_REASON_ARRAYSIZE = S2C_failComposeCard_REASON_REASON_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_failComposeCard_REASON_descriptor();
inline const ::std::string& S2C_failComposeCard_REASON_Name(S2C_failComposeCard_REASON value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_failComposeCard_REASON_descriptor(), value);
}
inline bool S2C_failComposeCard_REASON_Parse(
    const ::std::string& name, S2C_failComposeCard_REASON* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_failComposeCard_REASON>(
    S2C_failComposeCard_REASON_descriptor(), name, value);
}
// ===================================================================

class CardPackage : public ::google::protobuf::Message {
 public:
  CardPackage();
  virtual ~CardPackage();

  CardPackage(const CardPackage& from);

  inline CardPackage& operator=(const CardPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardPackage& default_instance();

  void Swap(CardPackage* other);

  // implements Message ----------------------------------------------

  CardPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardPackage& from);
  void MergeFrom(const CardPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 card_num = 1;
  inline bool has_card_num() const;
  inline void clear_card_num();
  static const int kCardNumFieldNumber = 1;
  inline ::google::protobuf::uint32 card_num() const;
  inline void set_card_num(::google::protobuf::uint32 value);

  // required uint64 card_probability = 2;
  inline bool has_card_probability() const;
  inline void clear_card_probability();
  static const int kCardProbabilityFieldNumber = 2;
  inline ::google::protobuf::uint64 card_probability() const;
  inline void set_card_probability(::google::protobuf::uint64 value);

  // optional uint32 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.CardPackage)
 private:
  inline void set_has_card_num();
  inline void clear_has_card_num();
  inline void set_has_card_probability();
  inline void clear_has_card_probability();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 card_probability_;
  ::google::protobuf::uint32 card_num_;
  ::google::protobuf::uint32 expire_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static CardPackage* default_instance_;
};
// -------------------------------------------------------------------

class PlayerCardInfo : public ::google::protobuf::Message {
 public:
  PlayerCardInfo();
  virtual ~PlayerCardInfo();

  PlayerCardInfo(const PlayerCardInfo& from);

  inline PlayerCardInfo& operator=(const PlayerCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCardInfo& default_instance();

  void Swap(PlayerCardInfo* other);

  // implements Message ----------------------------------------------

  PlayerCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerCardInfo& from);
  void MergeFrom(const PlayerCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::int32 uuid() const;
  inline void set_uuid(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 card_class = 3;
  inline bool has_card_class() const;
  inline void clear_card_class();
  static const int kCardClassFieldNumber = 3;
  inline ::google::protobuf::int32 card_class() const;
  inline void set_card_class(::google::protobuf::int32 value);

  // required int32 card_lvl = 4;
  inline bool has_card_lvl() const;
  inline void clear_card_lvl();
  static const int kCardLvlFieldNumber = 4;
  inline ::google::protobuf::int32 card_lvl() const;
  inline void set_card_lvl(::google::protobuf::int32 value);

  // required int32 experience = 5;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 5;
  inline ::google::protobuf::int32 experience() const;
  inline void set_experience(::google::protobuf::int32 value);

  // required int32 card_icon = 6;
  inline bool has_card_icon() const;
  inline void clear_card_icon();
  static const int kCardIconFieldNumber = 6;
  inline ::google::protobuf::int32 card_icon() const;
  inline void set_card_icon(::google::protobuf::int32 value);

  // required bytes card_name = 7;
  inline bool has_card_name() const;
  inline void clear_card_name();
  static const int kCardNameFieldNumber = 7;
  inline const ::std::string& card_name() const;
  inline void set_card_name(const ::std::string& value);
  inline void set_card_name(const char* value);
  inline void set_card_name(const void* value, size_t size);
  inline ::std::string* mutable_card_name();
  inline ::std::string* release_card_name();
  inline void set_allocated_card_name(::std::string* card_name);

  // required int32 esc_island = 8;
  inline bool has_esc_island() const;
  inline void clear_esc_island();
  static const int kEscIslandFieldNumber = 8;
  inline ::google::protobuf::int32 esc_island() const;
  inline void set_esc_island(::google::protobuf::int32 value);

  // required int32 win_reward = 9;
  inline bool has_win_reward() const;
  inline void clear_win_reward();
  static const int kWinRewardFieldNumber = 9;
  inline ::google::protobuf::int32 win_reward() const;
  inline void set_win_reward(::google::protobuf::int32 value);

  // required int32 cost_discount = 10;
  inline bool has_cost_discount() const;
  inline void clear_cost_discount();
  static const int kCostDiscountFieldNumber = 10;
  inline ::google::protobuf::int32 cost_discount() const;
  inline void set_cost_discount(::google::protobuf::int32 value);

  // required int32 get_goldcard = 11;
  inline bool has_get_goldcard() const;
  inline void clear_get_goldcard();
  static const int kGetGoldcardFieldNumber = 11;
  inline ::google::protobuf::int32 get_goldcard() const;
  inline void set_get_goldcard(::google::protobuf::int32 value);

  // required int32 build_discount = 12;
  inline bool has_build_discount() const;
  inline void clear_build_discount();
  static const int kBuildDiscountFieldNumber = 12;
  inline ::google::protobuf::int32 build_discount() const;
  inline void set_build_discount(::google::protobuf::int32 value);

  // required int32 die_figure = 13;
  inline bool has_die_figure() const;
  inline void clear_die_figure();
  static const int kDieFigureFieldNumber = 13;
  inline ::google::protobuf::int32 die_figure() const;
  inline void set_die_figure(::google::protobuf::int32 value);

  // required int32 cash_discount = 14;
  inline bool has_cash_discount() const;
  inline void clear_cash_discount();
  static const int kCashDiscountFieldNumber = 14;
  inline ::google::protobuf::int32 cash_discount() const;
  inline void set_cash_discount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.PlayerCardInfo)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_card_class();
  inline void clear_has_card_class();
  inline void set_has_card_lvl();
  inline void clear_has_card_lvl();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_card_icon();
  inline void clear_has_card_icon();
  inline void set_has_card_name();
  inline void clear_has_card_name();
  inline void set_has_esc_island();
  inline void clear_has_esc_island();
  inline void set_has_win_reward();
  inline void clear_has_win_reward();
  inline void set_has_cost_discount();
  inline void clear_has_cost_discount();
  inline void set_has_get_goldcard();
  inline void clear_has_get_goldcard();
  inline void set_has_build_discount();
  inline void clear_has_build_discount();
  inline void set_has_die_figure();
  inline void clear_has_die_figure();
  inline void set_has_cash_discount();
  inline void clear_has_cash_discount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uuid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 card_class_;
  ::google::protobuf::int32 card_lvl_;
  ::google::protobuf::int32 experience_;
  ::google::protobuf::int32 card_icon_;
  ::std::string* card_name_;
  ::google::protobuf::int32 esc_island_;
  ::google::protobuf::int32 win_reward_;
  ::google::protobuf::int32 cost_discount_;
  ::google::protobuf::int32 get_goldcard_;
  ::google::protobuf::int32 build_discount_;
  ::google::protobuf::int32 die_figure_;
  ::google::protobuf::int32 cash_discount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static PlayerCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2S_RequestPlayerCards : public ::google::protobuf::Message {
 public:
  C2S_RequestPlayerCards();
  virtual ~C2S_RequestPlayerCards();

  C2S_RequestPlayerCards(const C2S_RequestPlayerCards& from);

  inline C2S_RequestPlayerCards& operator=(const C2S_RequestPlayerCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_RequestPlayerCards& default_instance();

  void Swap(C2S_RequestPlayerCards* other);

  // implements Message ----------------------------------------------

  C2S_RequestPlayerCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_RequestPlayerCards& from);
  void MergeFrom(const C2S_RequestPlayerCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.C2S_RequestPlayerCards)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_RequestPlayerCards* default_instance_;
};
// -------------------------------------------------------------------

class C2S_RequestStrengthenCard : public ::google::protobuf::Message {
 public:
  C2S_RequestStrengthenCard();
  virtual ~C2S_RequestStrengthenCard();

  C2S_RequestStrengthenCard(const C2S_RequestStrengthenCard& from);

  inline C2S_RequestStrengthenCard& operator=(const C2S_RequestStrengthenCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_RequestStrengthenCard& default_instance();

  void Swap(C2S_RequestStrengthenCard* other);

  // implements Message ----------------------------------------------

  C2S_RequestStrengthenCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_RequestStrengthenCard& from);
  void MergeFrom(const C2S_RequestStrengthenCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 baseCardid = 1;
  inline bool has_basecardid() const;
  inline void clear_basecardid();
  static const int kBaseCardidFieldNumber = 1;
  inline ::google::protobuf::int32 basecardid() const;
  inline void set_basecardid(::google::protobuf::int32 value);

  // repeated int32 meterialCardid = 2;
  inline int meterialcardid_size() const;
  inline void clear_meterialcardid();
  static const int kMeterialCardidFieldNumber = 2;
  inline ::google::protobuf::int32 meterialcardid(int index) const;
  inline void set_meterialcardid(int index, ::google::protobuf::int32 value);
  inline void add_meterialcardid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      meterialcardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_meterialcardid();

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.C2S_RequestStrengthenCard)
 private:
  inline void set_has_basecardid();
  inline void clear_has_basecardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > meterialcardid_;
  ::google::protobuf::int32 basecardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_RequestStrengthenCard* default_instance_;
};
// -------------------------------------------------------------------

class S2C_ReturnStrengthCard : public ::google::protobuf::Message {
 public:
  S2C_ReturnStrengthCard();
  virtual ~S2C_ReturnStrengthCard();

  S2C_ReturnStrengthCard(const S2C_ReturnStrengthCard& from);

  inline S2C_ReturnStrengthCard& operator=(const S2C_ReturnStrengthCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_ReturnStrengthCard& default_instance();

  void Swap(S2C_ReturnStrengthCard* other);

  // implements Message ----------------------------------------------

  S2C_ReturnStrengthCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_ReturnStrengthCard& from);
  void MergeFrom(const S2C_ReturnStrengthCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 current_player_goldcoin = 1;
  inline bool has_current_player_goldcoin() const;
  inline void clear_current_player_goldcoin();
  static const int kCurrentPlayerGoldcoinFieldNumber = 1;
  inline ::google::protobuf::int32 current_player_goldcoin() const;
  inline void set_current_player_goldcoin(::google::protobuf::int32 value);

  // required .DBCACHE.PlayerCard sthrengthCard = 2;
  inline bool has_sthrengthcard() const;
  inline void clear_sthrengthcard();
  static const int kSthrengthCardFieldNumber = 2;
  inline const ::DBCACHE::PlayerCard& sthrengthcard() const;
  inline ::DBCACHE::PlayerCard* mutable_sthrengthcard();
  inline ::DBCACHE::PlayerCard* release_sthrengthcard();
  inline void set_allocated_sthrengthcard(::DBCACHE::PlayerCard* sthrengthcard);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.S2C_ReturnStrengthCard)
 private:
  inline void set_has_current_player_goldcoin();
  inline void clear_has_current_player_goldcoin();
  inline void set_has_sthrengthcard();
  inline void clear_has_sthrengthcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBCACHE::PlayerCard* sthrengthcard_;
  ::google::protobuf::int32 current_player_goldcoin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_ReturnStrengthCard* default_instance_;
};
// -------------------------------------------------------------------

class S2C_FailStrengthCard : public ::google::protobuf::Message {
 public:
  S2C_FailStrengthCard();
  virtual ~S2C_FailStrengthCard();

  S2C_FailStrengthCard(const S2C_FailStrengthCard& from);

  inline S2C_FailStrengthCard& operator=(const S2C_FailStrengthCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_FailStrengthCard& default_instance();

  void Swap(S2C_FailStrengthCard* other);

  // implements Message ----------------------------------------------

  S2C_FailStrengthCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_FailStrengthCard& from);
  void MergeFrom(const S2C_FailStrengthCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_FailStrengthCard_REASON REASON;
  static const REASON LACK_BASE_CARD = S2C_FailStrengthCard_REASON_LACK_BASE_CARD;
  static const REASON LACK_METERIAL_CARD = S2C_FailStrengthCard_REASON_LACK_METERIAL_CARD;
  static const REASON NOT_ENOUGH_GOLD = S2C_FailStrengthCard_REASON_NOT_ENOUGH_GOLD;
  static const REASON DEC_GOLD_EXCEP = S2C_FailStrengthCard_REASON_DEC_GOLD_EXCEP;
  static const REASON METERIAL_EQUIP = S2C_FailStrengthCard_REASON_METERIAL_EQUIP;
  static const REASON DEL_CARD_EXCEP = S2C_FailStrengthCard_REASON_DEL_CARD_EXCEP;
  static const REASON SYSTEM_ERROR = S2C_FailStrengthCard_REASON_SYSTEM_ERROR;
  static inline bool REASON_IsValid(int value) {
    return S2C_FailStrengthCard_REASON_IsValid(value);
  }
  static const REASON REASON_MIN =
    S2C_FailStrengthCard_REASON_REASON_MIN;
  static const REASON REASON_MAX =
    S2C_FailStrengthCard_REASON_REASON_MAX;
  static const int REASON_ARRAYSIZE =
    S2C_FailStrengthCard_REASON_REASON_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REASON_descriptor() {
    return S2C_FailStrengthCard_REASON_descriptor();
  }
  static inline const ::std::string& REASON_Name(REASON value) {
    return S2C_FailStrengthCard_REASON_Name(value);
  }
  static inline bool REASON_Parse(const ::std::string& name,
      REASON* value) {
    return S2C_FailStrengthCard_REASON_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.S2C_FailStrengthCard)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_FailStrengthCard* default_instance_;
};
// -------------------------------------------------------------------

class C2S_requestcomposecard : public ::google::protobuf::Message {
 public:
  C2S_requestcomposecard();
  virtual ~C2S_requestcomposecard();

  C2S_requestcomposecard(const C2S_requestcomposecard& from);

  inline C2S_requestcomposecard& operator=(const C2S_requestcomposecard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_requestcomposecard& default_instance();

  void Swap(C2S_requestcomposecard* other);

  // implements Message ----------------------------------------------

  C2S_requestcomposecard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_requestcomposecard& from);
  void MergeFrom(const C2S_requestcomposecard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cardid = 1;
  inline int cardid_size() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 1;
  inline ::google::protobuf::int32 cardid(int index) const;
  inline void set_cardid(int index, ::google::protobuf::int32 value);
  inline void add_cardid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardid();

  // required int32 freeOrLuckCompose = 2;
  inline bool has_freeorluckcompose() const;
  inline void clear_freeorluckcompose();
  static const int kFreeOrLuckComposeFieldNumber = 2;
  inline ::google::protobuf::int32 freeorluckcompose() const;
  inline void set_freeorluckcompose(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.C2S_requestcomposecard)
 private:
  inline void set_has_freeorluckcompose();
  inline void clear_has_freeorluckcompose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardid_;
  ::google::protobuf::int32 freeorluckcompose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_requestcomposecard* default_instance_;
};
// -------------------------------------------------------------------

class S2C_ReturnComposeCard : public ::google::protobuf::Message {
 public:
  S2C_ReturnComposeCard();
  virtual ~S2C_ReturnComposeCard();

  S2C_ReturnComposeCard(const S2C_ReturnComposeCard& from);

  inline S2C_ReturnComposeCard& operator=(const S2C_ReturnComposeCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_ReturnComposeCard& default_instance();

  void Swap(S2C_ReturnComposeCard* other);

  // implements Message ----------------------------------------------

  S2C_ReturnComposeCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_ReturnComposeCard& from);
  void MergeFrom(const S2C_ReturnComposeCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DBCACHE.PlayerCard composeCardAns = 1;
  inline bool has_composecardans() const;
  inline void clear_composecardans();
  static const int kComposeCardAnsFieldNumber = 1;
  inline const ::DBCACHE::PlayerCard& composecardans() const;
  inline ::DBCACHE::PlayerCard* mutable_composecardans();
  inline ::DBCACHE::PlayerCard* release_composecardans();
  inline void set_allocated_composecardans(::DBCACHE::PlayerCard* composecardans);

  // required int32 playermarble = 2;
  inline bool has_playermarble() const;
  inline void clear_playermarble();
  static const int kPlayermarbleFieldNumber = 2;
  inline ::google::protobuf::int32 playermarble() const;
  inline void set_playermarble(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.S2C_ReturnComposeCard)
 private:
  inline void set_has_composecardans();
  inline void clear_has_composecardans();
  inline void set_has_playermarble();
  inline void clear_has_playermarble();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBCACHE::PlayerCard* composecardans_;
  ::google::protobuf::int32 playermarble_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_ReturnComposeCard* default_instance_;
};
// -------------------------------------------------------------------

class S2C_failComposeCard : public ::google::protobuf::Message {
 public:
  S2C_failComposeCard();
  virtual ~S2C_failComposeCard();

  S2C_failComposeCard(const S2C_failComposeCard& from);

  inline S2C_failComposeCard& operator=(const S2C_failComposeCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_failComposeCard& default_instance();

  void Swap(S2C_failComposeCard* other);

  // implements Message ----------------------------------------------

  S2C_failComposeCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_failComposeCard& from);
  void MergeFrom(const S2C_failComposeCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_failComposeCard_REASON REASON;
  static const REASON LACK_MARBLE = S2C_failComposeCard_REASON_LACK_MARBLE;
  static const REASON NO_CRARDS = S2C_failComposeCard_REASON_NO_CRARDS;
  static const REASON LOWER_B = S2C_failComposeCard_REASON_LOWER_B;
  static const REASON DEC_MARBLE_EXCEP = S2C_failComposeCard_REASON_DEC_MARBLE_EXCEP;
  static const REASON DEC_CARDS_EXCEP = S2C_failComposeCard_REASON_DEC_CARDS_EXCEP;
  static const REASON CARD_NUMBER_EXCEP = S2C_failComposeCard_REASON_CARD_NUMBER_EXCEP;
  static const REASON SERIOUS_EXCEP = S2C_failComposeCard_REASON_SERIOUS_EXCEP;
  static inline bool REASON_IsValid(int value) {
    return S2C_failComposeCard_REASON_IsValid(value);
  }
  static const REASON REASON_MIN =
    S2C_failComposeCard_REASON_REASON_MIN;
  static const REASON REASON_MAX =
    S2C_failComposeCard_REASON_REASON_MAX;
  static const int REASON_ARRAYSIZE =
    S2C_failComposeCard_REASON_REASON_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REASON_descriptor() {
    return S2C_failComposeCard_REASON_descriptor();
  }
  static inline const ::std::string& REASON_Name(REASON value) {
    return S2C_failComposeCard_REASON_Name(value);
  }
  static inline bool REASON_Parse(const ::std::string& name,
      REASON* value) {
    return S2C_failComposeCard_REASON_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.S2C_failComposeCard)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_failComposeCard* default_instance_;
};
// -------------------------------------------------------------------

class S2C_PlayerCardInfoSet : public ::google::protobuf::Message {
 public:
  S2C_PlayerCardInfoSet();
  virtual ~S2C_PlayerCardInfoSet();

  S2C_PlayerCardInfoSet(const S2C_PlayerCardInfoSet& from);

  inline S2C_PlayerCardInfoSet& operator=(const S2C_PlayerCardInfoSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_PlayerCardInfoSet& default_instance();

  void Swap(S2C_PlayerCardInfoSet* other);

  // implements Message ----------------------------------------------

  S2C_PlayerCardInfoSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_PlayerCardInfoSet& from);
  void MergeFrom(const S2C_PlayerCardInfoSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARDSYSTEM.PlayerCardInfo playerCard = 1;
  inline int playercard_size() const;
  inline void clear_playercard();
  static const int kPlayerCardFieldNumber = 1;
  inline const ::CARDSYSTEM::PlayerCardInfo& playercard(int index) const;
  inline ::CARDSYSTEM::PlayerCardInfo* mutable_playercard(int index);
  inline ::CARDSYSTEM::PlayerCardInfo* add_playercard();
  inline const ::google::protobuf::RepeatedPtrField< ::CARDSYSTEM::PlayerCardInfo >&
      playercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::CARDSYSTEM::PlayerCardInfo >*
      mutable_playercard();

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.S2C_PlayerCardInfoSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CARDSYSTEM::PlayerCardInfo > playercard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_PlayerCardInfoSet* default_instance_;
};
// -------------------------------------------------------------------

class C2S_exchangeEquipmentCard : public ::google::protobuf::Message {
 public:
  C2S_exchangeEquipmentCard();
  virtual ~C2S_exchangeEquipmentCard();

  C2S_exchangeEquipmentCard(const C2S_exchangeEquipmentCard& from);

  inline C2S_exchangeEquipmentCard& operator=(const C2S_exchangeEquipmentCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_exchangeEquipmentCard& default_instance();

  void Swap(C2S_exchangeEquipmentCard* other);

  // implements Message ----------------------------------------------

  C2S_exchangeEquipmentCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_exchangeEquipmentCard& from);
  void MergeFrom(const C2S_exchangeEquipmentCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cardid = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 1;
  inline ::google::protobuf::int32 cardid() const;
  inline void set_cardid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.C2S_exchangeEquipmentCard)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static C2S_exchangeEquipmentCard* default_instance_;
};
// -------------------------------------------------------------------

class S2C_exchangeEquipmentCardRes : public ::google::protobuf::Message {
 public:
  S2C_exchangeEquipmentCardRes();
  virtual ~S2C_exchangeEquipmentCardRes();

  S2C_exchangeEquipmentCardRes(const S2C_exchangeEquipmentCardRes& from);

  inline S2C_exchangeEquipmentCardRes& operator=(const S2C_exchangeEquipmentCardRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_exchangeEquipmentCardRes& default_instance();

  void Swap(S2C_exchangeEquipmentCardRes* other);

  // implements Message ----------------------------------------------

  S2C_exchangeEquipmentCardRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_exchangeEquipmentCardRes& from);
  void MergeFrom(const S2C_exchangeEquipmentCardRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cardid = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 1;
  inline ::google::protobuf::int32 cardid() const;
  inline void set_cardid(::google::protobuf::int32 value);

  // required int32 isSuccess = 2;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 2;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARDSYSTEM.S2C_exchangeEquipmentCardRes)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cardid_;
  ::google::protobuf::int32 issuccess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cardsystem_2eproto();
  friend void protobuf_AssignDesc_cardsystem_2eproto();
  friend void protobuf_ShutdownFile_cardsystem_2eproto();

  void InitAsDefaultInstance();
  static S2C_exchangeEquipmentCardRes* default_instance_;
};
// ===================================================================


// ===================================================================

// CardPackage

// required uint32 card_num = 1;
inline bool CardPackage::has_card_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardPackage::set_has_card_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardPackage::clear_has_card_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardPackage::clear_card_num() {
  card_num_ = 0u;
  clear_has_card_num();
}
inline ::google::protobuf::uint32 CardPackage::card_num() const {
  return card_num_;
}
inline void CardPackage::set_card_num(::google::protobuf::uint32 value) {
  set_has_card_num();
  card_num_ = value;
}

// required uint64 card_probability = 2;
inline bool CardPackage::has_card_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardPackage::set_has_card_probability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardPackage::clear_has_card_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardPackage::clear_card_probability() {
  card_probability_ = GOOGLE_ULONGLONG(0);
  clear_has_card_probability();
}
inline ::google::protobuf::uint64 CardPackage::card_probability() const {
  return card_probability_;
}
inline void CardPackage::set_card_probability(::google::protobuf::uint64 value) {
  set_has_card_probability();
  card_probability_ = value;
}

// optional uint32 expire_time = 3;
inline bool CardPackage::has_expire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardPackage::set_has_expire_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardPackage::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardPackage::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 CardPackage::expire_time() const {
  return expire_time_;
}
inline void CardPackage::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// -------------------------------------------------------------------

// PlayerCardInfo

// required int32 uuid = 1;
inline bool PlayerCardInfo::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerCardInfo::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerCardInfo::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerCardInfo::clear_uuid() {
  uuid_ = 0;
  clear_has_uuid();
}
inline ::google::protobuf::int32 PlayerCardInfo::uuid() const {
  return uuid_;
}
inline void PlayerCardInfo::set_uuid(::google::protobuf::int32 value) {
  set_has_uuid();
  uuid_ = value;
}

// required int32 type = 2;
inline bool PlayerCardInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerCardInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerCardInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerCardInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlayerCardInfo::type() const {
  return type_;
}
inline void PlayerCardInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 card_class = 3;
inline bool PlayerCardInfo::has_card_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerCardInfo::set_has_card_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerCardInfo::clear_has_card_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerCardInfo::clear_card_class() {
  card_class_ = 0;
  clear_has_card_class();
}
inline ::google::protobuf::int32 PlayerCardInfo::card_class() const {
  return card_class_;
}
inline void PlayerCardInfo::set_card_class(::google::protobuf::int32 value) {
  set_has_card_class();
  card_class_ = value;
}

// required int32 card_lvl = 4;
inline bool PlayerCardInfo::has_card_lvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerCardInfo::set_has_card_lvl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerCardInfo::clear_has_card_lvl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerCardInfo::clear_card_lvl() {
  card_lvl_ = 0;
  clear_has_card_lvl();
}
inline ::google::protobuf::int32 PlayerCardInfo::card_lvl() const {
  return card_lvl_;
}
inline void PlayerCardInfo::set_card_lvl(::google::protobuf::int32 value) {
  set_has_card_lvl();
  card_lvl_ = value;
}

// required int32 experience = 5;
inline bool PlayerCardInfo::has_experience() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerCardInfo::set_has_experience() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerCardInfo::clear_has_experience() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerCardInfo::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
inline ::google::protobuf::int32 PlayerCardInfo::experience() const {
  return experience_;
}
inline void PlayerCardInfo::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
}

// required int32 card_icon = 6;
inline bool PlayerCardInfo::has_card_icon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerCardInfo::set_has_card_icon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerCardInfo::clear_has_card_icon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerCardInfo::clear_card_icon() {
  card_icon_ = 0;
  clear_has_card_icon();
}
inline ::google::protobuf::int32 PlayerCardInfo::card_icon() const {
  return card_icon_;
}
inline void PlayerCardInfo::set_card_icon(::google::protobuf::int32 value) {
  set_has_card_icon();
  card_icon_ = value;
}

// required bytes card_name = 7;
inline bool PlayerCardInfo::has_card_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerCardInfo::set_has_card_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerCardInfo::clear_has_card_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerCardInfo::clear_card_name() {
  if (card_name_ != &::google::protobuf::internal::kEmptyString) {
    card_name_->clear();
  }
  clear_has_card_name();
}
inline const ::std::string& PlayerCardInfo::card_name() const {
  return *card_name_;
}
inline void PlayerCardInfo::set_card_name(const ::std::string& value) {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  card_name_->assign(value);
}
inline void PlayerCardInfo::set_card_name(const char* value) {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  card_name_->assign(value);
}
inline void PlayerCardInfo::set_card_name(const void* value, size_t size) {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  card_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerCardInfo::mutable_card_name() {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  return card_name_;
}
inline ::std::string* PlayerCardInfo::release_card_name() {
  clear_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_name_;
    card_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerCardInfo::set_allocated_card_name(::std::string* card_name) {
  if (card_name_ != &::google::protobuf::internal::kEmptyString) {
    delete card_name_;
  }
  if (card_name) {
    set_has_card_name();
    card_name_ = card_name;
  } else {
    clear_has_card_name();
    card_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 esc_island = 8;
inline bool PlayerCardInfo::has_esc_island() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerCardInfo::set_has_esc_island() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerCardInfo::clear_has_esc_island() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerCardInfo::clear_esc_island() {
  esc_island_ = 0;
  clear_has_esc_island();
}
inline ::google::protobuf::int32 PlayerCardInfo::esc_island() const {
  return esc_island_;
}
inline void PlayerCardInfo::set_esc_island(::google::protobuf::int32 value) {
  set_has_esc_island();
  esc_island_ = value;
}

// required int32 win_reward = 9;
inline bool PlayerCardInfo::has_win_reward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerCardInfo::set_has_win_reward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerCardInfo::clear_has_win_reward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerCardInfo::clear_win_reward() {
  win_reward_ = 0;
  clear_has_win_reward();
}
inline ::google::protobuf::int32 PlayerCardInfo::win_reward() const {
  return win_reward_;
}
inline void PlayerCardInfo::set_win_reward(::google::protobuf::int32 value) {
  set_has_win_reward();
  win_reward_ = value;
}

// required int32 cost_discount = 10;
inline bool PlayerCardInfo::has_cost_discount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerCardInfo::set_has_cost_discount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerCardInfo::clear_has_cost_discount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerCardInfo::clear_cost_discount() {
  cost_discount_ = 0;
  clear_has_cost_discount();
}
inline ::google::protobuf::int32 PlayerCardInfo::cost_discount() const {
  return cost_discount_;
}
inline void PlayerCardInfo::set_cost_discount(::google::protobuf::int32 value) {
  set_has_cost_discount();
  cost_discount_ = value;
}

// required int32 get_goldcard = 11;
inline bool PlayerCardInfo::has_get_goldcard() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerCardInfo::set_has_get_goldcard() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerCardInfo::clear_has_get_goldcard() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerCardInfo::clear_get_goldcard() {
  get_goldcard_ = 0;
  clear_has_get_goldcard();
}
inline ::google::protobuf::int32 PlayerCardInfo::get_goldcard() const {
  return get_goldcard_;
}
inline void PlayerCardInfo::set_get_goldcard(::google::protobuf::int32 value) {
  set_has_get_goldcard();
  get_goldcard_ = value;
}

// required int32 build_discount = 12;
inline bool PlayerCardInfo::has_build_discount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerCardInfo::set_has_build_discount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerCardInfo::clear_has_build_discount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerCardInfo::clear_build_discount() {
  build_discount_ = 0;
  clear_has_build_discount();
}
inline ::google::protobuf::int32 PlayerCardInfo::build_discount() const {
  return build_discount_;
}
inline void PlayerCardInfo::set_build_discount(::google::protobuf::int32 value) {
  set_has_build_discount();
  build_discount_ = value;
}

// required int32 die_figure = 13;
inline bool PlayerCardInfo::has_die_figure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerCardInfo::set_has_die_figure() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerCardInfo::clear_has_die_figure() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerCardInfo::clear_die_figure() {
  die_figure_ = 0;
  clear_has_die_figure();
}
inline ::google::protobuf::int32 PlayerCardInfo::die_figure() const {
  return die_figure_;
}
inline void PlayerCardInfo::set_die_figure(::google::protobuf::int32 value) {
  set_has_die_figure();
  die_figure_ = value;
}

// required int32 cash_discount = 14;
inline bool PlayerCardInfo::has_cash_discount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerCardInfo::set_has_cash_discount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerCardInfo::clear_has_cash_discount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerCardInfo::clear_cash_discount() {
  cash_discount_ = 0;
  clear_has_cash_discount();
}
inline ::google::protobuf::int32 PlayerCardInfo::cash_discount() const {
  return cash_discount_;
}
inline void PlayerCardInfo::set_cash_discount(::google::protobuf::int32 value) {
  set_has_cash_discount();
  cash_discount_ = value;
}

// -------------------------------------------------------------------

// C2S_RequestPlayerCards

// -------------------------------------------------------------------

// C2S_RequestStrengthenCard

// required int32 baseCardid = 1;
inline bool C2S_RequestStrengthenCard::has_basecardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_RequestStrengthenCard::set_has_basecardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_RequestStrengthenCard::clear_has_basecardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_RequestStrengthenCard::clear_basecardid() {
  basecardid_ = 0;
  clear_has_basecardid();
}
inline ::google::protobuf::int32 C2S_RequestStrengthenCard::basecardid() const {
  return basecardid_;
}
inline void C2S_RequestStrengthenCard::set_basecardid(::google::protobuf::int32 value) {
  set_has_basecardid();
  basecardid_ = value;
}

// repeated int32 meterialCardid = 2;
inline int C2S_RequestStrengthenCard::meterialcardid_size() const {
  return meterialcardid_.size();
}
inline void C2S_RequestStrengthenCard::clear_meterialcardid() {
  meterialcardid_.Clear();
}
inline ::google::protobuf::int32 C2S_RequestStrengthenCard::meterialcardid(int index) const {
  return meterialcardid_.Get(index);
}
inline void C2S_RequestStrengthenCard::set_meterialcardid(int index, ::google::protobuf::int32 value) {
  meterialcardid_.Set(index, value);
}
inline void C2S_RequestStrengthenCard::add_meterialcardid(::google::protobuf::int32 value) {
  meterialcardid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
C2S_RequestStrengthenCard::meterialcardid() const {
  return meterialcardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
C2S_RequestStrengthenCard::mutable_meterialcardid() {
  return &meterialcardid_;
}

// -------------------------------------------------------------------

// S2C_ReturnStrengthCard

// required int32 current_player_goldcoin = 1;
inline bool S2C_ReturnStrengthCard::has_current_player_goldcoin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_ReturnStrengthCard::set_has_current_player_goldcoin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_ReturnStrengthCard::clear_has_current_player_goldcoin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_ReturnStrengthCard::clear_current_player_goldcoin() {
  current_player_goldcoin_ = 0;
  clear_has_current_player_goldcoin();
}
inline ::google::protobuf::int32 S2C_ReturnStrengthCard::current_player_goldcoin() const {
  return current_player_goldcoin_;
}
inline void S2C_ReturnStrengthCard::set_current_player_goldcoin(::google::protobuf::int32 value) {
  set_has_current_player_goldcoin();
  current_player_goldcoin_ = value;
}

// required .DBCACHE.PlayerCard sthrengthCard = 2;
inline bool S2C_ReturnStrengthCard::has_sthrengthcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_ReturnStrengthCard::set_has_sthrengthcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_ReturnStrengthCard::clear_has_sthrengthcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_ReturnStrengthCard::clear_sthrengthcard() {
  if (sthrengthcard_ != NULL) sthrengthcard_->::DBCACHE::PlayerCard::Clear();
  clear_has_sthrengthcard();
}
inline const ::DBCACHE::PlayerCard& S2C_ReturnStrengthCard::sthrengthcard() const {
  return sthrengthcard_ != NULL ? *sthrengthcard_ : *default_instance_->sthrengthcard_;
}
inline ::DBCACHE::PlayerCard* S2C_ReturnStrengthCard::mutable_sthrengthcard() {
  set_has_sthrengthcard();
  if (sthrengthcard_ == NULL) sthrengthcard_ = new ::DBCACHE::PlayerCard;
  return sthrengthcard_;
}
inline ::DBCACHE::PlayerCard* S2C_ReturnStrengthCard::release_sthrengthcard() {
  clear_has_sthrengthcard();
  ::DBCACHE::PlayerCard* temp = sthrengthcard_;
  sthrengthcard_ = NULL;
  return temp;
}
inline void S2C_ReturnStrengthCard::set_allocated_sthrengthcard(::DBCACHE::PlayerCard* sthrengthcard) {
  delete sthrengthcard_;
  sthrengthcard_ = sthrengthcard;
  if (sthrengthcard) {
    set_has_sthrengthcard();
  } else {
    clear_has_sthrengthcard();
  }
}

// -------------------------------------------------------------------

// S2C_FailStrengthCard

// required int32 reason = 1;
inline bool S2C_FailStrengthCard::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_FailStrengthCard::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_FailStrengthCard::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_FailStrengthCard::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 S2C_FailStrengthCard::reason() const {
  return reason_;
}
inline void S2C_FailStrengthCard::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// C2S_requestcomposecard

// repeated int32 cardid = 1;
inline int C2S_requestcomposecard::cardid_size() const {
  return cardid_.size();
}
inline void C2S_requestcomposecard::clear_cardid() {
  cardid_.Clear();
}
inline ::google::protobuf::int32 C2S_requestcomposecard::cardid(int index) const {
  return cardid_.Get(index);
}
inline void C2S_requestcomposecard::set_cardid(int index, ::google::protobuf::int32 value) {
  cardid_.Set(index, value);
}
inline void C2S_requestcomposecard::add_cardid(::google::protobuf::int32 value) {
  cardid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
C2S_requestcomposecard::cardid() const {
  return cardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
C2S_requestcomposecard::mutable_cardid() {
  return &cardid_;
}

// required int32 freeOrLuckCompose = 2;
inline bool C2S_requestcomposecard::has_freeorluckcompose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_requestcomposecard::set_has_freeorluckcompose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_requestcomposecard::clear_has_freeorluckcompose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_requestcomposecard::clear_freeorluckcompose() {
  freeorluckcompose_ = 0;
  clear_has_freeorluckcompose();
}
inline ::google::protobuf::int32 C2S_requestcomposecard::freeorluckcompose() const {
  return freeorluckcompose_;
}
inline void C2S_requestcomposecard::set_freeorluckcompose(::google::protobuf::int32 value) {
  set_has_freeorluckcompose();
  freeorluckcompose_ = value;
}

// -------------------------------------------------------------------

// S2C_ReturnComposeCard

// required .DBCACHE.PlayerCard composeCardAns = 1;
inline bool S2C_ReturnComposeCard::has_composecardans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_ReturnComposeCard::set_has_composecardans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_ReturnComposeCard::clear_has_composecardans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_ReturnComposeCard::clear_composecardans() {
  if (composecardans_ != NULL) composecardans_->::DBCACHE::PlayerCard::Clear();
  clear_has_composecardans();
}
inline const ::DBCACHE::PlayerCard& S2C_ReturnComposeCard::composecardans() const {
  return composecardans_ != NULL ? *composecardans_ : *default_instance_->composecardans_;
}
inline ::DBCACHE::PlayerCard* S2C_ReturnComposeCard::mutable_composecardans() {
  set_has_composecardans();
  if (composecardans_ == NULL) composecardans_ = new ::DBCACHE::PlayerCard;
  return composecardans_;
}
inline ::DBCACHE::PlayerCard* S2C_ReturnComposeCard::release_composecardans() {
  clear_has_composecardans();
  ::DBCACHE::PlayerCard* temp = composecardans_;
  composecardans_ = NULL;
  return temp;
}
inline void S2C_ReturnComposeCard::set_allocated_composecardans(::DBCACHE::PlayerCard* composecardans) {
  delete composecardans_;
  composecardans_ = composecardans;
  if (composecardans) {
    set_has_composecardans();
  } else {
    clear_has_composecardans();
  }
}

// required int32 playermarble = 2;
inline bool S2C_ReturnComposeCard::has_playermarble() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_ReturnComposeCard::set_has_playermarble() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_ReturnComposeCard::clear_has_playermarble() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_ReturnComposeCard::clear_playermarble() {
  playermarble_ = 0;
  clear_has_playermarble();
}
inline ::google::protobuf::int32 S2C_ReturnComposeCard::playermarble() const {
  return playermarble_;
}
inline void S2C_ReturnComposeCard::set_playermarble(::google::protobuf::int32 value) {
  set_has_playermarble();
  playermarble_ = value;
}

// -------------------------------------------------------------------

// S2C_failComposeCard

// required int32 reason = 1;
inline bool S2C_failComposeCard::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_failComposeCard::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_failComposeCard::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_failComposeCard::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 S2C_failComposeCard::reason() const {
  return reason_;
}
inline void S2C_failComposeCard::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// S2C_PlayerCardInfoSet

// repeated .CARDSYSTEM.PlayerCardInfo playerCard = 1;
inline int S2C_PlayerCardInfoSet::playercard_size() const {
  return playercard_.size();
}
inline void S2C_PlayerCardInfoSet::clear_playercard() {
  playercard_.Clear();
}
inline const ::CARDSYSTEM::PlayerCardInfo& S2C_PlayerCardInfoSet::playercard(int index) const {
  return playercard_.Get(index);
}
inline ::CARDSYSTEM::PlayerCardInfo* S2C_PlayerCardInfoSet::mutable_playercard(int index) {
  return playercard_.Mutable(index);
}
inline ::CARDSYSTEM::PlayerCardInfo* S2C_PlayerCardInfoSet::add_playercard() {
  return playercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARDSYSTEM::PlayerCardInfo >&
S2C_PlayerCardInfoSet::playercard() const {
  return playercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::CARDSYSTEM::PlayerCardInfo >*
S2C_PlayerCardInfoSet::mutable_playercard() {
  return &playercard_;
}

// -------------------------------------------------------------------

// C2S_exchangeEquipmentCard

// required int32 cardid = 1;
inline bool C2S_exchangeEquipmentCard::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_exchangeEquipmentCard::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_exchangeEquipmentCard::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_exchangeEquipmentCard::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 C2S_exchangeEquipmentCard::cardid() const {
  return cardid_;
}
inline void C2S_exchangeEquipmentCard::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
}

// -------------------------------------------------------------------

// S2C_exchangeEquipmentCardRes

// required int32 cardid = 1;
inline bool S2C_exchangeEquipmentCardRes::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_exchangeEquipmentCardRes::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_exchangeEquipmentCardRes::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_exchangeEquipmentCardRes::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 S2C_exchangeEquipmentCardRes::cardid() const {
  return cardid_;
}
inline void S2C_exchangeEquipmentCardRes::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
}

// required int32 isSuccess = 2;
inline bool S2C_exchangeEquipmentCardRes::has_issuccess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_exchangeEquipmentCardRes::set_has_issuccess() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_exchangeEquipmentCardRes::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_exchangeEquipmentCardRes::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 S2C_exchangeEquipmentCardRes::issuccess() const {
  return issuccess_;
}
inline void S2C_exchangeEquipmentCardRes::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARDSYSTEM

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CARDSYSTEM::S2C_FailStrengthCard_REASON>() {
  return ::CARDSYSTEM::S2C_FailStrengthCard_REASON_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CARDSYSTEM::S2C_failComposeCard_REASON>() {
  return ::CARDSYSTEM::S2C_failComposeCard_REASON_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cardsystem_2eproto__INCLUDED
