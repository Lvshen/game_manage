// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#ifndef PROTOBUF_action_2eproto__INCLUDED
#define PROTOBUF_action_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_action_2eproto();
void protobuf_AssignDesc_action_2eproto();
void protobuf_ShutdownFile_action_2eproto();

class C2S_DicingPower;
class C2S_Action;
class BuildReq;
class BankruptReq;
class CoinThrowReq;
class HoldPeakReq;
class EscIslandReq;
class StartPointReq;
class FlyPointReq;
class UseCard;
class RandEventReq;
class RandEventReq_CmdCardReq;
class RandEventReq_AttackReq;
class RandEventReq_AttackReq_ChangeCityReq;
class RandEventReq_GetCardReq;

// ===================================================================

class C2S_DicingPower : public ::google::protobuf::Message {
 public:
  C2S_DicingPower();
  virtual ~C2S_DicingPower();

  C2S_DicingPower(const C2S_DicingPower& from);

  inline C2S_DicingPower& operator=(const C2S_DicingPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_DicingPower& default_instance();

  void Swap(C2S_DicingPower* other);

  // implements Message ----------------------------------------------

  C2S_DicingPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_DicingPower& from);
  void MergeFrom(const C2S_DicingPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 power = 1;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 dice_ctrl_type = 2;
  inline bool has_dice_ctrl_type() const;
  inline void clear_dice_ctrl_type();
  static const int kDiceCtrlTypeFieldNumber = 2;
  inline ::google::protobuf::int32 dice_ctrl_type() const;
  inline void set_dice_ctrl_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_DicingPower)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_dice_ctrl_type();
  inline void clear_has_dice_ctrl_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 dice_ctrl_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static C2S_DicingPower* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Action : public ::google::protobuf::Message {
 public:
  C2S_Action();
  virtual ~C2S_Action();

  C2S_Action(const C2S_Action& from);

  inline C2S_Action& operator=(const C2S_Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Action& default_instance();

  void Swap(C2S_Action* other);

  // implements Message ----------------------------------------------

  C2S_Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Action& from);
  void MergeFrom(const C2S_Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opra_type = 1;
  inline bool has_opra_type() const;
  inline void clear_opra_type();
  static const int kOpraTypeFieldNumber = 1;
  inline ::google::protobuf::int32 opra_type() const;
  inline void set_opra_type(::google::protobuf::int32 value);

  // optional .BuildReq build = 2;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 2;
  inline const ::BuildReq& build() const;
  inline ::BuildReq* mutable_build();
  inline ::BuildReq* release_build();
  inline void set_allocated_build(::BuildReq* build);

  // optional .BankruptReq bankrupt = 3;
  inline bool has_bankrupt() const;
  inline void clear_bankrupt();
  static const int kBankruptFieldNumber = 3;
  inline const ::BankruptReq& bankrupt() const;
  inline ::BankruptReq* mutable_bankrupt();
  inline ::BankruptReq* release_bankrupt();
  inline void set_allocated_bankrupt(::BankruptReq* bankrupt);

  // optional .CoinThrowReq coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline const ::CoinThrowReq& coin() const;
  inline ::CoinThrowReq* mutable_coin();
  inline ::CoinThrowReq* release_coin();
  inline void set_allocated_coin(::CoinThrowReq* coin);

  // optional .HoldPeakReq peak = 5;
  inline bool has_peak() const;
  inline void clear_peak();
  static const int kPeakFieldNumber = 5;
  inline const ::HoldPeakReq& peak() const;
  inline ::HoldPeakReq* mutable_peak();
  inline ::HoldPeakReq* release_peak();
  inline void set_allocated_peak(::HoldPeakReq* peak);

  // optional .EscIslandReq esc_island = 6;
  inline bool has_esc_island() const;
  inline void clear_esc_island();
  static const int kEscIslandFieldNumber = 6;
  inline const ::EscIslandReq& esc_island() const;
  inline ::EscIslandReq* mutable_esc_island();
  inline ::EscIslandReq* release_esc_island();
  inline void set_allocated_esc_island(::EscIslandReq* esc_island);

  // optional .StartPointReq start = 7;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 7;
  inline const ::StartPointReq& start() const;
  inline ::StartPointReq* mutable_start();
  inline ::StartPointReq* release_start();
  inline void set_allocated_start(::StartPointReq* start);

  // optional .RandEventReq rand_event_req = 8;
  inline bool has_rand_event_req() const;
  inline void clear_rand_event_req();
  static const int kRandEventReqFieldNumber = 8;
  inline const ::RandEventReq& rand_event_req() const;
  inline ::RandEventReq* mutable_rand_event_req();
  inline ::RandEventReq* release_rand_event_req();
  inline void set_allocated_rand_event_req(::RandEventReq* rand_event_req);

  // optional .UseCard use_card = 9;
  inline bool has_use_card() const;
  inline void clear_use_card();
  static const int kUseCardFieldNumber = 9;
  inline const ::UseCard& use_card() const;
  inline ::UseCard* mutable_use_card();
  inline ::UseCard* release_use_card();
  inline void set_allocated_use_card(::UseCard* use_card);

  // optional .FlyPointReq fly = 10;
  inline bool has_fly() const;
  inline void clear_fly();
  static const int kFlyFieldNumber = 10;
  inline const ::FlyPointReq& fly() const;
  inline ::FlyPointReq* mutable_fly();
  inline ::FlyPointReq* release_fly();
  inline void set_allocated_fly(::FlyPointReq* fly);

  // @@protoc_insertion_point(class_scope:C2S_Action)
 private:
  inline void set_has_opra_type();
  inline void clear_has_opra_type();
  inline void set_has_build();
  inline void clear_has_build();
  inline void set_has_bankrupt();
  inline void clear_has_bankrupt();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_peak();
  inline void clear_has_peak();
  inline void set_has_esc_island();
  inline void clear_has_esc_island();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_rand_event_req();
  inline void clear_has_rand_event_req();
  inline void set_has_use_card();
  inline void clear_has_use_card();
  inline void set_has_fly();
  inline void clear_has_fly();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::BuildReq* build_;
  ::BankruptReq* bankrupt_;
  ::CoinThrowReq* coin_;
  ::HoldPeakReq* peak_;
  ::EscIslandReq* esc_island_;
  ::StartPointReq* start_;
  ::RandEventReq* rand_event_req_;
  ::UseCard* use_card_;
  ::FlyPointReq* fly_;
  ::google::protobuf::int32 opra_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static C2S_Action* default_instance_;
};
// -------------------------------------------------------------------

class BuildReq : public ::google::protobuf::Message {
 public:
  BuildReq();
  virtual ~BuildReq();

  BuildReq(const BuildReq& from);

  inline BuildReq& operator=(const BuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildReq& default_instance();

  void Swap(BuildReq* other);

  // implements Message ----------------------------------------------

  BuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildReq& from);
  void MergeFrom(const BuildReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int32 lvl = 2;
  inline int lvl_size() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::int32 lvl(int index) const;
  inline void set_lvl(int index, ::google::protobuf::int32 value);
  inline void add_lvl(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lvl() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lvl();

  // @@protoc_insertion_point(class_scope:BuildReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lvl_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static BuildReq* default_instance_;
};
// -------------------------------------------------------------------

class BankruptReq : public ::google::protobuf::Message {
 public:
  BankruptReq();
  virtual ~BankruptReq();

  BankruptReq(const BankruptReq& from);

  inline BankruptReq& operator=(const BankruptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankruptReq& default_instance();

  void Swap(BankruptReq* other);

  // implements Message ----------------------------------------------

  BankruptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankruptReq& from);
  void MergeFrom(const BankruptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 deal_type = 1;
  inline bool has_deal_type() const;
  inline void clear_deal_type();
  static const int kDealTypeFieldNumber = 1;
  inline ::google::protobuf::int32 deal_type() const;
  inline void set_deal_type(::google::protobuf::int32 value);

  // repeated int32 sale_city_list = 2;
  inline int sale_city_list_size() const;
  inline void clear_sale_city_list();
  static const int kSaleCityListFieldNumber = 2;
  inline ::google::protobuf::int32 sale_city_list(int index) const;
  inline void set_sale_city_list(int index, ::google::protobuf::int32 value);
  inline void add_sale_city_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sale_city_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sale_city_list();

  // @@protoc_insertion_point(class_scope:BankruptReq)
 private:
  inline void set_has_deal_type();
  inline void clear_has_deal_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sale_city_list_;
  ::google::protobuf::int32 deal_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static BankruptReq* default_instance_;
};
// -------------------------------------------------------------------

class CoinThrowReq : public ::google::protobuf::Message {
 public:
  CoinThrowReq();
  virtual ~CoinThrowReq();

  CoinThrowReq(const CoinThrowReq& from);

  inline CoinThrowReq& operator=(const CoinThrowReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinThrowReq& default_instance();

  void Swap(CoinThrowReq* other);

  // implements Message ----------------------------------------------

  CoinThrowReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoinThrowReq& from);
  void MergeFrom(const CoinThrowReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 select = 1;
  inline bool has_select() const;
  inline void clear_select();
  static const int kSelectFieldNumber = 1;
  inline ::google::protobuf::int32 select() const;
  inline void set_select(::google::protobuf::int32 value);

  // optional int32 curr_stake = 2;
  inline bool has_curr_stake() const;
  inline void clear_curr_stake();
  static const int kCurrStakeFieldNumber = 2;
  inline ::google::protobuf::int32 curr_stake() const;
  inline void set_curr_stake(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CoinThrowReq)
 private:
  inline void set_has_select();
  inline void clear_has_select();
  inline void set_has_curr_stake();
  inline void clear_has_curr_stake();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 select_;
  ::google::protobuf::int32 curr_stake_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static CoinThrowReq* default_instance_;
};
// -------------------------------------------------------------------

class HoldPeakReq : public ::google::protobuf::Message {
 public:
  HoldPeakReq();
  virtual ~HoldPeakReq();

  HoldPeakReq(const HoldPeakReq& from);

  inline HoldPeakReq& operator=(const HoldPeakReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HoldPeakReq& default_instance();

  void Swap(HoldPeakReq* other);

  // implements Message ----------------------------------------------

  HoldPeakReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HoldPeakReq& from);
  void MergeFrom(const HoldPeakReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HoldPeakReq)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static HoldPeakReq* default_instance_;
};
// -------------------------------------------------------------------

class EscIslandReq : public ::google::protobuf::Message {
 public:
  EscIslandReq();
  virtual ~EscIslandReq();

  EscIslandReq(const EscIslandReq& from);

  inline EscIslandReq& operator=(const EscIslandReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EscIslandReq& default_instance();

  void Swap(EscIslandReq* other);

  // implements Message ----------------------------------------------

  EscIslandReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EscIslandReq& from);
  void MergeFrom(const EscIslandReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 esc_type = 1;
  inline bool has_esc_type() const;
  inline void clear_esc_type();
  static const int kEscTypeFieldNumber = 1;
  inline ::google::protobuf::int32 esc_type() const;
  inline void set_esc_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EscIslandReq)
 private:
  inline void set_has_esc_type();
  inline void clear_has_esc_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 esc_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static EscIslandReq* default_instance_;
};
// -------------------------------------------------------------------

class StartPointReq : public ::google::protobuf::Message {
 public:
  StartPointReq();
  virtual ~StartPointReq();

  StartPointReq(const StartPointReq& from);

  inline StartPointReq& operator=(const StartPointReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartPointReq& default_instance();

  void Swap(StartPointReq* other);

  // implements Message ----------------------------------------------

  StartPointReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartPointReq& from);
  void MergeFrom(const StartPointReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:StartPointReq)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static StartPointReq* default_instance_;
};
// -------------------------------------------------------------------

class FlyPointReq : public ::google::protobuf::Message {
 public:
  FlyPointReq();
  virtual ~FlyPointReq();

  FlyPointReq(const FlyPointReq& from);

  inline FlyPointReq& operator=(const FlyPointReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlyPointReq& default_instance();

  void Swap(FlyPointReq* other);

  // implements Message ----------------------------------------------

  FlyPointReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlyPointReq& from);
  void MergeFrom(const FlyPointReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FlyPointReq)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static FlyPointReq* default_instance_;
};
// -------------------------------------------------------------------

class UseCard : public ::google::protobuf::Message {
 public:
  UseCard();
  virtual ~UseCard();

  UseCard(const UseCard& from);

  inline UseCard& operator=(const UseCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseCard& default_instance();

  void Swap(UseCard* other);

  // implements Message ----------------------------------------------

  UseCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseCard& from);
  void MergeFrom(const UseCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_use = 1;
  inline bool has_is_use() const;
  inline void clear_is_use();
  static const int kIsUseFieldNumber = 1;
  inline bool is_use() const;
  inline void set_is_use(bool value);

  // required int32 card_type = 2;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UseCard)
 private:
  inline void set_has_is_use();
  inline void clear_has_is_use();
  inline void set_has_card_type();
  inline void clear_has_card_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_use_;
  ::google::protobuf::int32 card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static UseCard* default_instance_;
};
// -------------------------------------------------------------------

class RandEventReq_CmdCardReq : public ::google::protobuf::Message {
 public:
  RandEventReq_CmdCardReq();
  virtual ~RandEventReq_CmdCardReq();

  RandEventReq_CmdCardReq(const RandEventReq_CmdCardReq& from);

  inline RandEventReq_CmdCardReq& operator=(const RandEventReq_CmdCardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventReq_CmdCardReq& default_instance();

  void Swap(RandEventReq_CmdCardReq* other);

  // implements Message ----------------------------------------------

  RandEventReq_CmdCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventReq_CmdCardReq& from);
  void MergeFrom(const RandEventReq_CmdCardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 contribut_city = 1;
  inline bool has_contribut_city() const;
  inline void clear_contribut_city();
  static const int kContributCityFieldNumber = 1;
  inline ::google::protobuf::int32 contribut_city() const;
  inline void set_contribut_city(::google::protobuf::int32 value);

  // optional int32 contribut_role = 2;
  inline bool has_contribut_role() const;
  inline void clear_contribut_role();
  static const int kContributRoleFieldNumber = 2;
  inline ::google::protobuf::int32 contribut_role() const;
  inline void set_contribut_role(::google::protobuf::int32 value);

  // optional int32 hold_peak_city = 3;
  inline bool has_hold_peak_city() const;
  inline void clear_hold_peak_city();
  static const int kHoldPeakCityFieldNumber = 3;
  inline ::google::protobuf::int32 hold_peak_city() const;
  inline void set_hold_peak_city(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventReq.CmdCardReq)
 private:
  inline void set_has_contribut_city();
  inline void clear_has_contribut_city();
  inline void set_has_contribut_role();
  inline void clear_has_contribut_role();
  inline void set_has_hold_peak_city();
  inline void clear_has_hold_peak_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 contribut_city_;
  ::google::protobuf::int32 contribut_role_;
  ::google::protobuf::int32 hold_peak_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static RandEventReq_CmdCardReq* default_instance_;
};
// -------------------------------------------------------------------

class RandEventReq_AttackReq_ChangeCityReq : public ::google::protobuf::Message {
 public:
  RandEventReq_AttackReq_ChangeCityReq();
  virtual ~RandEventReq_AttackReq_ChangeCityReq();

  RandEventReq_AttackReq_ChangeCityReq(const RandEventReq_AttackReq_ChangeCityReq& from);

  inline RandEventReq_AttackReq_ChangeCityReq& operator=(const RandEventReq_AttackReq_ChangeCityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventReq_AttackReq_ChangeCityReq& default_instance();

  void Swap(RandEventReq_AttackReq_ChangeCityReq* other);

  // implements Message ----------------------------------------------

  RandEventReq_AttackReq_ChangeCityReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventReq_AttackReq_ChangeCityReq& from);
  void MergeFrom(const RandEventReq_AttackReq_ChangeCityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 my_city_index = 1;
  inline bool has_my_city_index() const;
  inline void clear_my_city_index();
  static const int kMyCityIndexFieldNumber = 1;
  inline ::google::protobuf::int32 my_city_index() const;
  inline void set_my_city_index(::google::protobuf::int32 value);

  // required int32 he_city_index = 2;
  inline bool has_he_city_index() const;
  inline void clear_he_city_index();
  static const int kHeCityIndexFieldNumber = 2;
  inline ::google::protobuf::int32 he_city_index() const;
  inline void set_he_city_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventReq.AttackReq.ChangeCityReq)
 private:
  inline void set_has_my_city_index();
  inline void clear_has_my_city_index();
  inline void set_has_he_city_index();
  inline void clear_has_he_city_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 my_city_index_;
  ::google::protobuf::int32 he_city_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static RandEventReq_AttackReq_ChangeCityReq* default_instance_;
};
// -------------------------------------------------------------------

class RandEventReq_AttackReq : public ::google::protobuf::Message {
 public:
  RandEventReq_AttackReq();
  virtual ~RandEventReq_AttackReq();

  RandEventReq_AttackReq(const RandEventReq_AttackReq& from);

  inline RandEventReq_AttackReq& operator=(const RandEventReq_AttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventReq_AttackReq& default_instance();

  void Swap(RandEventReq_AttackReq* other);

  // implements Message ----------------------------------------------

  RandEventReq_AttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventReq_AttackReq& from);
  void MergeFrom(const RandEventReq_AttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEventReq_AttackReq_ChangeCityReq ChangeCityReq;

  // accessors -------------------------------------------------------

  // optional int32 city_grid = 1;
  inline bool has_city_grid() const;
  inline void clear_city_grid();
  static const int kCityGridFieldNumber = 1;
  inline ::google::protobuf::int32 city_grid() const;
  inline void set_city_grid(::google::protobuf::int32 value);

  // optional .RandEventReq.AttackReq.ChangeCityReq change_city = 2;
  inline bool has_change_city() const;
  inline void clear_change_city();
  static const int kChangeCityFieldNumber = 2;
  inline const ::RandEventReq_AttackReq_ChangeCityReq& change_city() const;
  inline ::RandEventReq_AttackReq_ChangeCityReq* mutable_change_city();
  inline ::RandEventReq_AttackReq_ChangeCityReq* release_change_city();
  inline void set_allocated_change_city(::RandEventReq_AttackReq_ChangeCityReq* change_city);

  // @@protoc_insertion_point(class_scope:RandEventReq.AttackReq)
 private:
  inline void set_has_city_grid();
  inline void clear_has_city_grid();
  inline void set_has_change_city();
  inline void clear_has_change_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::RandEventReq_AttackReq_ChangeCityReq* change_city_;
  ::google::protobuf::int32 city_grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static RandEventReq_AttackReq* default_instance_;
};
// -------------------------------------------------------------------

class RandEventReq_GetCardReq : public ::google::protobuf::Message {
 public:
  RandEventReq_GetCardReq();
  virtual ~RandEventReq_GetCardReq();

  RandEventReq_GetCardReq(const RandEventReq_GetCardReq& from);

  inline RandEventReq_GetCardReq& operator=(const RandEventReq_GetCardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventReq_GetCardReq& default_instance();

  void Swap(RandEventReq_GetCardReq* other);

  // implements Message ----------------------------------------------

  RandEventReq_GetCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventReq_GetCardReq& from);
  void MergeFrom(const RandEventReq_GetCardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_save = 1;
  inline bool has_is_save() const;
  inline void clear_is_save();
  static const int kIsSaveFieldNumber = 1;
  inline bool is_save() const;
  inline void set_is_save(bool value);

  // optional int32 card_type = 2;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RandEventReq.GetCardReq)
 private:
  inline void set_has_is_save();
  inline void clear_has_is_save();
  inline void set_has_card_type();
  inline void clear_has_card_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_save_;
  ::google::protobuf::int32 card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static RandEventReq_GetCardReq* default_instance_;
};
// -------------------------------------------------------------------

class RandEventReq : public ::google::protobuf::Message {
 public:
  RandEventReq();
  virtual ~RandEventReq();

  RandEventReq(const RandEventReq& from);

  inline RandEventReq& operator=(const RandEventReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandEventReq& default_instance();

  void Swap(RandEventReq* other);

  // implements Message ----------------------------------------------

  RandEventReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandEventReq& from);
  void MergeFrom(const RandEventReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RandEventReq_CmdCardReq CmdCardReq;
  typedef RandEventReq_AttackReq AttackReq;
  typedef RandEventReq_GetCardReq GetCardReq;

  // accessors -------------------------------------------------------

  // required int32 card_type = 1;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 card_type() const;
  inline void set_card_type(::google::protobuf::int32 value);

  // required int32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional .RandEventReq.CmdCardReq cmd_card_req = 3;
  inline bool has_cmd_card_req() const;
  inline void clear_cmd_card_req();
  static const int kCmdCardReqFieldNumber = 3;
  inline const ::RandEventReq_CmdCardReq& cmd_card_req() const;
  inline ::RandEventReq_CmdCardReq* mutable_cmd_card_req();
  inline ::RandEventReq_CmdCardReq* release_cmd_card_req();
  inline void set_allocated_cmd_card_req(::RandEventReq_CmdCardReq* cmd_card_req);

  // optional .RandEventReq.AttackReq attack_req = 4;
  inline bool has_attack_req() const;
  inline void clear_attack_req();
  static const int kAttackReqFieldNumber = 4;
  inline const ::RandEventReq_AttackReq& attack_req() const;
  inline ::RandEventReq_AttackReq* mutable_attack_req();
  inline ::RandEventReq_AttackReq* release_attack_req();
  inline void set_allocated_attack_req(::RandEventReq_AttackReq* attack_req);

  // optional .RandEventReq.GetCardReq get_card_req = 5;
  inline bool has_get_card_req() const;
  inline void clear_get_card_req();
  static const int kGetCardReqFieldNumber = 5;
  inline const ::RandEventReq_GetCardReq& get_card_req() const;
  inline ::RandEventReq_GetCardReq* mutable_get_card_req();
  inline ::RandEventReq_GetCardReq* release_get_card_req();
  inline void set_allocated_get_card_req(::RandEventReq_GetCardReq* get_card_req);

  // @@protoc_insertion_point(class_scope:RandEventReq)
 private:
  inline void set_has_card_type();
  inline void clear_has_card_type();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_cmd_card_req();
  inline void clear_has_cmd_card_req();
  inline void set_has_attack_req();
  inline void clear_has_attack_req();
  inline void set_has_get_card_req();
  inline void clear_has_get_card_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 event_id_;
  ::RandEventReq_CmdCardReq* cmd_card_req_;
  ::RandEventReq_AttackReq* attack_req_;
  ::RandEventReq_GetCardReq* get_card_req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_action_2eproto();
  friend void protobuf_AssignDesc_action_2eproto();
  friend void protobuf_ShutdownFile_action_2eproto();

  void InitAsDefaultInstance();
  static RandEventReq* default_instance_;
};
// ===================================================================


// ===================================================================

// C2S_DicingPower

// required int32 power = 1;
inline bool C2S_DicingPower::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_DicingPower::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_DicingPower::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_DicingPower::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 C2S_DicingPower::power() const {
  return power_;
}
inline void C2S_DicingPower::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 dice_ctrl_type = 2;
inline bool C2S_DicingPower::has_dice_ctrl_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_DicingPower::set_has_dice_ctrl_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_DicingPower::clear_has_dice_ctrl_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_DicingPower::clear_dice_ctrl_type() {
  dice_ctrl_type_ = 0;
  clear_has_dice_ctrl_type();
}
inline ::google::protobuf::int32 C2S_DicingPower::dice_ctrl_type() const {
  return dice_ctrl_type_;
}
inline void C2S_DicingPower::set_dice_ctrl_type(::google::protobuf::int32 value) {
  set_has_dice_ctrl_type();
  dice_ctrl_type_ = value;
}

// -------------------------------------------------------------------

// C2S_Action

// required int32 opra_type = 1;
inline bool C2S_Action::has_opra_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_Action::set_has_opra_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_Action::clear_has_opra_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_Action::clear_opra_type() {
  opra_type_ = 0;
  clear_has_opra_type();
}
inline ::google::protobuf::int32 C2S_Action::opra_type() const {
  return opra_type_;
}
inline void C2S_Action::set_opra_type(::google::protobuf::int32 value) {
  set_has_opra_type();
  opra_type_ = value;
}

// optional .BuildReq build = 2;
inline bool C2S_Action::has_build() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_Action::set_has_build() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_Action::clear_has_build() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_Action::clear_build() {
  if (build_ != NULL) build_->::BuildReq::Clear();
  clear_has_build();
}
inline const ::BuildReq& C2S_Action::build() const {
  return build_ != NULL ? *build_ : *default_instance_->build_;
}
inline ::BuildReq* C2S_Action::mutable_build() {
  set_has_build();
  if (build_ == NULL) build_ = new ::BuildReq;
  return build_;
}
inline ::BuildReq* C2S_Action::release_build() {
  clear_has_build();
  ::BuildReq* temp = build_;
  build_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_build(::BuildReq* build) {
  delete build_;
  build_ = build;
  if (build) {
    set_has_build();
  } else {
    clear_has_build();
  }
}

// optional .BankruptReq bankrupt = 3;
inline bool C2S_Action::has_bankrupt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S_Action::set_has_bankrupt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S_Action::clear_has_bankrupt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2S_Action::clear_bankrupt() {
  if (bankrupt_ != NULL) bankrupt_->::BankruptReq::Clear();
  clear_has_bankrupt();
}
inline const ::BankruptReq& C2S_Action::bankrupt() const {
  return bankrupt_ != NULL ? *bankrupt_ : *default_instance_->bankrupt_;
}
inline ::BankruptReq* C2S_Action::mutable_bankrupt() {
  set_has_bankrupt();
  if (bankrupt_ == NULL) bankrupt_ = new ::BankruptReq;
  return bankrupt_;
}
inline ::BankruptReq* C2S_Action::release_bankrupt() {
  clear_has_bankrupt();
  ::BankruptReq* temp = bankrupt_;
  bankrupt_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_bankrupt(::BankruptReq* bankrupt) {
  delete bankrupt_;
  bankrupt_ = bankrupt;
  if (bankrupt) {
    set_has_bankrupt();
  } else {
    clear_has_bankrupt();
  }
}

// optional .CoinThrowReq coin = 4;
inline bool C2S_Action::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2S_Action::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2S_Action::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2S_Action::clear_coin() {
  if (coin_ != NULL) coin_->::CoinThrowReq::Clear();
  clear_has_coin();
}
inline const ::CoinThrowReq& C2S_Action::coin() const {
  return coin_ != NULL ? *coin_ : *default_instance_->coin_;
}
inline ::CoinThrowReq* C2S_Action::mutable_coin() {
  set_has_coin();
  if (coin_ == NULL) coin_ = new ::CoinThrowReq;
  return coin_;
}
inline ::CoinThrowReq* C2S_Action::release_coin() {
  clear_has_coin();
  ::CoinThrowReq* temp = coin_;
  coin_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_coin(::CoinThrowReq* coin) {
  delete coin_;
  coin_ = coin;
  if (coin) {
    set_has_coin();
  } else {
    clear_has_coin();
  }
}

// optional .HoldPeakReq peak = 5;
inline bool C2S_Action::has_peak() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2S_Action::set_has_peak() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2S_Action::clear_has_peak() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2S_Action::clear_peak() {
  if (peak_ != NULL) peak_->::HoldPeakReq::Clear();
  clear_has_peak();
}
inline const ::HoldPeakReq& C2S_Action::peak() const {
  return peak_ != NULL ? *peak_ : *default_instance_->peak_;
}
inline ::HoldPeakReq* C2S_Action::mutable_peak() {
  set_has_peak();
  if (peak_ == NULL) peak_ = new ::HoldPeakReq;
  return peak_;
}
inline ::HoldPeakReq* C2S_Action::release_peak() {
  clear_has_peak();
  ::HoldPeakReq* temp = peak_;
  peak_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_peak(::HoldPeakReq* peak) {
  delete peak_;
  peak_ = peak;
  if (peak) {
    set_has_peak();
  } else {
    clear_has_peak();
  }
}

// optional .EscIslandReq esc_island = 6;
inline bool C2S_Action::has_esc_island() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2S_Action::set_has_esc_island() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2S_Action::clear_has_esc_island() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2S_Action::clear_esc_island() {
  if (esc_island_ != NULL) esc_island_->::EscIslandReq::Clear();
  clear_has_esc_island();
}
inline const ::EscIslandReq& C2S_Action::esc_island() const {
  return esc_island_ != NULL ? *esc_island_ : *default_instance_->esc_island_;
}
inline ::EscIslandReq* C2S_Action::mutable_esc_island() {
  set_has_esc_island();
  if (esc_island_ == NULL) esc_island_ = new ::EscIslandReq;
  return esc_island_;
}
inline ::EscIslandReq* C2S_Action::release_esc_island() {
  clear_has_esc_island();
  ::EscIslandReq* temp = esc_island_;
  esc_island_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_esc_island(::EscIslandReq* esc_island) {
  delete esc_island_;
  esc_island_ = esc_island;
  if (esc_island) {
    set_has_esc_island();
  } else {
    clear_has_esc_island();
  }
}

// optional .StartPointReq start = 7;
inline bool C2S_Action::has_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2S_Action::set_has_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2S_Action::clear_has_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2S_Action::clear_start() {
  if (start_ != NULL) start_->::StartPointReq::Clear();
  clear_has_start();
}
inline const ::StartPointReq& C2S_Action::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::StartPointReq* C2S_Action::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::StartPointReq;
  return start_;
}
inline ::StartPointReq* C2S_Action::release_start() {
  clear_has_start();
  ::StartPointReq* temp = start_;
  start_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_start(::StartPointReq* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
}

// optional .RandEventReq rand_event_req = 8;
inline bool C2S_Action::has_rand_event_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2S_Action::set_has_rand_event_req() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2S_Action::clear_has_rand_event_req() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2S_Action::clear_rand_event_req() {
  if (rand_event_req_ != NULL) rand_event_req_->::RandEventReq::Clear();
  clear_has_rand_event_req();
}
inline const ::RandEventReq& C2S_Action::rand_event_req() const {
  return rand_event_req_ != NULL ? *rand_event_req_ : *default_instance_->rand_event_req_;
}
inline ::RandEventReq* C2S_Action::mutable_rand_event_req() {
  set_has_rand_event_req();
  if (rand_event_req_ == NULL) rand_event_req_ = new ::RandEventReq;
  return rand_event_req_;
}
inline ::RandEventReq* C2S_Action::release_rand_event_req() {
  clear_has_rand_event_req();
  ::RandEventReq* temp = rand_event_req_;
  rand_event_req_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_rand_event_req(::RandEventReq* rand_event_req) {
  delete rand_event_req_;
  rand_event_req_ = rand_event_req;
  if (rand_event_req) {
    set_has_rand_event_req();
  } else {
    clear_has_rand_event_req();
  }
}

// optional .UseCard use_card = 9;
inline bool C2S_Action::has_use_card() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void C2S_Action::set_has_use_card() {
  _has_bits_[0] |= 0x00000100u;
}
inline void C2S_Action::clear_has_use_card() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void C2S_Action::clear_use_card() {
  if (use_card_ != NULL) use_card_->::UseCard::Clear();
  clear_has_use_card();
}
inline const ::UseCard& C2S_Action::use_card() const {
  return use_card_ != NULL ? *use_card_ : *default_instance_->use_card_;
}
inline ::UseCard* C2S_Action::mutable_use_card() {
  set_has_use_card();
  if (use_card_ == NULL) use_card_ = new ::UseCard;
  return use_card_;
}
inline ::UseCard* C2S_Action::release_use_card() {
  clear_has_use_card();
  ::UseCard* temp = use_card_;
  use_card_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_use_card(::UseCard* use_card) {
  delete use_card_;
  use_card_ = use_card;
  if (use_card) {
    set_has_use_card();
  } else {
    clear_has_use_card();
  }
}

// optional .FlyPointReq fly = 10;
inline bool C2S_Action::has_fly() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void C2S_Action::set_has_fly() {
  _has_bits_[0] |= 0x00000200u;
}
inline void C2S_Action::clear_has_fly() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void C2S_Action::clear_fly() {
  if (fly_ != NULL) fly_->::FlyPointReq::Clear();
  clear_has_fly();
}
inline const ::FlyPointReq& C2S_Action::fly() const {
  return fly_ != NULL ? *fly_ : *default_instance_->fly_;
}
inline ::FlyPointReq* C2S_Action::mutable_fly() {
  set_has_fly();
  if (fly_ == NULL) fly_ = new ::FlyPointReq;
  return fly_;
}
inline ::FlyPointReq* C2S_Action::release_fly() {
  clear_has_fly();
  ::FlyPointReq* temp = fly_;
  fly_ = NULL;
  return temp;
}
inline void C2S_Action::set_allocated_fly(::FlyPointReq* fly) {
  delete fly_;
  fly_ = fly;
  if (fly) {
    set_has_fly();
  } else {
    clear_has_fly();
  }
}

// -------------------------------------------------------------------

// BuildReq

// required int32 type = 1;
inline bool BuildReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuildReq::type() const {
  return type_;
}
inline void BuildReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated int32 lvl = 2;
inline int BuildReq::lvl_size() const {
  return lvl_.size();
}
inline void BuildReq::clear_lvl() {
  lvl_.Clear();
}
inline ::google::protobuf::int32 BuildReq::lvl(int index) const {
  return lvl_.Get(index);
}
inline void BuildReq::set_lvl(int index, ::google::protobuf::int32 value) {
  lvl_.Set(index, value);
}
inline void BuildReq::add_lvl(::google::protobuf::int32 value) {
  lvl_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuildReq::lvl() const {
  return lvl_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuildReq::mutable_lvl() {
  return &lvl_;
}

// -------------------------------------------------------------------

// BankruptReq

// required int32 deal_type = 1;
inline bool BankruptReq::has_deal_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankruptReq::set_has_deal_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankruptReq::clear_has_deal_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankruptReq::clear_deal_type() {
  deal_type_ = 0;
  clear_has_deal_type();
}
inline ::google::protobuf::int32 BankruptReq::deal_type() const {
  return deal_type_;
}
inline void BankruptReq::set_deal_type(::google::protobuf::int32 value) {
  set_has_deal_type();
  deal_type_ = value;
}

// repeated int32 sale_city_list = 2;
inline int BankruptReq::sale_city_list_size() const {
  return sale_city_list_.size();
}
inline void BankruptReq::clear_sale_city_list() {
  sale_city_list_.Clear();
}
inline ::google::protobuf::int32 BankruptReq::sale_city_list(int index) const {
  return sale_city_list_.Get(index);
}
inline void BankruptReq::set_sale_city_list(int index, ::google::protobuf::int32 value) {
  sale_city_list_.Set(index, value);
}
inline void BankruptReq::add_sale_city_list(::google::protobuf::int32 value) {
  sale_city_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BankruptReq::sale_city_list() const {
  return sale_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BankruptReq::mutable_sale_city_list() {
  return &sale_city_list_;
}

// -------------------------------------------------------------------

// CoinThrowReq

// required int32 select = 1;
inline bool CoinThrowReq::has_select() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoinThrowReq::set_has_select() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoinThrowReq::clear_has_select() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoinThrowReq::clear_select() {
  select_ = 0;
  clear_has_select();
}
inline ::google::protobuf::int32 CoinThrowReq::select() const {
  return select_;
}
inline void CoinThrowReq::set_select(::google::protobuf::int32 value) {
  set_has_select();
  select_ = value;
}

// optional int32 curr_stake = 2;
inline bool CoinThrowReq::has_curr_stake() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoinThrowReq::set_has_curr_stake() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoinThrowReq::clear_has_curr_stake() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoinThrowReq::clear_curr_stake() {
  curr_stake_ = 0;
  clear_has_curr_stake();
}
inline ::google::protobuf::int32 CoinThrowReq::curr_stake() const {
  return curr_stake_;
}
inline void CoinThrowReq::set_curr_stake(::google::protobuf::int32 value) {
  set_has_curr_stake();
  curr_stake_ = value;
}

// -------------------------------------------------------------------

// HoldPeakReq

// required int32 grid_index = 1;
inline bool HoldPeakReq::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HoldPeakReq::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HoldPeakReq::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HoldPeakReq::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 HoldPeakReq::grid_index() const {
  return grid_index_;
}
inline void HoldPeakReq::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// EscIslandReq

// required int32 esc_type = 1;
inline bool EscIslandReq::has_esc_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EscIslandReq::set_has_esc_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EscIslandReq::clear_has_esc_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EscIslandReq::clear_esc_type() {
  esc_type_ = 0;
  clear_has_esc_type();
}
inline ::google::protobuf::int32 EscIslandReq::esc_type() const {
  return esc_type_;
}
inline void EscIslandReq::set_esc_type(::google::protobuf::int32 value) {
  set_has_esc_type();
  esc_type_ = value;
}

// -------------------------------------------------------------------

// StartPointReq

// required int32 grid_index = 1;
inline bool StartPointReq::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartPointReq::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartPointReq::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartPointReq::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 StartPointReq::grid_index() const {
  return grid_index_;
}
inline void StartPointReq::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// FlyPointReq

// required int32 grid_index = 1;
inline bool FlyPointReq::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlyPointReq::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlyPointReq::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlyPointReq::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 FlyPointReq::grid_index() const {
  return grid_index_;
}
inline void FlyPointReq::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// UseCard

// required bool is_use = 1;
inline bool UseCard::has_is_use() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseCard::set_has_is_use() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseCard::clear_has_is_use() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseCard::clear_is_use() {
  is_use_ = false;
  clear_has_is_use();
}
inline bool UseCard::is_use() const {
  return is_use_;
}
inline void UseCard::set_is_use(bool value) {
  set_has_is_use();
  is_use_ = value;
}

// required int32 card_type = 2;
inline bool UseCard::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseCard::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseCard::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseCard::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 UseCard::card_type() const {
  return card_type_;
}
inline void UseCard::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// -------------------------------------------------------------------

// RandEventReq_CmdCardReq

// optional int32 contribut_city = 1;
inline bool RandEventReq_CmdCardReq::has_contribut_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventReq_CmdCardReq::set_has_contribut_city() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventReq_CmdCardReq::clear_has_contribut_city() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventReq_CmdCardReq::clear_contribut_city() {
  contribut_city_ = 0;
  clear_has_contribut_city();
}
inline ::google::protobuf::int32 RandEventReq_CmdCardReq::contribut_city() const {
  return contribut_city_;
}
inline void RandEventReq_CmdCardReq::set_contribut_city(::google::protobuf::int32 value) {
  set_has_contribut_city();
  contribut_city_ = value;
}

// optional int32 contribut_role = 2;
inline bool RandEventReq_CmdCardReq::has_contribut_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventReq_CmdCardReq::set_has_contribut_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventReq_CmdCardReq::clear_has_contribut_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventReq_CmdCardReq::clear_contribut_role() {
  contribut_role_ = 0;
  clear_has_contribut_role();
}
inline ::google::protobuf::int32 RandEventReq_CmdCardReq::contribut_role() const {
  return contribut_role_;
}
inline void RandEventReq_CmdCardReq::set_contribut_role(::google::protobuf::int32 value) {
  set_has_contribut_role();
  contribut_role_ = value;
}

// optional int32 hold_peak_city = 3;
inline bool RandEventReq_CmdCardReq::has_hold_peak_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventReq_CmdCardReq::set_has_hold_peak_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventReq_CmdCardReq::clear_has_hold_peak_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventReq_CmdCardReq::clear_hold_peak_city() {
  hold_peak_city_ = 0;
  clear_has_hold_peak_city();
}
inline ::google::protobuf::int32 RandEventReq_CmdCardReq::hold_peak_city() const {
  return hold_peak_city_;
}
inline void RandEventReq_CmdCardReq::set_hold_peak_city(::google::protobuf::int32 value) {
  set_has_hold_peak_city();
  hold_peak_city_ = value;
}

// -------------------------------------------------------------------

// RandEventReq_AttackReq_ChangeCityReq

// required int32 my_city_index = 1;
inline bool RandEventReq_AttackReq_ChangeCityReq::has_my_city_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventReq_AttackReq_ChangeCityReq::set_has_my_city_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventReq_AttackReq_ChangeCityReq::clear_has_my_city_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventReq_AttackReq_ChangeCityReq::clear_my_city_index() {
  my_city_index_ = 0;
  clear_has_my_city_index();
}
inline ::google::protobuf::int32 RandEventReq_AttackReq_ChangeCityReq::my_city_index() const {
  return my_city_index_;
}
inline void RandEventReq_AttackReq_ChangeCityReq::set_my_city_index(::google::protobuf::int32 value) {
  set_has_my_city_index();
  my_city_index_ = value;
}

// required int32 he_city_index = 2;
inline bool RandEventReq_AttackReq_ChangeCityReq::has_he_city_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventReq_AttackReq_ChangeCityReq::set_has_he_city_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventReq_AttackReq_ChangeCityReq::clear_has_he_city_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventReq_AttackReq_ChangeCityReq::clear_he_city_index() {
  he_city_index_ = 0;
  clear_has_he_city_index();
}
inline ::google::protobuf::int32 RandEventReq_AttackReq_ChangeCityReq::he_city_index() const {
  return he_city_index_;
}
inline void RandEventReq_AttackReq_ChangeCityReq::set_he_city_index(::google::protobuf::int32 value) {
  set_has_he_city_index();
  he_city_index_ = value;
}

// -------------------------------------------------------------------

// RandEventReq_AttackReq

// optional int32 city_grid = 1;
inline bool RandEventReq_AttackReq::has_city_grid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventReq_AttackReq::set_has_city_grid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventReq_AttackReq::clear_has_city_grid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventReq_AttackReq::clear_city_grid() {
  city_grid_ = 0;
  clear_has_city_grid();
}
inline ::google::protobuf::int32 RandEventReq_AttackReq::city_grid() const {
  return city_grid_;
}
inline void RandEventReq_AttackReq::set_city_grid(::google::protobuf::int32 value) {
  set_has_city_grid();
  city_grid_ = value;
}

// optional .RandEventReq.AttackReq.ChangeCityReq change_city = 2;
inline bool RandEventReq_AttackReq::has_change_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventReq_AttackReq::set_has_change_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventReq_AttackReq::clear_has_change_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventReq_AttackReq::clear_change_city() {
  if (change_city_ != NULL) change_city_->::RandEventReq_AttackReq_ChangeCityReq::Clear();
  clear_has_change_city();
}
inline const ::RandEventReq_AttackReq_ChangeCityReq& RandEventReq_AttackReq::change_city() const {
  return change_city_ != NULL ? *change_city_ : *default_instance_->change_city_;
}
inline ::RandEventReq_AttackReq_ChangeCityReq* RandEventReq_AttackReq::mutable_change_city() {
  set_has_change_city();
  if (change_city_ == NULL) change_city_ = new ::RandEventReq_AttackReq_ChangeCityReq;
  return change_city_;
}
inline ::RandEventReq_AttackReq_ChangeCityReq* RandEventReq_AttackReq::release_change_city() {
  clear_has_change_city();
  ::RandEventReq_AttackReq_ChangeCityReq* temp = change_city_;
  change_city_ = NULL;
  return temp;
}
inline void RandEventReq_AttackReq::set_allocated_change_city(::RandEventReq_AttackReq_ChangeCityReq* change_city) {
  delete change_city_;
  change_city_ = change_city;
  if (change_city) {
    set_has_change_city();
  } else {
    clear_has_change_city();
  }
}

// -------------------------------------------------------------------

// RandEventReq_GetCardReq

// required bool is_save = 1;
inline bool RandEventReq_GetCardReq::has_is_save() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventReq_GetCardReq::set_has_is_save() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventReq_GetCardReq::clear_has_is_save() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventReq_GetCardReq::clear_is_save() {
  is_save_ = false;
  clear_has_is_save();
}
inline bool RandEventReq_GetCardReq::is_save() const {
  return is_save_;
}
inline void RandEventReq_GetCardReq::set_is_save(bool value) {
  set_has_is_save();
  is_save_ = value;
}

// optional int32 card_type = 2;
inline bool RandEventReq_GetCardReq::has_card_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventReq_GetCardReq::set_has_card_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventReq_GetCardReq::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventReq_GetCardReq::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 RandEventReq_GetCardReq::card_type() const {
  return card_type_;
}
inline void RandEventReq_GetCardReq::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// -------------------------------------------------------------------

// RandEventReq

// required int32 card_type = 1;
inline bool RandEventReq::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandEventReq::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandEventReq::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandEventReq::clear_card_type() {
  card_type_ = 0;
  clear_has_card_type();
}
inline ::google::protobuf::int32 RandEventReq::card_type() const {
  return card_type_;
}
inline void RandEventReq::set_card_type(::google::protobuf::int32 value) {
  set_has_card_type();
  card_type_ = value;
}

// required int32 event_id = 2;
inline bool RandEventReq::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandEventReq::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandEventReq::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandEventReq::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 RandEventReq::event_id() const {
  return event_id_;
}
inline void RandEventReq::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional .RandEventReq.CmdCardReq cmd_card_req = 3;
inline bool RandEventReq::has_cmd_card_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandEventReq::set_has_cmd_card_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandEventReq::clear_has_cmd_card_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandEventReq::clear_cmd_card_req() {
  if (cmd_card_req_ != NULL) cmd_card_req_->::RandEventReq_CmdCardReq::Clear();
  clear_has_cmd_card_req();
}
inline const ::RandEventReq_CmdCardReq& RandEventReq::cmd_card_req() const {
  return cmd_card_req_ != NULL ? *cmd_card_req_ : *default_instance_->cmd_card_req_;
}
inline ::RandEventReq_CmdCardReq* RandEventReq::mutable_cmd_card_req() {
  set_has_cmd_card_req();
  if (cmd_card_req_ == NULL) cmd_card_req_ = new ::RandEventReq_CmdCardReq;
  return cmd_card_req_;
}
inline ::RandEventReq_CmdCardReq* RandEventReq::release_cmd_card_req() {
  clear_has_cmd_card_req();
  ::RandEventReq_CmdCardReq* temp = cmd_card_req_;
  cmd_card_req_ = NULL;
  return temp;
}
inline void RandEventReq::set_allocated_cmd_card_req(::RandEventReq_CmdCardReq* cmd_card_req) {
  delete cmd_card_req_;
  cmd_card_req_ = cmd_card_req;
  if (cmd_card_req) {
    set_has_cmd_card_req();
  } else {
    clear_has_cmd_card_req();
  }
}

// optional .RandEventReq.AttackReq attack_req = 4;
inline bool RandEventReq::has_attack_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandEventReq::set_has_attack_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandEventReq::clear_has_attack_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandEventReq::clear_attack_req() {
  if (attack_req_ != NULL) attack_req_->::RandEventReq_AttackReq::Clear();
  clear_has_attack_req();
}
inline const ::RandEventReq_AttackReq& RandEventReq::attack_req() const {
  return attack_req_ != NULL ? *attack_req_ : *default_instance_->attack_req_;
}
inline ::RandEventReq_AttackReq* RandEventReq::mutable_attack_req() {
  set_has_attack_req();
  if (attack_req_ == NULL) attack_req_ = new ::RandEventReq_AttackReq;
  return attack_req_;
}
inline ::RandEventReq_AttackReq* RandEventReq::release_attack_req() {
  clear_has_attack_req();
  ::RandEventReq_AttackReq* temp = attack_req_;
  attack_req_ = NULL;
  return temp;
}
inline void RandEventReq::set_allocated_attack_req(::RandEventReq_AttackReq* attack_req) {
  delete attack_req_;
  attack_req_ = attack_req;
  if (attack_req) {
    set_has_attack_req();
  } else {
    clear_has_attack_req();
  }
}

// optional .RandEventReq.GetCardReq get_card_req = 5;
inline bool RandEventReq::has_get_card_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RandEventReq::set_has_get_card_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RandEventReq::clear_has_get_card_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RandEventReq::clear_get_card_req() {
  if (get_card_req_ != NULL) get_card_req_->::RandEventReq_GetCardReq::Clear();
  clear_has_get_card_req();
}
inline const ::RandEventReq_GetCardReq& RandEventReq::get_card_req() const {
  return get_card_req_ != NULL ? *get_card_req_ : *default_instance_->get_card_req_;
}
inline ::RandEventReq_GetCardReq* RandEventReq::mutable_get_card_req() {
  set_has_get_card_req();
  if (get_card_req_ == NULL) get_card_req_ = new ::RandEventReq_GetCardReq;
  return get_card_req_;
}
inline ::RandEventReq_GetCardReq* RandEventReq::release_get_card_req() {
  clear_has_get_card_req();
  ::RandEventReq_GetCardReq* temp = get_card_req_;
  get_card_req_ = NULL;
  return temp;
}
inline void RandEventReq::set_allocated_get_card_req(::RandEventReq_GetCardReq* get_card_req) {
  delete get_card_req_;
  get_card_req_ = get_card_req;
  if (get_card_req) {
    set_has_get_card_req();
  } else {
    clear_has_get_card_req();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_action_2eproto__INCLUDED
