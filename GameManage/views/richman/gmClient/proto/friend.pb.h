// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db_cache.pb.h"
// @@protoc_insertion_point(includes)

namespace FRIEND {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class FriendInfo;
class PlayerFriendInfo;
class C2S_SearchFriend;
class S2C_SearchFrindAnsList;
class F2D_GetRecommandFriendList;
class C2S_AddToMyFriend;
class C2S_AddToMyFriend_Rsp;
class S2C_PleaseConfirmFriend;
class ComfirmFriend;
class C2S_ComfirmFriend;
class S2C_AddFriendToList;
class S2C_AllFriendList;
class F2D_AllFriendRoleIdList;
class C2S_DeleteMyFriend;
class S2C_DeleteMyFriendRsp;
class F2P_NotifyAllFriendOnline;
class S2C_NotifyAllFriendOnline;
class S2C_RankingGlodcoin_Rsp;
class S2C_RankingChange;

enum S2C_SearchFrindAnsList_STATUS {
  S2C_SearchFrindAnsList_STATUS_SUCCESS = 1,
  S2C_SearchFrindAnsList_STATUS_STRING_EXCEPTION = 2,
  S2C_SearchFrindAnsList_STATUS_NO_SEARCH_ANS = 3
};
bool S2C_SearchFrindAnsList_STATUS_IsValid(int value);
const S2C_SearchFrindAnsList_STATUS S2C_SearchFrindAnsList_STATUS_STATUS_MIN = S2C_SearchFrindAnsList_STATUS_SUCCESS;
const S2C_SearchFrindAnsList_STATUS S2C_SearchFrindAnsList_STATUS_STATUS_MAX = S2C_SearchFrindAnsList_STATUS_NO_SEARCH_ANS;
const int S2C_SearchFrindAnsList_STATUS_STATUS_ARRAYSIZE = S2C_SearchFrindAnsList_STATUS_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_SearchFrindAnsList_STATUS_descriptor();
inline const ::std::string& S2C_SearchFrindAnsList_STATUS_Name(S2C_SearchFrindAnsList_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_SearchFrindAnsList_STATUS_descriptor(), value);
}
inline bool S2C_SearchFrindAnsList_STATUS_Parse(
    const ::std::string& name, S2C_SearchFrindAnsList_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_SearchFrindAnsList_STATUS>(
    S2C_SearchFrindAnsList_STATUS_descriptor(), name, value);
}
enum C2S_AddToMyFriend_Rsp_STATUS {
  C2S_AddToMyFriend_Rsp_STATUS_FRIEND_LIST_FULL = 1,
  C2S_AddToMyFriend_Rsp_STATUS_ADD_YOURSELF = 2,
  C2S_AddToMyFriend_Rsp_STATUS_IN_FRIEND_LIST = 4,
  C2S_AddToMyFriend_Rsp_STATUS_IN_FEER_COMFIRMED_LIST = 8,
  C2S_AddToMyFriend_Rsp_STATUS_IN_COMFIRMED_LIST = 16,
  C2S_AddToMyFriend_Rsp_STATUS_SUCCESS = 32
};
bool C2S_AddToMyFriend_Rsp_STATUS_IsValid(int value);
const C2S_AddToMyFriend_Rsp_STATUS C2S_AddToMyFriend_Rsp_STATUS_STATUS_MIN = C2S_AddToMyFriend_Rsp_STATUS_FRIEND_LIST_FULL;
const C2S_AddToMyFriend_Rsp_STATUS C2S_AddToMyFriend_Rsp_STATUS_STATUS_MAX = C2S_AddToMyFriend_Rsp_STATUS_SUCCESS;
const int C2S_AddToMyFriend_Rsp_STATUS_STATUS_ARRAYSIZE = C2S_AddToMyFriend_Rsp_STATUS_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2S_AddToMyFriend_Rsp_STATUS_descriptor();
inline const ::std::string& C2S_AddToMyFriend_Rsp_STATUS_Name(C2S_AddToMyFriend_Rsp_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2S_AddToMyFriend_Rsp_STATUS_descriptor(), value);
}
inline bool C2S_AddToMyFriend_Rsp_STATUS_Parse(
    const ::std::string& name, C2S_AddToMyFriend_Rsp_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2S_AddToMyFriend_Rsp_STATUS>(
    C2S_AddToMyFriend_Rsp_STATUS_descriptor(), name, value);
}
enum S2C_AllFriendList_STATUS {
  S2C_AllFriendList_STATUS_SUCCESS = 0,
  S2C_AllFriendList_STATUS_FAIL = 1
};
bool S2C_AllFriendList_STATUS_IsValid(int value);
const S2C_AllFriendList_STATUS S2C_AllFriendList_STATUS_STATUS_MIN = S2C_AllFriendList_STATUS_SUCCESS;
const S2C_AllFriendList_STATUS S2C_AllFriendList_STATUS_STATUS_MAX = S2C_AllFriendList_STATUS_FAIL;
const int S2C_AllFriendList_STATUS_STATUS_ARRAYSIZE = S2C_AllFriendList_STATUS_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_AllFriendList_STATUS_descriptor();
inline const ::std::string& S2C_AllFriendList_STATUS_Name(S2C_AllFriendList_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_AllFriendList_STATUS_descriptor(), value);
}
inline bool S2C_AllFriendList_STATUS_Parse(
    const ::std::string& name, S2C_AllFriendList_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_AllFriendList_STATUS>(
    S2C_AllFriendList_STATUS_descriptor(), name, value);
}
enum S2C_DeleteMyFriendRsp_STATUS {
  S2C_DeleteMyFriendRsp_STATUS_SUCCESS = 0,
  S2C_DeleteMyFriendRsp_STATUS_FAIL = 1
};
bool S2C_DeleteMyFriendRsp_STATUS_IsValid(int value);
const S2C_DeleteMyFriendRsp_STATUS S2C_DeleteMyFriendRsp_STATUS_STATUS_MIN = S2C_DeleteMyFriendRsp_STATUS_SUCCESS;
const S2C_DeleteMyFriendRsp_STATUS S2C_DeleteMyFriendRsp_STATUS_STATUS_MAX = S2C_DeleteMyFriendRsp_STATUS_FAIL;
const int S2C_DeleteMyFriendRsp_STATUS_STATUS_ARRAYSIZE = S2C_DeleteMyFriendRsp_STATUS_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_DeleteMyFriendRsp_STATUS_descriptor();
inline const ::std::string& S2C_DeleteMyFriendRsp_STATUS_Name(S2C_DeleteMyFriendRsp_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_DeleteMyFriendRsp_STATUS_descriptor(), value);
}
inline bool S2C_DeleteMyFriendRsp_STATUS_Parse(
    const ::std::string& name, S2C_DeleteMyFriendRsp_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_DeleteMyFriendRsp_STATUS>(
    S2C_DeleteMyFriendRsp_STATUS_descriptor(), name, value);
}
enum F2P_NotifyAllFriendOnline_status {
  F2P_NotifyAllFriendOnline_status_OFFLINE = 1,
  F2P_NotifyAllFriendOnline_status_ONLINE = 2
};
bool F2P_NotifyAllFriendOnline_status_IsValid(int value);
const F2P_NotifyAllFriendOnline_status F2P_NotifyAllFriendOnline_status_status_MIN = F2P_NotifyAllFriendOnline_status_OFFLINE;
const F2P_NotifyAllFriendOnline_status F2P_NotifyAllFriendOnline_status_status_MAX = F2P_NotifyAllFriendOnline_status_ONLINE;
const int F2P_NotifyAllFriendOnline_status_status_ARRAYSIZE = F2P_NotifyAllFriendOnline_status_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* F2P_NotifyAllFriendOnline_status_descriptor();
inline const ::std::string& F2P_NotifyAllFriendOnline_status_Name(F2P_NotifyAllFriendOnline_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    F2P_NotifyAllFriendOnline_status_descriptor(), value);
}
inline bool F2P_NotifyAllFriendOnline_status_Parse(
    const ::std::string& name, F2P_NotifyAllFriendOnline_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<F2P_NotifyAllFriendOnline_status>(
    F2P_NotifyAllFriendOnline_status_descriptor(), name, value);
}
enum S2C_NotifyAllFriendOnline_status {
  S2C_NotifyAllFriendOnline_status_OFFLINE = 1,
  S2C_NotifyAllFriendOnline_status_ONLINE = 2
};
bool S2C_NotifyAllFriendOnline_status_IsValid(int value);
const S2C_NotifyAllFriendOnline_status S2C_NotifyAllFriendOnline_status_status_MIN = S2C_NotifyAllFriendOnline_status_OFFLINE;
const S2C_NotifyAllFriendOnline_status S2C_NotifyAllFriendOnline_status_status_MAX = S2C_NotifyAllFriendOnline_status_ONLINE;
const int S2C_NotifyAllFriendOnline_status_status_ARRAYSIZE = S2C_NotifyAllFriendOnline_status_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_NotifyAllFriendOnline_status_descriptor();
inline const ::std::string& S2C_NotifyAllFriendOnline_status_Name(S2C_NotifyAllFriendOnline_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_NotifyAllFriendOnline_status_descriptor(), value);
}
inline bool S2C_NotifyAllFriendOnline_status_Parse(
    const ::std::string& name, S2C_NotifyAllFriendOnline_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_NotifyAllFriendOnline_status>(
    S2C_NotifyAllFriendOnline_status_descriptor(), name, value);
}
enum S2C_RankingGlodcoin_Rsp_RETCODE {
  S2C_RankingGlodcoin_Rsp_RETCODE_SUCCESS = 1,
  S2C_RankingGlodcoin_Rsp_RETCODE_HADGOT = 2,
  S2C_RankingGlodcoin_Rsp_RETCODE_NOFRIEND = 3,
  S2C_RankingGlodcoin_Rsp_RETCODE_EXCEPTION = 4
};
bool S2C_RankingGlodcoin_Rsp_RETCODE_IsValid(int value);
const S2C_RankingGlodcoin_Rsp_RETCODE S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_MIN = S2C_RankingGlodcoin_Rsp_RETCODE_SUCCESS;
const S2C_RankingGlodcoin_Rsp_RETCODE S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_MAX = S2C_RankingGlodcoin_Rsp_RETCODE_EXCEPTION;
const int S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_ARRAYSIZE = S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_RankingGlodcoin_Rsp_RETCODE_descriptor();
inline const ::std::string& S2C_RankingGlodcoin_Rsp_RETCODE_Name(S2C_RankingGlodcoin_Rsp_RETCODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_RankingGlodcoin_Rsp_RETCODE_descriptor(), value);
}
inline bool S2C_RankingGlodcoin_Rsp_RETCODE_Parse(
    const ::std::string& name, S2C_RankingGlodcoin_Rsp_RETCODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_RankingGlodcoin_Rsp_RETCODE>(
    S2C_RankingGlodcoin_Rsp_RETCODE_descriptor(), name, value);
}
// ===================================================================

class FriendInfo : public ::google::protobuf::Message {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfo& default_instance();

  void Swap(FriendInfo* other);

  // implements Message ----------------------------------------------

  FriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // optional bytes nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional int64 points = 3;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline ::google::protobuf::int64 points() const;
  inline void set_points(::google::protobuf::int64 value);

  // optional int32 equipmentCardId = 4;
  inline bool has_equipmentcardid() const;
  inline void clear_equipmentcardid();
  static const int kEquipmentCardIdFieldNumber = 4;
  inline ::google::protobuf::int32 equipmentcardid() const;
  inline void set_equipmentcardid(::google::protobuf::int32 value);

  // optional int32 current_die_id = 5;
  inline bool has_current_die_id() const;
  inline void clear_current_die_id();
  static const int kCurrentDieIdFieldNumber = 5;
  inline ::google::protobuf::int32 current_die_id() const;
  inline void set_current_die_id(::google::protobuf::int32 value);

  // optional bytes under_write = 6;
  inline bool has_under_write() const;
  inline void clear_under_write();
  static const int kUnderWriteFieldNumber = 6;
  inline const ::std::string& under_write() const;
  inline void set_under_write(const ::std::string& value);
  inline void set_under_write(const char* value);
  inline void set_under_write(const void* value, size_t size);
  inline ::std::string* mutable_under_write();
  inline ::std::string* release_under_write();
  inline void set_allocated_under_write(::std::string* under_write);

  // optional int32 head_icon = 7;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 7;
  inline ::google::protobuf::int32 head_icon() const;
  inline void set_head_icon(::google::protobuf::int32 value);

  // repeated .DBCACHE.PlayerGameRecord game_record = 8;
  inline int game_record_size() const;
  inline void clear_game_record();
  static const int kGameRecordFieldNumber = 8;
  inline const ::DBCACHE::PlayerGameRecord& game_record(int index) const;
  inline ::DBCACHE::PlayerGameRecord* mutable_game_record(int index);
  inline ::DBCACHE::PlayerGameRecord* add_game_record();
  inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >&
      game_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >*
      mutable_game_record();

  // optional int32 send_clover_time = 9;
  inline bool has_send_clover_time() const;
  inline void clear_send_clover_time();
  static const int kSendCloverTimeFieldNumber = 9;
  inline ::google::protobuf::int32 send_clover_time() const;
  inline void set_send_clover_time(::google::protobuf::int32 value);

  // optional int32 isOnline = 10;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsOnlineFieldNumber = 10;
  inline ::google::protobuf::int32 isonline() const;
  inline void set_isonline(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.FriendInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_equipmentcardid();
  inline void clear_has_equipmentcardid();
  inline void set_has_current_die_id();
  inline void clear_has_current_die_id();
  inline void set_has_under_write();
  inline void clear_has_under_write();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_send_clover_time();
  inline void clear_has_send_clover_time();
  inline void set_has_isonline();
  inline void clear_has_isonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nick_name_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 equipmentcardid_;
  ::google::protobuf::int64 points_;
  ::std::string* under_write_;
  ::google::protobuf::int32 current_die_id_;
  ::google::protobuf::int32 head_icon_;
  ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord > game_record_;
  ::google::protobuf::int32 send_clover_time_;
  ::google::protobuf::int32 isonline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static FriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerFriendInfo : public ::google::protobuf::Message {
 public:
  PlayerFriendInfo();
  virtual ~PlayerFriendInfo();

  PlayerFriendInfo(const PlayerFriendInfo& from);

  inline PlayerFriendInfo& operator=(const PlayerFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerFriendInfo& default_instance();

  void Swap(PlayerFriendInfo* other);

  // implements Message ----------------------------------------------

  PlayerFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerFriendInfo& from);
  void MergeFrom(const PlayerFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FRIEND.FriendInfo friend = 1;
  inline int friend__size() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::FRIEND::FriendInfo& friend_(int index) const;
  inline ::FRIEND::FriendInfo* mutable_friend_(int index);
  inline ::FRIEND::FriendInfo* add_friend_();
  inline const ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >&
      friend_() const;
  inline ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >*
      mutable_friend_();

  // repeated .FRIEND.FriendInfo ToBeConfirmedFriend = 2;
  inline int tobeconfirmedfriend_size() const;
  inline void clear_tobeconfirmedfriend();
  static const int kToBeConfirmedFriendFieldNumber = 2;
  inline const ::FRIEND::FriendInfo& tobeconfirmedfriend(int index) const;
  inline ::FRIEND::FriendInfo* mutable_tobeconfirmedfriend(int index);
  inline ::FRIEND::FriendInfo* add_tobeconfirmedfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >&
      tobeconfirmedfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >*
      mutable_tobeconfirmedfriend();

  // repeated int32 apply_friendid = 3;
  inline int apply_friendid_size() const;
  inline void clear_apply_friendid();
  static const int kApplyFriendidFieldNumber = 3;
  inline ::google::protobuf::int32 apply_friendid(int index) const;
  inline void set_apply_friendid(int index, ::google::protobuf::int32 value);
  inline void add_apply_friendid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      apply_friendid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_apply_friendid();

  // optional int32 mypoints = 4;
  inline bool has_mypoints() const;
  inline void clear_mypoints();
  static const int kMypointsFieldNumber = 4;
  inline ::google::protobuf::int32 mypoints() const;
  inline void set_mypoints(::google::protobuf::int32 value);

  // optional bytes nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 last_week_rank = 6;
  inline bool has_last_week_rank() const;
  inline void clear_last_week_rank();
  static const int kLastWeekRankFieldNumber = 6;
  inline ::google::protobuf::int32 last_week_rank() const;
  inline void set_last_week_rank(::google::protobuf::int32 value);

  // optional int32 last_week_rank_change_time = 7;
  inline bool has_last_week_rank_change_time() const;
  inline void clear_last_week_rank_change_time();
  static const int kLastWeekRankChangeTimeFieldNumber = 7;
  inline ::google::protobuf::int32 last_week_rank_change_time() const;
  inline void set_last_week_rank_change_time(::google::protobuf::int32 value);

  // optional int32 last_week_point = 8;
  inline bool has_last_week_point() const;
  inline void clear_last_week_point();
  static const int kLastWeekPointFieldNumber = 8;
  inline ::google::protobuf::int32 last_week_point() const;
  inline void set_last_week_point(::google::protobuf::int32 value);

  // optional int32 this_week_rank = 9;
  inline bool has_this_week_rank() const;
  inline void clear_this_week_rank();
  static const int kThisWeekRankFieldNumber = 9;
  inline ::google::protobuf::int32 this_week_rank() const;
  inline void set_this_week_rank(::google::protobuf::int32 value);

  // optional int32 this_week_rank_change_time = 10;
  inline bool has_this_week_rank_change_time() const;
  inline void clear_this_week_rank_change_time();
  static const int kThisWeekRankChangeTimeFieldNumber = 10;
  inline ::google::protobuf::int32 this_week_rank_change_time() const;
  inline void set_this_week_rank_change_time(::google::protobuf::int32 value);

  // optional int32 this_week_point = 11;
  inline bool has_this_week_point() const;
  inline void clear_this_week_point();
  static const int kThisWeekPointFieldNumber = 11;
  inline ::google::protobuf::int32 this_week_point() const;
  inline void set_this_week_point(::google::protobuf::int32 value);

  // optional int32 last_rank_reward_time = 12;
  inline bool has_last_rank_reward_time() const;
  inline void clear_last_rank_reward_time();
  static const int kLastRankRewardTimeFieldNumber = 12;
  inline ::google::protobuf::int32 last_rank_reward_time() const;
  inline void set_last_rank_reward_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.PlayerFriendInfo)
 private:
  inline void set_has_mypoints();
  inline void clear_has_mypoints();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_last_week_rank();
  inline void clear_has_last_week_rank();
  inline void set_has_last_week_rank_change_time();
  inline void clear_has_last_week_rank_change_time();
  inline void set_has_last_week_point();
  inline void clear_has_last_week_point();
  inline void set_has_this_week_rank();
  inline void clear_has_this_week_rank();
  inline void set_has_this_week_rank_change_time();
  inline void clear_has_this_week_rank_change_time();
  inline void set_has_this_week_point();
  inline void clear_has_this_week_point();
  inline void set_has_last_rank_reward_time();
  inline void clear_has_last_rank_reward_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo > friend__;
  ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo > tobeconfirmedfriend_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > apply_friendid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 mypoints_;
  ::google::protobuf::int32 last_week_rank_;
  ::google::protobuf::int32 last_week_rank_change_time_;
  ::google::protobuf::int32 last_week_point_;
  ::google::protobuf::int32 this_week_rank_;
  ::google::protobuf::int32 this_week_rank_change_time_;
  ::google::protobuf::int32 this_week_point_;
  ::google::protobuf::int32 last_rank_reward_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static PlayerFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2S_SearchFriend : public ::google::protobuf::Message {
 public:
  C2S_SearchFriend();
  virtual ~C2S_SearchFriend();

  C2S_SearchFriend(const C2S_SearchFriend& from);

  inline C2S_SearchFriend& operator=(const C2S_SearchFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_SearchFriend& default_instance();

  void Swap(C2S_SearchFriend* other);

  // implements Message ----------------------------------------------

  C2S_SearchFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_SearchFriend& from);
  void MergeFrom(const C2S_SearchFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes keyWorld = 1;
  inline bool has_keyworld() const;
  inline void clear_keyworld();
  static const int kKeyWorldFieldNumber = 1;
  inline const ::std::string& keyworld() const;
  inline void set_keyworld(const ::std::string& value);
  inline void set_keyworld(const char* value);
  inline void set_keyworld(const void* value, size_t size);
  inline ::std::string* mutable_keyworld();
  inline ::std::string* release_keyworld();
  inline void set_allocated_keyworld(::std::string* keyworld);

  // @@protoc_insertion_point(class_scope:FRIEND.C2S_SearchFriend)
 private:
  inline void set_has_keyworld();
  inline void clear_has_keyworld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* keyworld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static C2S_SearchFriend* default_instance_;
};
// -------------------------------------------------------------------

class S2C_SearchFrindAnsList : public ::google::protobuf::Message {
 public:
  S2C_SearchFrindAnsList();
  virtual ~S2C_SearchFrindAnsList();

  S2C_SearchFrindAnsList(const S2C_SearchFrindAnsList& from);

  inline S2C_SearchFrindAnsList& operator=(const S2C_SearchFrindAnsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_SearchFrindAnsList& default_instance();

  void Swap(S2C_SearchFrindAnsList* other);

  // implements Message ----------------------------------------------

  S2C_SearchFrindAnsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_SearchFrindAnsList& from);
  void MergeFrom(const S2C_SearchFrindAnsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_SearchFrindAnsList_STATUS STATUS;
  static const STATUS SUCCESS = S2C_SearchFrindAnsList_STATUS_SUCCESS;
  static const STATUS STRING_EXCEPTION = S2C_SearchFrindAnsList_STATUS_STRING_EXCEPTION;
  static const STATUS NO_SEARCH_ANS = S2C_SearchFrindAnsList_STATUS_NO_SEARCH_ANS;
  static inline bool STATUS_IsValid(int value) {
    return S2C_SearchFrindAnsList_STATUS_IsValid(value);
  }
  static const STATUS STATUS_MIN =
    S2C_SearchFrindAnsList_STATUS_STATUS_MIN;
  static const STATUS STATUS_MAX =
    S2C_SearchFrindAnsList_STATUS_STATUS_MAX;
  static const int STATUS_ARRAYSIZE =
    S2C_SearchFrindAnsList_STATUS_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  STATUS_descriptor() {
    return S2C_SearchFrindAnsList_STATUS_descriptor();
  }
  static inline const ::std::string& STATUS_Name(STATUS value) {
    return S2C_SearchFrindAnsList_STATUS_Name(value);
  }
  static inline bool STATUS_Parse(const ::std::string& name,
      STATUS* value) {
    return S2C_SearchFrindAnsList_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // repeated .FRIEND.FriendInfo user = 2;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::FRIEND::FriendInfo& user(int index) const;
  inline ::FRIEND::FriendInfo* mutable_user(int index);
  inline ::FRIEND::FriendInfo* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >*
      mutable_user();

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_SearchFrindAnsList)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo > user_;
  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_SearchFrindAnsList* default_instance_;
};
// -------------------------------------------------------------------

class F2D_GetRecommandFriendList : public ::google::protobuf::Message {
 public:
  F2D_GetRecommandFriendList();
  virtual ~F2D_GetRecommandFriendList();

  F2D_GetRecommandFriendList(const F2D_GetRecommandFriendList& from);

  inline F2D_GetRecommandFriendList& operator=(const F2D_GetRecommandFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const F2D_GetRecommandFriendList& default_instance();

  void Swap(F2D_GetRecommandFriendList* other);

  // implements Message ----------------------------------------------

  F2D_GetRecommandFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const F2D_GetRecommandFriendList& from);
  void MergeFrom(const F2D_GetRecommandFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 role_id = 1;
  inline int role_id_size() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id(int index) const;
  inline void set_role_id(int index, ::google::protobuf::int32 value);
  inline void add_role_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      role_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_role_id();

  // @@protoc_insertion_point(class_scope:FRIEND.F2D_GetRecommandFriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static F2D_GetRecommandFriendList* default_instance_;
};
// -------------------------------------------------------------------

class C2S_AddToMyFriend : public ::google::protobuf::Message {
 public:
  C2S_AddToMyFriend();
  virtual ~C2S_AddToMyFriend();

  C2S_AddToMyFriend(const C2S_AddToMyFriend& from);

  inline C2S_AddToMyFriend& operator=(const C2S_AddToMyFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_AddToMyFriend& default_instance();

  void Swap(C2S_AddToMyFriend* other);

  // implements Message ----------------------------------------------

  C2S_AddToMyFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_AddToMyFriend& from);
  void MergeFrom(const C2S_AddToMyFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline ::google::protobuf::int32 user() const;
  inline void set_user(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.C2S_AddToMyFriend)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static C2S_AddToMyFriend* default_instance_;
};
// -------------------------------------------------------------------

class C2S_AddToMyFriend_Rsp : public ::google::protobuf::Message {
 public:
  C2S_AddToMyFriend_Rsp();
  virtual ~C2S_AddToMyFriend_Rsp();

  C2S_AddToMyFriend_Rsp(const C2S_AddToMyFriend_Rsp& from);

  inline C2S_AddToMyFriend_Rsp& operator=(const C2S_AddToMyFriend_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_AddToMyFriend_Rsp& default_instance();

  void Swap(C2S_AddToMyFriend_Rsp* other);

  // implements Message ----------------------------------------------

  C2S_AddToMyFriend_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_AddToMyFriend_Rsp& from);
  void MergeFrom(const C2S_AddToMyFriend_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef C2S_AddToMyFriend_Rsp_STATUS STATUS;
  static const STATUS FRIEND_LIST_FULL = C2S_AddToMyFriend_Rsp_STATUS_FRIEND_LIST_FULL;
  static const STATUS ADD_YOURSELF = C2S_AddToMyFriend_Rsp_STATUS_ADD_YOURSELF;
  static const STATUS IN_FRIEND_LIST = C2S_AddToMyFriend_Rsp_STATUS_IN_FRIEND_LIST;
  static const STATUS IN_FEER_COMFIRMED_LIST = C2S_AddToMyFriend_Rsp_STATUS_IN_FEER_COMFIRMED_LIST;
  static const STATUS IN_COMFIRMED_LIST = C2S_AddToMyFriend_Rsp_STATUS_IN_COMFIRMED_LIST;
  static const STATUS SUCCESS = C2S_AddToMyFriend_Rsp_STATUS_SUCCESS;
  static inline bool STATUS_IsValid(int value) {
    return C2S_AddToMyFriend_Rsp_STATUS_IsValid(value);
  }
  static const STATUS STATUS_MIN =
    C2S_AddToMyFriend_Rsp_STATUS_STATUS_MIN;
  static const STATUS STATUS_MAX =
    C2S_AddToMyFriend_Rsp_STATUS_STATUS_MAX;
  static const int STATUS_ARRAYSIZE =
    C2S_AddToMyFriend_Rsp_STATUS_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  STATUS_descriptor() {
    return C2S_AddToMyFriend_Rsp_STATUS_descriptor();
  }
  static inline const ::std::string& STATUS_Name(STATUS value) {
    return C2S_AddToMyFriend_Rsp_STATUS_Name(value);
  }
  static inline bool STATUS_Parse(const ::std::string& name,
      STATUS* value) {
    return C2S_AddToMyFriend_Rsp_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.C2S_AddToMyFriend_Rsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static C2S_AddToMyFriend_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_PleaseConfirmFriend : public ::google::protobuf::Message {
 public:
  S2C_PleaseConfirmFriend();
  virtual ~S2C_PleaseConfirmFriend();

  S2C_PleaseConfirmFriend(const S2C_PleaseConfirmFriend& from);

  inline S2C_PleaseConfirmFriend& operator=(const S2C_PleaseConfirmFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_PleaseConfirmFriend& default_instance();

  void Swap(S2C_PleaseConfirmFriend* other);

  // implements Message ----------------------------------------------

  S2C_PleaseConfirmFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_PleaseConfirmFriend& from);
  void MergeFrom(const S2C_PleaseConfirmFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FRIEND.FriendInfo userSrc = 1;
  inline bool has_usersrc() const;
  inline void clear_usersrc();
  static const int kUserSrcFieldNumber = 1;
  inline const ::FRIEND::FriendInfo& usersrc() const;
  inline ::FRIEND::FriendInfo* mutable_usersrc();
  inline ::FRIEND::FriendInfo* release_usersrc();
  inline void set_allocated_usersrc(::FRIEND::FriendInfo* usersrc);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_PleaseConfirmFriend)
 private:
  inline void set_has_usersrc();
  inline void clear_has_usersrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FRIEND::FriendInfo* usersrc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_PleaseConfirmFriend* default_instance_;
};
// -------------------------------------------------------------------

class ComfirmFriend : public ::google::protobuf::Message {
 public:
  ComfirmFriend();
  virtual ~ComfirmFriend();

  ComfirmFriend(const ComfirmFriend& from);

  inline ComfirmFriend& operator=(const ComfirmFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComfirmFriend& default_instance();

  void Swap(ComfirmFriend* other);

  // implements Message ----------------------------------------------

  ComfirmFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComfirmFriend& from);
  void MergeFrom(const ComfirmFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.ComfirmFriend)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ComfirmFriend* default_instance_;
};
// -------------------------------------------------------------------

class C2S_ComfirmFriend : public ::google::protobuf::Message {
 public:
  C2S_ComfirmFriend();
  virtual ~C2S_ComfirmFriend();

  C2S_ComfirmFriend(const C2S_ComfirmFriend& from);

  inline C2S_ComfirmFriend& operator=(const C2S_ComfirmFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_ComfirmFriend& default_instance();

  void Swap(C2S_ComfirmFriend* other);

  // implements Message ----------------------------------------------

  C2S_ComfirmFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_ComfirmFriend& from);
  void MergeFrom(const C2S_ComfirmFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isComfirm = 1;
  inline bool has_iscomfirm() const;
  inline void clear_iscomfirm();
  static const int kIsComfirmFieldNumber = 1;
  inline ::google::protobuf::int32 iscomfirm() const;
  inline void set_iscomfirm(::google::protobuf::int32 value);

  // optional int32 userSrc = 2;
  inline bool has_usersrc() const;
  inline void clear_usersrc();
  static const int kUserSrcFieldNumber = 2;
  inline ::google::protobuf::int32 usersrc() const;
  inline void set_usersrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.C2S_ComfirmFriend)
 private:
  inline void set_has_iscomfirm();
  inline void clear_has_iscomfirm();
  inline void set_has_usersrc();
  inline void clear_has_usersrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iscomfirm_;
  ::google::protobuf::int32 usersrc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static C2S_ComfirmFriend* default_instance_;
};
// -------------------------------------------------------------------

class S2C_AddFriendToList : public ::google::protobuf::Message {
 public:
  S2C_AddFriendToList();
  virtual ~S2C_AddFriendToList();

  S2C_AddFriendToList(const S2C_AddFriendToList& from);

  inline S2C_AddFriendToList& operator=(const S2C_AddFriendToList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_AddFriendToList& default_instance();

  void Swap(S2C_AddFriendToList* other);

  // implements Message ----------------------------------------------

  S2C_AddFriendToList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_AddFriendToList& from);
  void MergeFrom(const S2C_AddFriendToList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FRIEND.FriendInfo user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::FRIEND::FriendInfo& user() const;
  inline ::FRIEND::FriendInfo* mutable_user();
  inline ::FRIEND::FriendInfo* release_user();
  inline void set_allocated_user(::FRIEND::FriendInfo* user);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_AddFriendToList)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FRIEND::FriendInfo* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_AddFriendToList* default_instance_;
};
// -------------------------------------------------------------------

class S2C_AllFriendList : public ::google::protobuf::Message {
 public:
  S2C_AllFriendList();
  virtual ~S2C_AllFriendList();

  S2C_AllFriendList(const S2C_AllFriendList& from);

  inline S2C_AllFriendList& operator=(const S2C_AllFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_AllFriendList& default_instance();

  void Swap(S2C_AllFriendList* other);

  // implements Message ----------------------------------------------

  S2C_AllFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_AllFriendList& from);
  void MergeFrom(const S2C_AllFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_AllFriendList_STATUS STATUS;
  static const STATUS SUCCESS = S2C_AllFriendList_STATUS_SUCCESS;
  static const STATUS FAIL = S2C_AllFriendList_STATUS_FAIL;
  static inline bool STATUS_IsValid(int value) {
    return S2C_AllFriendList_STATUS_IsValid(value);
  }
  static const STATUS STATUS_MIN =
    S2C_AllFriendList_STATUS_STATUS_MIN;
  static const STATUS STATUS_MAX =
    S2C_AllFriendList_STATUS_STATUS_MAX;
  static const int STATUS_ARRAYSIZE =
    S2C_AllFriendList_STATUS_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  STATUS_descriptor() {
    return S2C_AllFriendList_STATUS_descriptor();
  }
  static inline const ::std::string& STATUS_Name(STATUS value) {
    return S2C_AllFriendList_STATUS_Name(value);
  }
  static inline bool STATUS_Parse(const ::std::string& name,
      STATUS* value) {
    return S2C_AllFriendList_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .FRIEND.PlayerFriendInfo myFriendsInfo = 1;
  inline bool has_myfriendsinfo() const;
  inline void clear_myfriendsinfo();
  static const int kMyFriendsInfoFieldNumber = 1;
  inline const ::FRIEND::PlayerFriendInfo& myfriendsinfo() const;
  inline ::FRIEND::PlayerFriendInfo* mutable_myfriendsinfo();
  inline ::FRIEND::PlayerFriendInfo* release_myfriendsinfo();
  inline void set_allocated_myfriendsinfo(::FRIEND::PlayerFriendInfo* myfriendsinfo);

  // optional int32 ret_code = 2;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_AllFriendList)
 private:
  inline void set_has_myfriendsinfo();
  inline void clear_has_myfriendsinfo();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FRIEND::PlayerFriendInfo* myfriendsinfo_;
  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_AllFriendList* default_instance_;
};
// -------------------------------------------------------------------

class F2D_AllFriendRoleIdList : public ::google::protobuf::Message {
 public:
  F2D_AllFriendRoleIdList();
  virtual ~F2D_AllFriendRoleIdList();

  F2D_AllFriendRoleIdList(const F2D_AllFriendRoleIdList& from);

  inline F2D_AllFriendRoleIdList& operator=(const F2D_AllFriendRoleIdList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const F2D_AllFriendRoleIdList& default_instance();

  void Swap(F2D_AllFriendRoleIdList* other);

  // implements Message ----------------------------------------------

  F2D_AllFriendRoleIdList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const F2D_AllFriendRoleIdList& from);
  void MergeFrom(const F2D_AllFriendRoleIdList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 friendId = 1;
  inline int friendid_size() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friendid(int index) const;
  inline void set_friendid(int index, ::google::protobuf::int32 value);
  inline void add_friendid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      friendid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_friendid();

  // repeated int32 ToBeConfirmedFriendID = 2;
  inline int tobeconfirmedfriendid_size() const;
  inline void clear_tobeconfirmedfriendid();
  static const int kToBeConfirmedFriendIDFieldNumber = 2;
  inline ::google::protobuf::int32 tobeconfirmedfriendid(int index) const;
  inline void set_tobeconfirmedfriendid(int index, ::google::protobuf::int32 value);
  inline void add_tobeconfirmedfriendid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tobeconfirmedfriendid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tobeconfirmedfriendid();

  // @@protoc_insertion_point(class_scope:FRIEND.F2D_AllFriendRoleIdList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > friendid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tobeconfirmedfriendid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static F2D_AllFriendRoleIdList* default_instance_;
};
// -------------------------------------------------------------------

class C2S_DeleteMyFriend : public ::google::protobuf::Message {
 public:
  C2S_DeleteMyFriend();
  virtual ~C2S_DeleteMyFriend();

  C2S_DeleteMyFriend(const C2S_DeleteMyFriend& from);

  inline C2S_DeleteMyFriend& operator=(const C2S_DeleteMyFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_DeleteMyFriend& default_instance();

  void Swap(C2S_DeleteMyFriend* other);

  // implements Message ----------------------------------------------

  C2S_DeleteMyFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_DeleteMyFriend& from);
  void MergeFrom(const C2S_DeleteMyFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.C2S_DeleteMyFriend)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static C2S_DeleteMyFriend* default_instance_;
};
// -------------------------------------------------------------------

class S2C_DeleteMyFriendRsp : public ::google::protobuf::Message {
 public:
  S2C_DeleteMyFriendRsp();
  virtual ~S2C_DeleteMyFriendRsp();

  S2C_DeleteMyFriendRsp(const S2C_DeleteMyFriendRsp& from);

  inline S2C_DeleteMyFriendRsp& operator=(const S2C_DeleteMyFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_DeleteMyFriendRsp& default_instance();

  void Swap(S2C_DeleteMyFriendRsp* other);

  // implements Message ----------------------------------------------

  S2C_DeleteMyFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_DeleteMyFriendRsp& from);
  void MergeFrom(const S2C_DeleteMyFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_DeleteMyFriendRsp_STATUS STATUS;
  static const STATUS SUCCESS = S2C_DeleteMyFriendRsp_STATUS_SUCCESS;
  static const STATUS FAIL = S2C_DeleteMyFriendRsp_STATUS_FAIL;
  static inline bool STATUS_IsValid(int value) {
    return S2C_DeleteMyFriendRsp_STATUS_IsValid(value);
  }
  static const STATUS STATUS_MIN =
    S2C_DeleteMyFriendRsp_STATUS_STATUS_MIN;
  static const STATUS STATUS_MAX =
    S2C_DeleteMyFriendRsp_STATUS_STATUS_MAX;
  static const int STATUS_ARRAYSIZE =
    S2C_DeleteMyFriendRsp_STATUS_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  STATUS_descriptor() {
    return S2C_DeleteMyFriendRsp_STATUS_descriptor();
  }
  static inline const ::std::string& STATUS_Name(STATUS value) {
    return S2C_DeleteMyFriendRsp_STATUS_Name(value);
  }
  static inline bool STATUS_Parse(const ::std::string& name,
      STATUS* value) {
    return S2C_DeleteMyFriendRsp_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // required int32 isSuccess = 2;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 2;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // optional int32 reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_DeleteMyFriendRsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 issuccess_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_DeleteMyFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

class F2P_NotifyAllFriendOnline : public ::google::protobuf::Message {
 public:
  F2P_NotifyAllFriendOnline();
  virtual ~F2P_NotifyAllFriendOnline();

  F2P_NotifyAllFriendOnline(const F2P_NotifyAllFriendOnline& from);

  inline F2P_NotifyAllFriendOnline& operator=(const F2P_NotifyAllFriendOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const F2P_NotifyAllFriendOnline& default_instance();

  void Swap(F2P_NotifyAllFriendOnline* other);

  // implements Message ----------------------------------------------

  F2P_NotifyAllFriendOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const F2P_NotifyAllFriendOnline& from);
  void MergeFrom(const F2P_NotifyAllFriendOnline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef F2P_NotifyAllFriendOnline_status status;
  static const status OFFLINE = F2P_NotifyAllFriendOnline_status_OFFLINE;
  static const status ONLINE = F2P_NotifyAllFriendOnline_status_ONLINE;
  static inline bool status_IsValid(int value) {
    return F2P_NotifyAllFriendOnline_status_IsValid(value);
  }
  static const status status_MIN =
    F2P_NotifyAllFriendOnline_status_status_MIN;
  static const status status_MAX =
    F2P_NotifyAllFriendOnline_status_status_MAX;
  static const int status_ARRAYSIZE =
    F2P_NotifyAllFriendOnline_status_status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_descriptor() {
    return F2P_NotifyAllFriendOnline_status_descriptor();
  }
  static inline const ::std::string& status_Name(status value) {
    return F2P_NotifyAllFriendOnline_status_Name(value);
  }
  static inline bool status_Parse(const ::std::string& name,
      status* value) {
    return F2P_NotifyAllFriendOnline_status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 userid = 1;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid(int index) const;
  inline void set_userid(int index, ::google::protobuf::int32 value);
  inline void add_userid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userid();

  // required int32 theonlineuserid = 2;
  inline bool has_theonlineuserid() const;
  inline void clear_theonlineuserid();
  static const int kTheonlineuseridFieldNumber = 2;
  inline ::google::protobuf::int32 theonlineuserid() const;
  inline void set_theonlineuserid(::google::protobuf::int32 value);

  // required int32 onlineoroffline = 3;
  inline bool has_onlineoroffline() const;
  inline void clear_onlineoroffline();
  static const int kOnlineorofflineFieldNumber = 3;
  inline ::google::protobuf::int32 onlineoroffline() const;
  inline void set_onlineoroffline(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.F2P_NotifyAllFriendOnline)
 private:
  inline void set_has_theonlineuserid();
  inline void clear_has_theonlineuserid();
  inline void set_has_onlineoroffline();
  inline void clear_has_onlineoroffline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userid_;
  ::google::protobuf::int32 theonlineuserid_;
  ::google::protobuf::int32 onlineoroffline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static F2P_NotifyAllFriendOnline* default_instance_;
};
// -------------------------------------------------------------------

class S2C_NotifyAllFriendOnline : public ::google::protobuf::Message {
 public:
  S2C_NotifyAllFriendOnline();
  virtual ~S2C_NotifyAllFriendOnline();

  S2C_NotifyAllFriendOnline(const S2C_NotifyAllFriendOnline& from);

  inline S2C_NotifyAllFriendOnline& operator=(const S2C_NotifyAllFriendOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_NotifyAllFriendOnline& default_instance();

  void Swap(S2C_NotifyAllFriendOnline* other);

  // implements Message ----------------------------------------------

  S2C_NotifyAllFriendOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_NotifyAllFriendOnline& from);
  void MergeFrom(const S2C_NotifyAllFriendOnline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_NotifyAllFriendOnline_status status;
  static const status OFFLINE = S2C_NotifyAllFriendOnline_status_OFFLINE;
  static const status ONLINE = S2C_NotifyAllFriendOnline_status_ONLINE;
  static inline bool status_IsValid(int value) {
    return S2C_NotifyAllFriendOnline_status_IsValid(value);
  }
  static const status status_MIN =
    S2C_NotifyAllFriendOnline_status_status_MIN;
  static const status status_MAX =
    S2C_NotifyAllFriendOnline_status_status_MAX;
  static const int status_ARRAYSIZE =
    S2C_NotifyAllFriendOnline_status_status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_descriptor() {
    return S2C_NotifyAllFriendOnline_status_descriptor();
  }
  static inline const ::std::string& status_Name(status value) {
    return S2C_NotifyAllFriendOnline_status_Name(value);
  }
  static inline bool status_Parse(const ::std::string& name,
      status* value) {
    return S2C_NotifyAllFriendOnline_status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 userid = 1;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid(int index) const;
  inline void set_userid(int index, ::google::protobuf::int32 value);
  inline void add_userid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userid();

  // required int32 theonlineuserid = 2;
  inline bool has_theonlineuserid() const;
  inline void clear_theonlineuserid();
  static const int kTheonlineuseridFieldNumber = 2;
  inline ::google::protobuf::int32 theonlineuserid() const;
  inline void set_theonlineuserid(::google::protobuf::int32 value);

  // required int32 onlineoroffline = 3;
  inline bool has_onlineoroffline() const;
  inline void clear_onlineoroffline();
  static const int kOnlineorofflineFieldNumber = 3;
  inline ::google::protobuf::int32 onlineoroffline() const;
  inline void set_onlineoroffline(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_NotifyAllFriendOnline)
 private:
  inline void set_has_theonlineuserid();
  inline void clear_has_theonlineuserid();
  inline void set_has_onlineoroffline();
  inline void clear_has_onlineoroffline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userid_;
  ::google::protobuf::int32 theonlineuserid_;
  ::google::protobuf::int32 onlineoroffline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_NotifyAllFriendOnline* default_instance_;
};
// -------------------------------------------------------------------

class S2C_RankingGlodcoin_Rsp : public ::google::protobuf::Message {
 public:
  S2C_RankingGlodcoin_Rsp();
  virtual ~S2C_RankingGlodcoin_Rsp();

  S2C_RankingGlodcoin_Rsp(const S2C_RankingGlodcoin_Rsp& from);

  inline S2C_RankingGlodcoin_Rsp& operator=(const S2C_RankingGlodcoin_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_RankingGlodcoin_Rsp& default_instance();

  void Swap(S2C_RankingGlodcoin_Rsp* other);

  // implements Message ----------------------------------------------

  S2C_RankingGlodcoin_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_RankingGlodcoin_Rsp& from);
  void MergeFrom(const S2C_RankingGlodcoin_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2C_RankingGlodcoin_Rsp_RETCODE RETCODE;
  static const RETCODE SUCCESS = S2C_RankingGlodcoin_Rsp_RETCODE_SUCCESS;
  static const RETCODE HADGOT = S2C_RankingGlodcoin_Rsp_RETCODE_HADGOT;
  static const RETCODE NOFRIEND = S2C_RankingGlodcoin_Rsp_RETCODE_NOFRIEND;
  static const RETCODE EXCEPTION = S2C_RankingGlodcoin_Rsp_RETCODE_EXCEPTION;
  static inline bool RETCODE_IsValid(int value) {
    return S2C_RankingGlodcoin_Rsp_RETCODE_IsValid(value);
  }
  static const RETCODE RETCODE_MIN =
    S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_MIN;
  static const RETCODE RETCODE_MAX =
    S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_MAX;
  static const int RETCODE_ARRAYSIZE =
    S2C_RankingGlodcoin_Rsp_RETCODE_RETCODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RETCODE_descriptor() {
    return S2C_RankingGlodcoin_Rsp_RETCODE_descriptor();
  }
  static inline const ::std::string& RETCODE_Name(RETCODE value) {
    return S2C_RankingGlodcoin_Rsp_RETCODE_Name(value);
  }
  static inline bool RETCODE_Parse(const ::std::string& name,
      RETCODE* value) {
    return S2C_RankingGlodcoin_Rsp_RETCODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline bool ret_code() const;
  inline void set_ret_code(bool value);

  // required int32 goldcolin_number = 2;
  inline bool has_goldcolin_number() const;
  inline void clear_goldcolin_number();
  static const int kGoldcolinNumberFieldNumber = 2;
  inline ::google::protobuf::int32 goldcolin_number() const;
  inline void set_goldcolin_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_RankingGlodcoin_Rsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_goldcolin_number();
  inline void clear_has_goldcolin_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_code_;
  ::google::protobuf::int32 goldcolin_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_RankingGlodcoin_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class S2C_RankingChange : public ::google::protobuf::Message {
 public:
  S2C_RankingChange();
  virtual ~S2C_RankingChange();

  S2C_RankingChange(const S2C_RankingChange& from);

  inline S2C_RankingChange& operator=(const S2C_RankingChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_RankingChange& default_instance();

  void Swap(S2C_RankingChange* other);

  // implements Message ----------------------------------------------

  S2C_RankingChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_RankingChange& from);
  void MergeFrom(const S2C_RankingChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 friend_ranking = 1;
  inline bool has_friend_ranking() const;
  inline void clear_friend_ranking();
  static const int kFriendRankingFieldNumber = 1;
  inline ::google::protobuf::int32 friend_ranking() const;
  inline void set_friend_ranking(::google::protobuf::int32 value);

  // required string friend_nickname = 2;
  inline bool has_friend_nickname() const;
  inline void clear_friend_nickname();
  static const int kFriendNicknameFieldNumber = 2;
  inline const ::std::string& friend_nickname() const;
  inline void set_friend_nickname(const ::std::string& value);
  inline void set_friend_nickname(const char* value);
  inline void set_friend_nickname(const char* value, size_t size);
  inline ::std::string* mutable_friend_nickname();
  inline ::std::string* release_friend_nickname();
  inline void set_allocated_friend_nickname(::std::string* friend_nickname);

  // required int32 friend_points = 3;
  inline bool has_friend_points() const;
  inline void clear_friend_points();
  static const int kFriendPointsFieldNumber = 3;
  inline ::google::protobuf::int32 friend_points() const;
  inline void set_friend_points(::google::protobuf::int32 value);

  // required int32 ranking = 4;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 4;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FRIEND.S2C_RankingChange)
 private:
  inline void set_has_friend_ranking();
  inline void clear_has_friend_ranking();
  inline void set_has_friend_nickname();
  inline void clear_has_friend_nickname();
  inline void set_has_friend_points();
  inline void clear_has_friend_points();
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* friend_nickname_;
  ::google::protobuf::int32 friend_ranking_;
  ::google::protobuf::int32 friend_points_;
  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static S2C_RankingChange* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendInfo

// required int32 role_id = 1;
inline bool FriendInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfo::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 FriendInfo::role_id() const {
  return role_id_;
}
inline void FriendInfo::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional bytes nick_name = 2;
inline bool FriendInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfo::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& FriendInfo::nick_name() const {
  return *nick_name_;
}
inline void FriendInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void FriendInfo::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void FriendInfo::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfo::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* FriendInfo::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 points = 3;
inline bool FriendInfo::has_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfo::set_has_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfo::clear_points() {
  points_ = GOOGLE_LONGLONG(0);
  clear_has_points();
}
inline ::google::protobuf::int64 FriendInfo::points() const {
  return points_;
}
inline void FriendInfo::set_points(::google::protobuf::int64 value) {
  set_has_points();
  points_ = value;
}

// optional int32 equipmentCardId = 4;
inline bool FriendInfo::has_equipmentcardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfo::set_has_equipmentcardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfo::clear_has_equipmentcardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfo::clear_equipmentcardid() {
  equipmentcardid_ = 0;
  clear_has_equipmentcardid();
}
inline ::google::protobuf::int32 FriendInfo::equipmentcardid() const {
  return equipmentcardid_;
}
inline void FriendInfo::set_equipmentcardid(::google::protobuf::int32 value) {
  set_has_equipmentcardid();
  equipmentcardid_ = value;
}

// optional int32 current_die_id = 5;
inline bool FriendInfo::has_current_die_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfo::set_has_current_die_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfo::clear_has_current_die_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfo::clear_current_die_id() {
  current_die_id_ = 0;
  clear_has_current_die_id();
}
inline ::google::protobuf::int32 FriendInfo::current_die_id() const {
  return current_die_id_;
}
inline void FriendInfo::set_current_die_id(::google::protobuf::int32 value) {
  set_has_current_die_id();
  current_die_id_ = value;
}

// optional bytes under_write = 6;
inline bool FriendInfo::has_under_write() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendInfo::set_has_under_write() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendInfo::clear_has_under_write() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendInfo::clear_under_write() {
  if (under_write_ != &::google::protobuf::internal::kEmptyString) {
    under_write_->clear();
  }
  clear_has_under_write();
}
inline const ::std::string& FriendInfo::under_write() const {
  return *under_write_;
}
inline void FriendInfo::set_under_write(const ::std::string& value) {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  under_write_->assign(value);
}
inline void FriendInfo::set_under_write(const char* value) {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  under_write_->assign(value);
}
inline void FriendInfo::set_under_write(const void* value, size_t size) {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  under_write_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfo::mutable_under_write() {
  set_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    under_write_ = new ::std::string;
  }
  return under_write_;
}
inline ::std::string* FriendInfo::release_under_write() {
  clear_has_under_write();
  if (under_write_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = under_write_;
    under_write_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendInfo::set_allocated_under_write(::std::string* under_write) {
  if (under_write_ != &::google::protobuf::internal::kEmptyString) {
    delete under_write_;
  }
  if (under_write) {
    set_has_under_write();
    under_write_ = under_write;
  } else {
    clear_has_under_write();
    under_write_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 head_icon = 7;
inline bool FriendInfo::has_head_icon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendInfo::set_has_head_icon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendInfo::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendInfo::clear_head_icon() {
  head_icon_ = 0;
  clear_has_head_icon();
}
inline ::google::protobuf::int32 FriendInfo::head_icon() const {
  return head_icon_;
}
inline void FriendInfo::set_head_icon(::google::protobuf::int32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// repeated .DBCACHE.PlayerGameRecord game_record = 8;
inline int FriendInfo::game_record_size() const {
  return game_record_.size();
}
inline void FriendInfo::clear_game_record() {
  game_record_.Clear();
}
inline const ::DBCACHE::PlayerGameRecord& FriendInfo::game_record(int index) const {
  return game_record_.Get(index);
}
inline ::DBCACHE::PlayerGameRecord* FriendInfo::mutable_game_record(int index) {
  return game_record_.Mutable(index);
}
inline ::DBCACHE::PlayerGameRecord* FriendInfo::add_game_record() {
  return game_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >&
FriendInfo::game_record() const {
  return game_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBCACHE::PlayerGameRecord >*
FriendInfo::mutable_game_record() {
  return &game_record_;
}

// optional int32 send_clover_time = 9;
inline bool FriendInfo::has_send_clover_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendInfo::set_has_send_clover_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendInfo::clear_has_send_clover_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendInfo::clear_send_clover_time() {
  send_clover_time_ = 0;
  clear_has_send_clover_time();
}
inline ::google::protobuf::int32 FriendInfo::send_clover_time() const {
  return send_clover_time_;
}
inline void FriendInfo::set_send_clover_time(::google::protobuf::int32 value) {
  set_has_send_clover_time();
  send_clover_time_ = value;
}

// optional int32 isOnline = 10;
inline bool FriendInfo::has_isonline() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendInfo::set_has_isonline() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendInfo::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendInfo::clear_isonline() {
  isonline_ = 0;
  clear_has_isonline();
}
inline ::google::protobuf::int32 FriendInfo::isonline() const {
  return isonline_;
}
inline void FriendInfo::set_isonline(::google::protobuf::int32 value) {
  set_has_isonline();
  isonline_ = value;
}

// -------------------------------------------------------------------

// PlayerFriendInfo

// repeated .FRIEND.FriendInfo friend = 1;
inline int PlayerFriendInfo::friend__size() const {
  return friend__.size();
}
inline void PlayerFriendInfo::clear_friend_() {
  friend__.Clear();
}
inline const ::FRIEND::FriendInfo& PlayerFriendInfo::friend_(int index) const {
  return friend__.Get(index);
}
inline ::FRIEND::FriendInfo* PlayerFriendInfo::mutable_friend_(int index) {
  return friend__.Mutable(index);
}
inline ::FRIEND::FriendInfo* PlayerFriendInfo::add_friend_() {
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >&
PlayerFriendInfo::friend_() const {
  return friend__;
}
inline ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >*
PlayerFriendInfo::mutable_friend_() {
  return &friend__;
}

// repeated .FRIEND.FriendInfo ToBeConfirmedFriend = 2;
inline int PlayerFriendInfo::tobeconfirmedfriend_size() const {
  return tobeconfirmedfriend_.size();
}
inline void PlayerFriendInfo::clear_tobeconfirmedfriend() {
  tobeconfirmedfriend_.Clear();
}
inline const ::FRIEND::FriendInfo& PlayerFriendInfo::tobeconfirmedfriend(int index) const {
  return tobeconfirmedfriend_.Get(index);
}
inline ::FRIEND::FriendInfo* PlayerFriendInfo::mutable_tobeconfirmedfriend(int index) {
  return tobeconfirmedfriend_.Mutable(index);
}
inline ::FRIEND::FriendInfo* PlayerFriendInfo::add_tobeconfirmedfriend() {
  return tobeconfirmedfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >&
PlayerFriendInfo::tobeconfirmedfriend() const {
  return tobeconfirmedfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >*
PlayerFriendInfo::mutable_tobeconfirmedfriend() {
  return &tobeconfirmedfriend_;
}

// repeated int32 apply_friendid = 3;
inline int PlayerFriendInfo::apply_friendid_size() const {
  return apply_friendid_.size();
}
inline void PlayerFriendInfo::clear_apply_friendid() {
  apply_friendid_.Clear();
}
inline ::google::protobuf::int32 PlayerFriendInfo::apply_friendid(int index) const {
  return apply_friendid_.Get(index);
}
inline void PlayerFriendInfo::set_apply_friendid(int index, ::google::protobuf::int32 value) {
  apply_friendid_.Set(index, value);
}
inline void PlayerFriendInfo::add_apply_friendid(::google::protobuf::int32 value) {
  apply_friendid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerFriendInfo::apply_friendid() const {
  return apply_friendid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerFriendInfo::mutable_apply_friendid() {
  return &apply_friendid_;
}

// optional int32 mypoints = 4;
inline bool PlayerFriendInfo::has_mypoints() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerFriendInfo::set_has_mypoints() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerFriendInfo::clear_has_mypoints() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerFriendInfo::clear_mypoints() {
  mypoints_ = 0;
  clear_has_mypoints();
}
inline ::google::protobuf::int32 PlayerFriendInfo::mypoints() const {
  return mypoints_;
}
inline void PlayerFriendInfo::set_mypoints(::google::protobuf::int32 value) {
  set_has_mypoints();
  mypoints_ = value;
}

// optional bytes nickname = 5;
inline bool PlayerFriendInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerFriendInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerFriendInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerFriendInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PlayerFriendInfo::nickname() const {
  return *nickname_;
}
inline void PlayerFriendInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PlayerFriendInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PlayerFriendInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerFriendInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* PlayerFriendInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerFriendInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 last_week_rank = 6;
inline bool PlayerFriendInfo::has_last_week_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerFriendInfo::set_has_last_week_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerFriendInfo::clear_has_last_week_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerFriendInfo::clear_last_week_rank() {
  last_week_rank_ = 0;
  clear_has_last_week_rank();
}
inline ::google::protobuf::int32 PlayerFriendInfo::last_week_rank() const {
  return last_week_rank_;
}
inline void PlayerFriendInfo::set_last_week_rank(::google::protobuf::int32 value) {
  set_has_last_week_rank();
  last_week_rank_ = value;
}

// optional int32 last_week_rank_change_time = 7;
inline bool PlayerFriendInfo::has_last_week_rank_change_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerFriendInfo::set_has_last_week_rank_change_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerFriendInfo::clear_has_last_week_rank_change_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerFriendInfo::clear_last_week_rank_change_time() {
  last_week_rank_change_time_ = 0;
  clear_has_last_week_rank_change_time();
}
inline ::google::protobuf::int32 PlayerFriendInfo::last_week_rank_change_time() const {
  return last_week_rank_change_time_;
}
inline void PlayerFriendInfo::set_last_week_rank_change_time(::google::protobuf::int32 value) {
  set_has_last_week_rank_change_time();
  last_week_rank_change_time_ = value;
}

// optional int32 last_week_point = 8;
inline bool PlayerFriendInfo::has_last_week_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerFriendInfo::set_has_last_week_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerFriendInfo::clear_has_last_week_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerFriendInfo::clear_last_week_point() {
  last_week_point_ = 0;
  clear_has_last_week_point();
}
inline ::google::protobuf::int32 PlayerFriendInfo::last_week_point() const {
  return last_week_point_;
}
inline void PlayerFriendInfo::set_last_week_point(::google::protobuf::int32 value) {
  set_has_last_week_point();
  last_week_point_ = value;
}

// optional int32 this_week_rank = 9;
inline bool PlayerFriendInfo::has_this_week_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerFriendInfo::set_has_this_week_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerFriendInfo::clear_has_this_week_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerFriendInfo::clear_this_week_rank() {
  this_week_rank_ = 0;
  clear_has_this_week_rank();
}
inline ::google::protobuf::int32 PlayerFriendInfo::this_week_rank() const {
  return this_week_rank_;
}
inline void PlayerFriendInfo::set_this_week_rank(::google::protobuf::int32 value) {
  set_has_this_week_rank();
  this_week_rank_ = value;
}

// optional int32 this_week_rank_change_time = 10;
inline bool PlayerFriendInfo::has_this_week_rank_change_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerFriendInfo::set_has_this_week_rank_change_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerFriendInfo::clear_has_this_week_rank_change_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerFriendInfo::clear_this_week_rank_change_time() {
  this_week_rank_change_time_ = 0;
  clear_has_this_week_rank_change_time();
}
inline ::google::protobuf::int32 PlayerFriendInfo::this_week_rank_change_time() const {
  return this_week_rank_change_time_;
}
inline void PlayerFriendInfo::set_this_week_rank_change_time(::google::protobuf::int32 value) {
  set_has_this_week_rank_change_time();
  this_week_rank_change_time_ = value;
}

// optional int32 this_week_point = 11;
inline bool PlayerFriendInfo::has_this_week_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerFriendInfo::set_has_this_week_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerFriendInfo::clear_has_this_week_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerFriendInfo::clear_this_week_point() {
  this_week_point_ = 0;
  clear_has_this_week_point();
}
inline ::google::protobuf::int32 PlayerFriendInfo::this_week_point() const {
  return this_week_point_;
}
inline void PlayerFriendInfo::set_this_week_point(::google::protobuf::int32 value) {
  set_has_this_week_point();
  this_week_point_ = value;
}

// optional int32 last_rank_reward_time = 12;
inline bool PlayerFriendInfo::has_last_rank_reward_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerFriendInfo::set_has_last_rank_reward_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerFriendInfo::clear_has_last_rank_reward_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerFriendInfo::clear_last_rank_reward_time() {
  last_rank_reward_time_ = 0;
  clear_has_last_rank_reward_time();
}
inline ::google::protobuf::int32 PlayerFriendInfo::last_rank_reward_time() const {
  return last_rank_reward_time_;
}
inline void PlayerFriendInfo::set_last_rank_reward_time(::google::protobuf::int32 value) {
  set_has_last_rank_reward_time();
  last_rank_reward_time_ = value;
}

// -------------------------------------------------------------------

// C2S_SearchFriend

// required bytes keyWorld = 1;
inline bool C2S_SearchFriend::has_keyworld() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_SearchFriend::set_has_keyworld() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_SearchFriend::clear_has_keyworld() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_SearchFriend::clear_keyworld() {
  if (keyworld_ != &::google::protobuf::internal::kEmptyString) {
    keyworld_->clear();
  }
  clear_has_keyworld();
}
inline const ::std::string& C2S_SearchFriend::keyworld() const {
  return *keyworld_;
}
inline void C2S_SearchFriend::set_keyworld(const ::std::string& value) {
  set_has_keyworld();
  if (keyworld_ == &::google::protobuf::internal::kEmptyString) {
    keyworld_ = new ::std::string;
  }
  keyworld_->assign(value);
}
inline void C2S_SearchFriend::set_keyworld(const char* value) {
  set_has_keyworld();
  if (keyworld_ == &::google::protobuf::internal::kEmptyString) {
    keyworld_ = new ::std::string;
  }
  keyworld_->assign(value);
}
inline void C2S_SearchFriend::set_keyworld(const void* value, size_t size) {
  set_has_keyworld();
  if (keyworld_ == &::google::protobuf::internal::kEmptyString) {
    keyworld_ = new ::std::string;
  }
  keyworld_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2S_SearchFriend::mutable_keyworld() {
  set_has_keyworld();
  if (keyworld_ == &::google::protobuf::internal::kEmptyString) {
    keyworld_ = new ::std::string;
  }
  return keyworld_;
}
inline ::std::string* C2S_SearchFriend::release_keyworld() {
  clear_has_keyworld();
  if (keyworld_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keyworld_;
    keyworld_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2S_SearchFriend::set_allocated_keyworld(::std::string* keyworld) {
  if (keyworld_ != &::google::protobuf::internal::kEmptyString) {
    delete keyworld_;
  }
  if (keyworld) {
    set_has_keyworld();
    keyworld_ = keyworld;
  } else {
    clear_has_keyworld();
    keyworld_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2C_SearchFrindAnsList

// required int32 ret_code = 1;
inline bool S2C_SearchFrindAnsList::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_SearchFrindAnsList::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_SearchFrindAnsList::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_SearchFrindAnsList::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_SearchFrindAnsList::ret_code() const {
  return ret_code_;
}
inline void S2C_SearchFrindAnsList::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// repeated .FRIEND.FriendInfo user = 2;
inline int S2C_SearchFrindAnsList::user_size() const {
  return user_.size();
}
inline void S2C_SearchFrindAnsList::clear_user() {
  user_.Clear();
}
inline const ::FRIEND::FriendInfo& S2C_SearchFrindAnsList::user(int index) const {
  return user_.Get(index);
}
inline ::FRIEND::FriendInfo* S2C_SearchFrindAnsList::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::FRIEND::FriendInfo* S2C_SearchFrindAnsList::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >&
S2C_SearchFrindAnsList::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::FRIEND::FriendInfo >*
S2C_SearchFrindAnsList::mutable_user() {
  return &user_;
}

// -------------------------------------------------------------------

// F2D_GetRecommandFriendList

// repeated int32 role_id = 1;
inline int F2D_GetRecommandFriendList::role_id_size() const {
  return role_id_.size();
}
inline void F2D_GetRecommandFriendList::clear_role_id() {
  role_id_.Clear();
}
inline ::google::protobuf::int32 F2D_GetRecommandFriendList::role_id(int index) const {
  return role_id_.Get(index);
}
inline void F2D_GetRecommandFriendList::set_role_id(int index, ::google::protobuf::int32 value) {
  role_id_.Set(index, value);
}
inline void F2D_GetRecommandFriendList::add_role_id(::google::protobuf::int32 value) {
  role_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
F2D_GetRecommandFriendList::role_id() const {
  return role_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
F2D_GetRecommandFriendList::mutable_role_id() {
  return &role_id_;
}

// -------------------------------------------------------------------

// C2S_AddToMyFriend

// required int32 user = 1;
inline bool C2S_AddToMyFriend::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_AddToMyFriend::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_AddToMyFriend::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_AddToMyFriend::clear_user() {
  user_ = 0;
  clear_has_user();
}
inline ::google::protobuf::int32 C2S_AddToMyFriend::user() const {
  return user_;
}
inline void C2S_AddToMyFriend::set_user(::google::protobuf::int32 value) {
  set_has_user();
  user_ = value;
}

// -------------------------------------------------------------------

// C2S_AddToMyFriend_Rsp

// required int32 retcode = 1;
inline bool C2S_AddToMyFriend_Rsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_AddToMyFriend_Rsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_AddToMyFriend_Rsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_AddToMyFriend_Rsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 C2S_AddToMyFriend_Rsp::retcode() const {
  return retcode_;
}
inline void C2S_AddToMyFriend_Rsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// S2C_PleaseConfirmFriend

// required .FRIEND.FriendInfo userSrc = 1;
inline bool S2C_PleaseConfirmFriend::has_usersrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_PleaseConfirmFriend::set_has_usersrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_PleaseConfirmFriend::clear_has_usersrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_PleaseConfirmFriend::clear_usersrc() {
  if (usersrc_ != NULL) usersrc_->::FRIEND::FriendInfo::Clear();
  clear_has_usersrc();
}
inline const ::FRIEND::FriendInfo& S2C_PleaseConfirmFriend::usersrc() const {
  return usersrc_ != NULL ? *usersrc_ : *default_instance_->usersrc_;
}
inline ::FRIEND::FriendInfo* S2C_PleaseConfirmFriend::mutable_usersrc() {
  set_has_usersrc();
  if (usersrc_ == NULL) usersrc_ = new ::FRIEND::FriendInfo;
  return usersrc_;
}
inline ::FRIEND::FriendInfo* S2C_PleaseConfirmFriend::release_usersrc() {
  clear_has_usersrc();
  ::FRIEND::FriendInfo* temp = usersrc_;
  usersrc_ = NULL;
  return temp;
}
inline void S2C_PleaseConfirmFriend::set_allocated_usersrc(::FRIEND::FriendInfo* usersrc) {
  delete usersrc_;
  usersrc_ = usersrc;
  if (usersrc) {
    set_has_usersrc();
  } else {
    clear_has_usersrc();
  }
}

// -------------------------------------------------------------------

// ComfirmFriend

// required int32 userid = 1;
inline bool ComfirmFriend::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComfirmFriend::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComfirmFriend::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComfirmFriend::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ComfirmFriend::userid() const {
  return userid_;
}
inline void ComfirmFriend::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// C2S_ComfirmFriend

// required int32 isComfirm = 1;
inline bool C2S_ComfirmFriend::has_iscomfirm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_ComfirmFriend::set_has_iscomfirm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_ComfirmFriend::clear_has_iscomfirm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_ComfirmFriend::clear_iscomfirm() {
  iscomfirm_ = 0;
  clear_has_iscomfirm();
}
inline ::google::protobuf::int32 C2S_ComfirmFriend::iscomfirm() const {
  return iscomfirm_;
}
inline void C2S_ComfirmFriend::set_iscomfirm(::google::protobuf::int32 value) {
  set_has_iscomfirm();
  iscomfirm_ = value;
}

// optional int32 userSrc = 2;
inline bool C2S_ComfirmFriend::has_usersrc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_ComfirmFriend::set_has_usersrc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_ComfirmFriend::clear_has_usersrc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_ComfirmFriend::clear_usersrc() {
  usersrc_ = 0;
  clear_has_usersrc();
}
inline ::google::protobuf::int32 C2S_ComfirmFriend::usersrc() const {
  return usersrc_;
}
inline void C2S_ComfirmFriend::set_usersrc(::google::protobuf::int32 value) {
  set_has_usersrc();
  usersrc_ = value;
}

// -------------------------------------------------------------------

// S2C_AddFriendToList

// required .FRIEND.FriendInfo user = 1;
inline bool S2C_AddFriendToList::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_AddFriendToList::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_AddFriendToList::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_AddFriendToList::clear_user() {
  if (user_ != NULL) user_->::FRIEND::FriendInfo::Clear();
  clear_has_user();
}
inline const ::FRIEND::FriendInfo& S2C_AddFriendToList::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::FRIEND::FriendInfo* S2C_AddFriendToList::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::FRIEND::FriendInfo;
  return user_;
}
inline ::FRIEND::FriendInfo* S2C_AddFriendToList::release_user() {
  clear_has_user();
  ::FRIEND::FriendInfo* temp = user_;
  user_ = NULL;
  return temp;
}
inline void S2C_AddFriendToList::set_allocated_user(::FRIEND::FriendInfo* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// S2C_AllFriendList

// optional .FRIEND.PlayerFriendInfo myFriendsInfo = 1;
inline bool S2C_AllFriendList::has_myfriendsinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_AllFriendList::set_has_myfriendsinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_AllFriendList::clear_has_myfriendsinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_AllFriendList::clear_myfriendsinfo() {
  if (myfriendsinfo_ != NULL) myfriendsinfo_->::FRIEND::PlayerFriendInfo::Clear();
  clear_has_myfriendsinfo();
}
inline const ::FRIEND::PlayerFriendInfo& S2C_AllFriendList::myfriendsinfo() const {
  return myfriendsinfo_ != NULL ? *myfriendsinfo_ : *default_instance_->myfriendsinfo_;
}
inline ::FRIEND::PlayerFriendInfo* S2C_AllFriendList::mutable_myfriendsinfo() {
  set_has_myfriendsinfo();
  if (myfriendsinfo_ == NULL) myfriendsinfo_ = new ::FRIEND::PlayerFriendInfo;
  return myfriendsinfo_;
}
inline ::FRIEND::PlayerFriendInfo* S2C_AllFriendList::release_myfriendsinfo() {
  clear_has_myfriendsinfo();
  ::FRIEND::PlayerFriendInfo* temp = myfriendsinfo_;
  myfriendsinfo_ = NULL;
  return temp;
}
inline void S2C_AllFriendList::set_allocated_myfriendsinfo(::FRIEND::PlayerFriendInfo* myfriendsinfo) {
  delete myfriendsinfo_;
  myfriendsinfo_ = myfriendsinfo;
  if (myfriendsinfo) {
    set_has_myfriendsinfo();
  } else {
    clear_has_myfriendsinfo();
  }
}

// optional int32 ret_code = 2;
inline bool S2C_AllFriendList::has_ret_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_AllFriendList::set_has_ret_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_AllFriendList::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_AllFriendList::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 S2C_AllFriendList::ret_code() const {
  return ret_code_;
}
inline void S2C_AllFriendList::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// F2D_AllFriendRoleIdList

// repeated int32 friendId = 1;
inline int F2D_AllFriendRoleIdList::friendid_size() const {
  return friendid_.size();
}
inline void F2D_AllFriendRoleIdList::clear_friendid() {
  friendid_.Clear();
}
inline ::google::protobuf::int32 F2D_AllFriendRoleIdList::friendid(int index) const {
  return friendid_.Get(index);
}
inline void F2D_AllFriendRoleIdList::set_friendid(int index, ::google::protobuf::int32 value) {
  friendid_.Set(index, value);
}
inline void F2D_AllFriendRoleIdList::add_friendid(::google::protobuf::int32 value) {
  friendid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
F2D_AllFriendRoleIdList::friendid() const {
  return friendid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
F2D_AllFriendRoleIdList::mutable_friendid() {
  return &friendid_;
}

// repeated int32 ToBeConfirmedFriendID = 2;
inline int F2D_AllFriendRoleIdList::tobeconfirmedfriendid_size() const {
  return tobeconfirmedfriendid_.size();
}
inline void F2D_AllFriendRoleIdList::clear_tobeconfirmedfriendid() {
  tobeconfirmedfriendid_.Clear();
}
inline ::google::protobuf::int32 F2D_AllFriendRoleIdList::tobeconfirmedfriendid(int index) const {
  return tobeconfirmedfriendid_.Get(index);
}
inline void F2D_AllFriendRoleIdList::set_tobeconfirmedfriendid(int index, ::google::protobuf::int32 value) {
  tobeconfirmedfriendid_.Set(index, value);
}
inline void F2D_AllFriendRoleIdList::add_tobeconfirmedfriendid(::google::protobuf::int32 value) {
  tobeconfirmedfriendid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
F2D_AllFriendRoleIdList::tobeconfirmedfriendid() const {
  return tobeconfirmedfriendid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
F2D_AllFriendRoleIdList::mutable_tobeconfirmedfriendid() {
  return &tobeconfirmedfriendid_;
}

// -------------------------------------------------------------------

// C2S_DeleteMyFriend

// required int32 role_id = 1;
inline bool C2S_DeleteMyFriend::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_DeleteMyFriend::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_DeleteMyFriend::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_DeleteMyFriend::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 C2S_DeleteMyFriend::role_id() const {
  return role_id_;
}
inline void C2S_DeleteMyFriend::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// S2C_DeleteMyFriendRsp

// required int32 role_id = 1;
inline bool S2C_DeleteMyFriendRsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_DeleteMyFriendRsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_DeleteMyFriendRsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_DeleteMyFriendRsp::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 S2C_DeleteMyFriendRsp::role_id() const {
  return role_id_;
}
inline void S2C_DeleteMyFriendRsp::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required int32 isSuccess = 2;
inline bool S2C_DeleteMyFriendRsp::has_issuccess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_DeleteMyFriendRsp::set_has_issuccess() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_DeleteMyFriendRsp::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_DeleteMyFriendRsp::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 S2C_DeleteMyFriendRsp::issuccess() const {
  return issuccess_;
}
inline void S2C_DeleteMyFriendRsp::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional int32 reason = 3;
inline bool S2C_DeleteMyFriendRsp::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_DeleteMyFriendRsp::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_DeleteMyFriendRsp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_DeleteMyFriendRsp::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 S2C_DeleteMyFriendRsp::reason() const {
  return reason_;
}
inline void S2C_DeleteMyFriendRsp::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// F2P_NotifyAllFriendOnline

// repeated int32 userid = 1;
inline int F2P_NotifyAllFriendOnline::userid_size() const {
  return userid_.size();
}
inline void F2P_NotifyAllFriendOnline::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::int32 F2P_NotifyAllFriendOnline::userid(int index) const {
  return userid_.Get(index);
}
inline void F2P_NotifyAllFriendOnline::set_userid(int index, ::google::protobuf::int32 value) {
  userid_.Set(index, value);
}
inline void F2P_NotifyAllFriendOnline::add_userid(::google::protobuf::int32 value) {
  userid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
F2P_NotifyAllFriendOnline::userid() const {
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
F2P_NotifyAllFriendOnline::mutable_userid() {
  return &userid_;
}

// required int32 theonlineuserid = 2;
inline bool F2P_NotifyAllFriendOnline::has_theonlineuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void F2P_NotifyAllFriendOnline::set_has_theonlineuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void F2P_NotifyAllFriendOnline::clear_has_theonlineuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void F2P_NotifyAllFriendOnline::clear_theonlineuserid() {
  theonlineuserid_ = 0;
  clear_has_theonlineuserid();
}
inline ::google::protobuf::int32 F2P_NotifyAllFriendOnline::theonlineuserid() const {
  return theonlineuserid_;
}
inline void F2P_NotifyAllFriendOnline::set_theonlineuserid(::google::protobuf::int32 value) {
  set_has_theonlineuserid();
  theonlineuserid_ = value;
}

// required int32 onlineoroffline = 3;
inline bool F2P_NotifyAllFriendOnline::has_onlineoroffline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void F2P_NotifyAllFriendOnline::set_has_onlineoroffline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void F2P_NotifyAllFriendOnline::clear_has_onlineoroffline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void F2P_NotifyAllFriendOnline::clear_onlineoroffline() {
  onlineoroffline_ = 0;
  clear_has_onlineoroffline();
}
inline ::google::protobuf::int32 F2P_NotifyAllFriendOnline::onlineoroffline() const {
  return onlineoroffline_;
}
inline void F2P_NotifyAllFriendOnline::set_onlineoroffline(::google::protobuf::int32 value) {
  set_has_onlineoroffline();
  onlineoroffline_ = value;
}

// -------------------------------------------------------------------

// S2C_NotifyAllFriendOnline

// repeated int32 userid = 1;
inline int S2C_NotifyAllFriendOnline::userid_size() const {
  return userid_.size();
}
inline void S2C_NotifyAllFriendOnline::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::int32 S2C_NotifyAllFriendOnline::userid(int index) const {
  return userid_.Get(index);
}
inline void S2C_NotifyAllFriendOnline::set_userid(int index, ::google::protobuf::int32 value) {
  userid_.Set(index, value);
}
inline void S2C_NotifyAllFriendOnline::add_userid(::google::protobuf::int32 value) {
  userid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2C_NotifyAllFriendOnline::userid() const {
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2C_NotifyAllFriendOnline::mutable_userid() {
  return &userid_;
}

// required int32 theonlineuserid = 2;
inline bool S2C_NotifyAllFriendOnline::has_theonlineuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_NotifyAllFriendOnline::set_has_theonlineuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_NotifyAllFriendOnline::clear_has_theonlineuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_NotifyAllFriendOnline::clear_theonlineuserid() {
  theonlineuserid_ = 0;
  clear_has_theonlineuserid();
}
inline ::google::protobuf::int32 S2C_NotifyAllFriendOnline::theonlineuserid() const {
  return theonlineuserid_;
}
inline void S2C_NotifyAllFriendOnline::set_theonlineuserid(::google::protobuf::int32 value) {
  set_has_theonlineuserid();
  theonlineuserid_ = value;
}

// required int32 onlineoroffline = 3;
inline bool S2C_NotifyAllFriendOnline::has_onlineoroffline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_NotifyAllFriendOnline::set_has_onlineoroffline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_NotifyAllFriendOnline::clear_has_onlineoroffline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_NotifyAllFriendOnline::clear_onlineoroffline() {
  onlineoroffline_ = 0;
  clear_has_onlineoroffline();
}
inline ::google::protobuf::int32 S2C_NotifyAllFriendOnline::onlineoroffline() const {
  return onlineoroffline_;
}
inline void S2C_NotifyAllFriendOnline::set_onlineoroffline(::google::protobuf::int32 value) {
  set_has_onlineoroffline();
  onlineoroffline_ = value;
}

// -------------------------------------------------------------------

// S2C_RankingGlodcoin_Rsp

// required bool ret_code = 1;
inline bool S2C_RankingGlodcoin_Rsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_RankingGlodcoin_Rsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_RankingGlodcoin_Rsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_RankingGlodcoin_Rsp::clear_ret_code() {
  ret_code_ = false;
  clear_has_ret_code();
}
inline bool S2C_RankingGlodcoin_Rsp::ret_code() const {
  return ret_code_;
}
inline void S2C_RankingGlodcoin_Rsp::set_ret_code(bool value) {
  set_has_ret_code();
  ret_code_ = value;
}

// required int32 goldcolin_number = 2;
inline bool S2C_RankingGlodcoin_Rsp::has_goldcolin_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_RankingGlodcoin_Rsp::set_has_goldcolin_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_RankingGlodcoin_Rsp::clear_has_goldcolin_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_RankingGlodcoin_Rsp::clear_goldcolin_number() {
  goldcolin_number_ = 0;
  clear_has_goldcolin_number();
}
inline ::google::protobuf::int32 S2C_RankingGlodcoin_Rsp::goldcolin_number() const {
  return goldcolin_number_;
}
inline void S2C_RankingGlodcoin_Rsp::set_goldcolin_number(::google::protobuf::int32 value) {
  set_has_goldcolin_number();
  goldcolin_number_ = value;
}

// -------------------------------------------------------------------

// S2C_RankingChange

// required int32 friend_ranking = 1;
inline bool S2C_RankingChange::has_friend_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_RankingChange::set_has_friend_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_RankingChange::clear_has_friend_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_RankingChange::clear_friend_ranking() {
  friend_ranking_ = 0;
  clear_has_friend_ranking();
}
inline ::google::protobuf::int32 S2C_RankingChange::friend_ranking() const {
  return friend_ranking_;
}
inline void S2C_RankingChange::set_friend_ranking(::google::protobuf::int32 value) {
  set_has_friend_ranking();
  friend_ranking_ = value;
}

// required string friend_nickname = 2;
inline bool S2C_RankingChange::has_friend_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_RankingChange::set_has_friend_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_RankingChange::clear_has_friend_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_RankingChange::clear_friend_nickname() {
  if (friend_nickname_ != &::google::protobuf::internal::kEmptyString) {
    friend_nickname_->clear();
  }
  clear_has_friend_nickname();
}
inline const ::std::string& S2C_RankingChange::friend_nickname() const {
  return *friend_nickname_;
}
inline void S2C_RankingChange::set_friend_nickname(const ::std::string& value) {
  set_has_friend_nickname();
  if (friend_nickname_ == &::google::protobuf::internal::kEmptyString) {
    friend_nickname_ = new ::std::string;
  }
  friend_nickname_->assign(value);
}
inline void S2C_RankingChange::set_friend_nickname(const char* value) {
  set_has_friend_nickname();
  if (friend_nickname_ == &::google::protobuf::internal::kEmptyString) {
    friend_nickname_ = new ::std::string;
  }
  friend_nickname_->assign(value);
}
inline void S2C_RankingChange::set_friend_nickname(const char* value, size_t size) {
  set_has_friend_nickname();
  if (friend_nickname_ == &::google::protobuf::internal::kEmptyString) {
    friend_nickname_ = new ::std::string;
  }
  friend_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2C_RankingChange::mutable_friend_nickname() {
  set_has_friend_nickname();
  if (friend_nickname_ == &::google::protobuf::internal::kEmptyString) {
    friend_nickname_ = new ::std::string;
  }
  return friend_nickname_;
}
inline ::std::string* S2C_RankingChange::release_friend_nickname() {
  clear_has_friend_nickname();
  if (friend_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friend_nickname_;
    friend_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2C_RankingChange::set_allocated_friend_nickname(::std::string* friend_nickname) {
  if (friend_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_nickname_;
  }
  if (friend_nickname) {
    set_has_friend_nickname();
    friend_nickname_ = friend_nickname;
  } else {
    clear_has_friend_nickname();
    friend_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 friend_points = 3;
inline bool S2C_RankingChange::has_friend_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_RankingChange::set_has_friend_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_RankingChange::clear_has_friend_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_RankingChange::clear_friend_points() {
  friend_points_ = 0;
  clear_has_friend_points();
}
inline ::google::protobuf::int32 S2C_RankingChange::friend_points() const {
  return friend_points_;
}
inline void S2C_RankingChange::set_friend_points(::google::protobuf::int32 value) {
  set_has_friend_points();
  friend_points_ = value;
}

// required int32 ranking = 4;
inline bool S2C_RankingChange::has_ranking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2C_RankingChange::set_has_ranking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2C_RankingChange::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2C_RankingChange::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 S2C_RankingChange::ranking() const {
  return ranking_;
}
inline void S2C_RankingChange::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FRIEND

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::S2C_SearchFrindAnsList_STATUS>() {
  return ::FRIEND::S2C_SearchFrindAnsList_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::C2S_AddToMyFriend_Rsp_STATUS>() {
  return ::FRIEND::C2S_AddToMyFriend_Rsp_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::S2C_AllFriendList_STATUS>() {
  return ::FRIEND::S2C_AllFriendList_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::S2C_DeleteMyFriendRsp_STATUS>() {
  return ::FRIEND::S2C_DeleteMyFriendRsp_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::F2P_NotifyAllFriendOnline_status>() {
  return ::FRIEND::F2P_NotifyAllFriendOnline_status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::S2C_NotifyAllFriendOnline_status>() {
  return ::FRIEND::S2C_NotifyAllFriendOnline_status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND::S2C_RankingGlodcoin_Rsp_RETCODE>() {
  return ::FRIEND::S2C_RankingGlodcoin_Rsp_RETCODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
